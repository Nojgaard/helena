#!/bin/bash

MAX=$1
HC=$2

[ "$MAX" = "" ] && echo "missing \$1 = MAX # of nodes" && exit 1
[ "$HC" = "" ] && echo "missing \$2 = hash-compaction (0/1)" && exit 1

if [ "$HC" = 1 ]
then
    outDir=out/dbfs-hc
else
    outDir=out/dbfs
fi

echo -n "set terminal png size 600, 900;
set output \"dbfs-time.png\";
set xtics 1;
set xrange [1:$MAX];
set yrange [0.75:$MAX];
set key outside vertical center bottom font \",8\" box;
set lmargin 4;
plot x with lines linestyle 1 lw 2 lc rgb '#000000' title \"optimal\"" > plotT
echo -n "set terminal png size 600, 900;
set output \"dbfs-cpu.png\";
set xtics 1;
set xrange [1:$MAX];
set yrange [0:$((MAX / 2))];
set key outside vertical center bottom font \",8\" box;
set lmargin 4;
set size ratio 0.5;
plot 1 title '' with dots lc rgb '#000000'" > plotC
for i in $(seq 1 $MAX)
do
    echo -n ", $i title '' with dots lc rgb '#000000'" >> plotT
    echo -n ", $i title '' with dots lc rgb '#000000'" >> plotC
done
lp=1
ls -1 $outDir/*xml | \
    awk -F'_N' '{print $1}' | \
    awk -F'/' '{print $NF}' | \
    sort -u | \
    while read m
    do
        echo $m
        datT=$outDir/$m.time.dat
        datV=$outDir/$m.visited.dat
        datC=$outDir/$m.cpu.dat
        echo > $datT
        echo > $datV
        echo > $datC
        for N in $(seq 1 $MAX)
        do
            f=$outDir/$m"_N"$N.xml
            if [ -f "$f" ]
            then
                l=$(scripts/get-stat $f searchTime)
                resT=$(scripts/list-op min $l)
                l=$(scripts/get-stat $f statesStored)
                st=$(scripts/list-op sum $l)
                l=$(scripts/get-stat $f avgCPUUsage)
                resC=$(scripts/list-op sum $l)
		l=$(scripts/get-stat $f arcs)
		tr=$(scripts/list-op sum $l)
            elif [ $N = 1 ]
            then
                break
            fi
            if [ $N = 1 ]
            then
		refSt=$st
                refT=$resT
                refV=$resV
                echo 1 1 >> $datT
                echo 1 1 >> $datV
                echo 1 1 >> $datC
            else
		if [ $refSt != $st ]
		then
		    echo erreur N=$N, ref=$refSt, st=$st
		fi
                echo $N $(echo "scale = 2 ; $refT / $resT" | bc) >> $datT
                echo $N $(echo "scale = 2 ; $resC / ($N * 100)" | bc) >> $datC
            fi
        done
        m=$(echo $m | sed 's/_/-/g')
	S=$(echo "scale = 1 ; $st/1000000" | bc)
	T=$(echo "scale = 1 ; $tr/1000000" | bc)
	t="$m (|S|=${S}E6, |T|=${T}E6)"
        echo -n ", \"$datT\" title \"$t\" with lp ls "$lp >> plotT
        echo -n ", \"$datC\" title \"$t\" with lp ls "$lp >> plotC
        lp=$((lp + 1))
    done
for l in T C
do
    echo ";" >> plot$l
    cat plot$l | gnuplot
    rm plot$l
done
