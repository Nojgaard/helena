#!/bin/bash

out=dist-compression.out

plot () {
    chmod +x p
    ./p
    #rm p
}

calc () {
    echo "scale = 2; $*" | bc
}

printAvgAndDev () {
    vals=$*
    n=$(echo $vals | wc -w)
    sum=${vals// / + }
    avg=$(calc "($sum) / $n")
    dev=0
    for val in $vals
    do
        dev=$(calc "$dev + ($val - $avg) ^ 2")
    done
    dev=$(calc "sqrt($dev / $n)")
    echo $avg";"$dev
}


if [ "$1" = 1 ]
then
    #  produce a first output file with the execution time of all runs
    echo "Producing output file ..."
    find out/dist-compression -name *.xml | while read xml
    do
        tmp=${xml##out/dist-compression/}
        model=${tmp%%/*}
        tmp=${tmp#*/}
        n=${tmp%%/*}
        tmp=${tmp#*/}
        p=${tmp%%/*}
        tmp=${tmp#*/}
        c=${tmp%%/*}
        tmp=${tmp#*/}
        bs=${tmp%%/*}
        t=$(scripts/get-stat $xml searchTime | cut -d"," -f1)
        echo "$model;$((n * p));$n;$p;$c;$bs;$t"
    done | sort > $out


    #  compute averages and standard deviations and produce the final
    #  output file
    echo "Compute averages and standard deviations ..."
    prev=""
    vals=""
    n=0
    while read l
    do
        id=$(echo $l | cut -f1-6 -d";")
        t=$(echo $l | cut -f7 -d";")
        if [ "$prev" = "$id" ]
        then
            vals=$vals" "$t
            n=$((n + 1))
        else
            if [ "$prev" != "" ]
            then
                echo $prev";"$(printAvgAndDev $vals)
            fi
            n=1
            vals="$t"
        fi
        prev=$id
    done < $out > $out.tmp
    echo $prev";"$(printAvgAndDev $vals) >> $out.tmp
    mv $out.tmp $out
fi

models=$(cut -d';' -f1 $out | sort -u)

#  first plots : one file for each model
echo "Produce per-model plots ..."
for p in 4
do
    for bs in 16000 64000 256000 1024000
    do
        for m in $models
        do
            echo "#!/usr/bin/gnuplot" > p
            echo "set terminal pdf" >> p
            echo "set output 'dc-$p-$bs-$m.pdf'" >> p
            echo "set yrange [0:]" >> p
            echo -n "plot '-' using 1:2 with lines title \"Compression\"," >> p
            echo -n "'-' using 1:2:3 with errorbars lt 1 title \"\"," >> p
            echo -n "'-' using 1:2 with lines title \"Distributed Compression\"," >> p
            echo "'-' using 1:2:3 with errorbars lt 1 title \"\"" >> p
            for c in C DC
            do
                for i in 1 2
                do
                    awk -F';' \
                        "\$6 == $bs && \$4 == $p && \$5 == \"$c\" && \$1 == \"$m\" {print \$2\"\\t\"\$7\"\\t\"\$8}" $out | \
                        sort -n >> p
                    echo e >> p
                done
            done
            plot
        done
    done
done


#  second plots : a single plot with the comparison of both methods on
#  all models
echo "Produce summary plots ..."
for p in 4
do
    for bs in 16000 64000 256000 1024000
    do
        echo "#!/usr/bin/gnuplot" > p
        echo "set terminal pdf" >> p
        echo "set output 'dc-$p-$bs-all.pdf'" >> p
        echo "set yrange [0:2]" >> p
        echo -n "plot 1 with dots notitle" >> p
        for m in $models
        do
            echo -n ", '-' with lines title '"${m//_/\\_}"'" >> p
        done
        echo >> p
        for m in $models
        do
            awk -F';' \
                "\$6 == $bs && \$4 == $p && \$5 == \"C\" && \$1 == \"$m\" {print \$2,\$7}" $out | \
                while read procs refTime
                do
                    time=$(awk -F';' \
                               "\$6 == $bs && \$4 == $p && \$5 == \"DC\" && \$1 == \"$m\" && \$2 == $procs {print \$7}" $out)
                    echo $procs $(calc "$time / $refTime") >> p
                done
            echo e >> p
        done
        plot
    done
done


#  produce archive
echo "Produce archive ..."
tar czf dc.tgz dc-*pdf
rm dc-*pdf

exit 0
