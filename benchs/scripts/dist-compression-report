#!/bin/bash

P="4"
BS="64000"
OUT=dist-compression.out
OUTDIR=out/dist-compression
progressFiles="
$OUTDIR/lifts.9/16-32/32/4
$OUTDIR/firewire_tree.7/20-40/32/4"

plot () {
    chmod +x p
    ./p
    rm p
}

calc () {
    echo "scale = 2; $*" | bc
}

format () {
    echo "print \"{:,}\".format($1)" | python
}

getModels () {
    cut -d';' -f1-2 $OUT | sort -u
}

printAvgAndDev () {
    vals=$*
    n=$(echo $vals | wc -w)
    sum=${vals// / + }
    avg=$(calc "($sum) / $n")
    dev=0
    for val in $vals
    do
        dev=$(calc "$dev + ($val - $avg) ^ 2")
    done
    dev=$(calc "sqrt($dev / $n)")
    echo $n";"$avg";"$dev
}

setTicsAndPlot () {
    echo -n "set xtics (" >> p
    first=1
    grep -v e tp | sort -n | cut -d$'\t' -f1 | sort -un | while read tic
    do
        [ $first = 0 ] && echo -n ","
        first=0
        echo -n $tic
    done >> p
    echo ")" >> p
    cat tp >> p
    rm tp
    plot
}

mkOutputFile () {
    find $OUTDIR -name *.xml | while read xml
    do
        tmp=${xml##$OUTDIR/}
        model=${tmp%%/*}
        tmp=${tmp#*/}
        r=${tmp%%/*}
        tmp=${tmp#*/}
        n=${tmp%%/*}
        tmp=${tmp#*/}
        p=${tmp%%/*}
        tmp=${tmp#*/}
        bs=${tmp%%/*}
        tmp=${tmp#*/}
        c=${tmp%%/*}
        t=$(scripts/get-stat $xml searchTime | cut -d"," -f1)
        echo "$model;$r;$((n * p));$n;$p;$bs;$c;$t"
    done | sort > $OUT

    echo "Compute averages and standard deviations ..."
    prev=""
    vals=""
    n=0
    while read l
    do
        id=$(echo $l | cut -f1-7 -d";")
        t=$(echo $l | cut -f8 -d";")
        if [ "$prev" = "$id" ]
        then
            vals=$vals" "$t
            n=$((n + 1))
        else
            if [ "$prev" != "" ]
            then
                echo $prev";"$(printAvgAndDev $vals)
            fi
            n=1
            vals="$t"
        fi
        prev=$id
    done < $OUT > $OUT.tmp
    echo $prev";"$(printAvgAndDev $vals) >> $OUT.tmp
    mv $OUT.tmp $OUT
}

mkTimePlots () {
    for p in $P
    do
        for bs in $BS
        do
            for mr in $(getModels)
            do
                m=$(echo $mr | cut -d';' -f1)
                r=$(echo $mr | cut -d';' -f2)
                echo "#!/usr/bin/gnuplot" > p
                echo "set terminal pdf" >> p
                echo "set output 'dc-$m-$bs-time.pdf'" >> p
                echo "set yrange [0:]" >> p
                echo -n "plot '-' using 1:2 with lines title \"Compression\"," > tp
                echo -n "'-' using 1:2:3 with errorbars lt 1 title \"\"," >> tp
                echo -n "'-' using 1:2 with lines title \"Distributed Compression\"," >> tp
                echo "'-' using 1:2:3 with errorbars lt 1 title \"\"" >> tp
                for c in C DC
                do
                    awk -F';' "\$1==\"$m\" && \$2==\"$r\" && \$5==$p && \$6==$bs && \$7==\"$c\" {print \$3\"\\t\"\$9\"\\t\"\$10}" $OUT | \
                        sort -n > tp.tmp
                    for i in 1 2
                    do
                        cat tp.tmp >> tp
                        echo e >> tp
                done
                    rm tp.tmp
                done
                setTicsAndPlot
            done
        done
    done
}

mkExplorationPlots () {
    for pf in $progressFiles
    do
        tmp=${pf##$OUTDIR/}
        m=${tmp%%/*}
        tmp=${tmp#*/}
        r=${tmp%%/*}
        tmp=${tmp#*/}
        n=${tmp%%/*}
        tmp=${tmp#*/}
        p=${tmp%%/*}
        for bs in $BS
        do
            echo "#!/usr/bin/gnuplot" > p
            echo "set terminal pdf" >> p
            echo "set output 'dc-$m-$bs-expl.pdf'" >> p
            echo -n "plot '-' using 1:2 with lines title \"Compression\"," >> p
            echo "'-' using 1:2 with lines title \"Distributed Compression\"" >> p
            ok=1
            for c in C DC
            do
                [ ! -d $pf/$bs/$c ] && ok=0 && continue
                f=$(find $pf/$bs/$c -name \*.out | head -1)
                t=$(awk -F"Time: " '{print $2}' $f | cut -d"." -f1 | sort -nu | tail -1)
                for sec in $(seq 1 $t)
                do
                    grep "Time: $sec\." $f | awk -F"newly processed: " '{print $2}' | cut -d"," -f1 \
                        | awk "BEGIN {sum = 0} ; {sum += \$1} ; END {print $sec\"\\t\"sum}"
                done >> p
                echo e >> p
            done
            [ $ok = 1 ] && plot
        done
    done
}

mkSummaryPlots () {
    for p in $P
    do
        for bs in $BS
        do
            echo "#!/usr/bin/gnuplot" > p
            echo "set terminal pdf" >> p
            echo "set output 'dc-all-$bs-time.pdf'" >> p
            echo "set yrange [0:2]" >> p
            echo -n "plot 1 with dots notitle" > tp
            for mr in $(getModels)
            do
                m=$(echo $mr | cut -d';' -f1)
                r=$(echo $mr | cut -d';' -f2)
                echo -n ", '-' with lines title '"${m//_/\\_}"'" >> tp
            done
            echo >> tp
            for mr in $(getModels)
            do
                m=$(echo $mr | cut -d';' -f1)
                r=$(echo $mr | cut -d';' -f2)
                awk -F';' "\$1==\"$m\" && \$2==\"$r\" && \$5 == $p && \$6==$bs && \$7 == \"C\" {print \$3,\$9}" $OUT | \
                    while read procs refTime
                    do
                        time=$(awk -F';' "\$1==\"$m\" && \$2==\"$r\" && \$3 == $procs && \$5 == $p && \$6==$bs && \$7 == \"DC\" {print \$9}" $OUT)
                        [ -z "$time" ] && time=$refTime
                        echo -e $procs'\t'$(calc "$time / $refTime")
                    done | sort -n >> tp
                echo e >> tp
            done
            setTicsAndPlot
        done
    done
}

mkLatexTable () {
    (#echo '\documentclass{article}'
     #echo '\begin{document}'
     echo '{\setlength{\tabcolsep}{2pt}'
     echo '\begin{tabular}{|c|r|r|r|r|r|}'
     echo '\hline'
     echo '\multicolumn{1}{|c}{Model}'
     echo '&\multicolumn{1}{|c}{State vector}'
     echo '&\multicolumn{1}{|c}{Compressed}'
     echo '&\multicolumn{1}{|c}{Components}'
     echo '&\multicolumn{1}{|c|}{States}'
     echo '&\multicolumn{1}{|c|}{Transitions}\\'
     echo '&&\multicolumn{1}{c|}{state vector}&&&\\'
     echo '\hline'
     for mr in $(getModels)
     do
         m=$(echo $mr | cut -d';' -f1)
         r=$(echo $mr | cut -d';' -f2)
         xml=$(find $OUTDIR/$m/$r/*/*/*/DC -name 1.xml | head -1)
         s=$(scripts/get-stat $xml statesStored | tr ',' '+' | bc)
         t=$(scripts/get-stat $xml arcs | tr ',' '+' | bc)
         c=$(scripts/get-stat $xml compressionTemplates | tr ',' '+' | bc)
         ss=$(scripts/get-stat $xml stateSize)
         css=$(scripts/get-stat $xml compressedStateSize)
         echo -n ${m/_/\\_}
         echo -n " & $ss bytes"
         echo -n " & $css bytes"
         echo -n " & $(format $c)"
         echo -n " & $(format $s)"
         echo -n " & $(format $t)"
         echo '\\'
     done
     echo '\hline'
     echo '\end{tabular}}'
     #echo '\end{document}'
     echo) > dc-models.tex
}

mkArchive () {
    (tar czf dc.tgz dc-*pdf dc-models.tex
     rm dc-*pdf dc-models.tex) &> /dev/null
}

checkResults () {
    find $OUTDIR -name *.xml | while read xml
    do
        m=${xml#out/dist-compression/}
        m=${m%%/*}
        ref=$(grep $m stats-dve.txt | awk '{print $2,$3}')
        sref=$(echo $ref | cut -d' ' -f1)
        tref=$(echo $ref | cut -d' ' -f2)
        sres=$(scripts/get-stat $xml statesStored | tr "," "+" | bc)
        tres=$(scripts/get-stat $xml arcs | tr "," "+" | bc)
        if [ $sres != $sref -o $tres != $tref ]
        then
            echo $xml: wrong results
        fi
    done
}

[ "$1" = 1 ] && echo "Produce output file ..." && mkOutputFile
[ "$2" = 1 ] && echo "Check results ..." && checkResults
[ "$3" = 1 ] && echo "Produce execution time plots ..." && mkTimePlots
[ "$4" = 1 ] && echo "Produce state exploration plots ..." && mkExplorationPlots
[ "$5" = 1 ] && echo "Produce summary plots ..." && mkSummaryPlots
[ "$6" = 1 ] && echo "Produce latex table ..." && mkLatexTable
[ "$7" = 1 ] && echo "Produce archive ..." && mkArchive

exit 0
