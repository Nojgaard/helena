//   N=15


// tip = tree identification protocol

// topology definition





const byte connected[225] = { 0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1 ,0  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0 ,1  ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,1 ,0   }; 









// global definitions

byte toss;



byte elected = 15;
byte elected_num = 0;

// lossy channels????
channel ch_0_0_in, ch_0_0_out;



channel ch_1_0_in, ch_1_0_out;



channel ch_2_0_in, ch_2_0_out;



channel ch_3_0_in, ch_3_0_out;



channel ch_4_0_in, ch_4_0_out;



channel ch_5_0_in, ch_5_0_out;



channel ch_6_0_in, ch_6_0_out;



channel ch_7_0_in, ch_7_0_out;



channel ch_8_0_in, ch_8_0_out;



channel ch_9_0_in, ch_9_0_out;



channel ch_10_0_in, ch_10_0_out;



channel ch_11_0_in, ch_11_0_out;



channel ch_12_0_in, ch_12_0_out;



channel ch_13_0_in, ch_13_0_out;



channel ch_14_0_in, ch_14_0_out;



channel ch_0_1_in, ch_0_1_out;



channel ch_1_1_in, ch_1_1_out;



channel ch_2_1_in, ch_2_1_out;



channel ch_3_1_in, ch_3_1_out;



channel ch_4_1_in, ch_4_1_out;



channel ch_5_1_in, ch_5_1_out;



channel ch_6_1_in, ch_6_1_out;



channel ch_7_1_in, ch_7_1_out;



channel ch_8_1_in, ch_8_1_out;



channel ch_9_1_in, ch_9_1_out;



channel ch_10_1_in, ch_10_1_out;



channel ch_11_1_in, ch_11_1_out;



channel ch_12_1_in, ch_12_1_out;



channel ch_13_1_in, ch_13_1_out;



channel ch_14_1_in, ch_14_1_out;



channel ch_0_2_in, ch_0_2_out;



channel ch_1_2_in, ch_1_2_out;



channel ch_2_2_in, ch_2_2_out;



channel ch_3_2_in, ch_3_2_out;



channel ch_4_2_in, ch_4_2_out;



channel ch_5_2_in, ch_5_2_out;



channel ch_6_2_in, ch_6_2_out;



channel ch_7_2_in, ch_7_2_out;



channel ch_8_2_in, ch_8_2_out;



channel ch_9_2_in, ch_9_2_out;



channel ch_10_2_in, ch_10_2_out;



channel ch_11_2_in, ch_11_2_out;



channel ch_12_2_in, ch_12_2_out;



channel ch_13_2_in, ch_13_2_out;



channel ch_14_2_in, ch_14_2_out;



channel ch_0_3_in, ch_0_3_out;



channel ch_1_3_in, ch_1_3_out;



channel ch_2_3_in, ch_2_3_out;



channel ch_3_3_in, ch_3_3_out;



channel ch_4_3_in, ch_4_3_out;



channel ch_5_3_in, ch_5_3_out;



channel ch_6_3_in, ch_6_3_out;



channel ch_7_3_in, ch_7_3_out;



channel ch_8_3_in, ch_8_3_out;



channel ch_9_3_in, ch_9_3_out;



channel ch_10_3_in, ch_10_3_out;



channel ch_11_3_in, ch_11_3_out;



channel ch_12_3_in, ch_12_3_out;



channel ch_13_3_in, ch_13_3_out;



channel ch_14_3_in, ch_14_3_out;



channel ch_0_4_in, ch_0_4_out;



channel ch_1_4_in, ch_1_4_out;



channel ch_2_4_in, ch_2_4_out;



channel ch_3_4_in, ch_3_4_out;



channel ch_4_4_in, ch_4_4_out;



channel ch_5_4_in, ch_5_4_out;



channel ch_6_4_in, ch_6_4_out;



channel ch_7_4_in, ch_7_4_out;



channel ch_8_4_in, ch_8_4_out;



channel ch_9_4_in, ch_9_4_out;



channel ch_10_4_in, ch_10_4_out;



channel ch_11_4_in, ch_11_4_out;



channel ch_12_4_in, ch_12_4_out;



channel ch_13_4_in, ch_13_4_out;



channel ch_14_4_in, ch_14_4_out;



channel ch_0_5_in, ch_0_5_out;



channel ch_1_5_in, ch_1_5_out;



channel ch_2_5_in, ch_2_5_out;



channel ch_3_5_in, ch_3_5_out;



channel ch_4_5_in, ch_4_5_out;



channel ch_5_5_in, ch_5_5_out;



channel ch_6_5_in, ch_6_5_out;



channel ch_7_5_in, ch_7_5_out;



channel ch_8_5_in, ch_8_5_out;



channel ch_9_5_in, ch_9_5_out;



channel ch_10_5_in, ch_10_5_out;



channel ch_11_5_in, ch_11_5_out;



channel ch_12_5_in, ch_12_5_out;



channel ch_13_5_in, ch_13_5_out;



channel ch_14_5_in, ch_14_5_out;



channel ch_0_6_in, ch_0_6_out;



channel ch_1_6_in, ch_1_6_out;



channel ch_2_6_in, ch_2_6_out;



channel ch_3_6_in, ch_3_6_out;



channel ch_4_6_in, ch_4_6_out;



channel ch_5_6_in, ch_5_6_out;



channel ch_6_6_in, ch_6_6_out;



channel ch_7_6_in, ch_7_6_out;



channel ch_8_6_in, ch_8_6_out;



channel ch_9_6_in, ch_9_6_out;



channel ch_10_6_in, ch_10_6_out;



channel ch_11_6_in, ch_11_6_out;



channel ch_12_6_in, ch_12_6_out;



channel ch_13_6_in, ch_13_6_out;



channel ch_14_6_in, ch_14_6_out;



channel ch_0_7_in, ch_0_7_out;



channel ch_1_7_in, ch_1_7_out;



channel ch_2_7_in, ch_2_7_out;



channel ch_3_7_in, ch_3_7_out;



channel ch_4_7_in, ch_4_7_out;



channel ch_5_7_in, ch_5_7_out;



channel ch_6_7_in, ch_6_7_out;



channel ch_7_7_in, ch_7_7_out;



channel ch_8_7_in, ch_8_7_out;



channel ch_9_7_in, ch_9_7_out;



channel ch_10_7_in, ch_10_7_out;



channel ch_11_7_in, ch_11_7_out;



channel ch_12_7_in, ch_12_7_out;



channel ch_13_7_in, ch_13_7_out;



channel ch_14_7_in, ch_14_7_out;



channel ch_0_8_in, ch_0_8_out;



channel ch_1_8_in, ch_1_8_out;



channel ch_2_8_in, ch_2_8_out;



channel ch_3_8_in, ch_3_8_out;



channel ch_4_8_in, ch_4_8_out;



channel ch_5_8_in, ch_5_8_out;



channel ch_6_8_in, ch_6_8_out;



channel ch_7_8_in, ch_7_8_out;



channel ch_8_8_in, ch_8_8_out;



channel ch_9_8_in, ch_9_8_out;



channel ch_10_8_in, ch_10_8_out;



channel ch_11_8_in, ch_11_8_out;



channel ch_12_8_in, ch_12_8_out;



channel ch_13_8_in, ch_13_8_out;



channel ch_14_8_in, ch_14_8_out;



channel ch_0_9_in, ch_0_9_out;



channel ch_1_9_in, ch_1_9_out;



channel ch_2_9_in, ch_2_9_out;



channel ch_3_9_in, ch_3_9_out;



channel ch_4_9_in, ch_4_9_out;



channel ch_5_9_in, ch_5_9_out;



channel ch_6_9_in, ch_6_9_out;



channel ch_7_9_in, ch_7_9_out;



channel ch_8_9_in, ch_8_9_out;



channel ch_9_9_in, ch_9_9_out;



channel ch_10_9_in, ch_10_9_out;



channel ch_11_9_in, ch_11_9_out;



channel ch_12_9_in, ch_12_9_out;



channel ch_13_9_in, ch_13_9_out;



channel ch_14_9_in, ch_14_9_out;



channel ch_0_10_in, ch_0_10_out;



channel ch_1_10_in, ch_1_10_out;



channel ch_2_10_in, ch_2_10_out;



channel ch_3_10_in, ch_3_10_out;



channel ch_4_10_in, ch_4_10_out;



channel ch_5_10_in, ch_5_10_out;



channel ch_6_10_in, ch_6_10_out;



channel ch_7_10_in, ch_7_10_out;



channel ch_8_10_in, ch_8_10_out;



channel ch_9_10_in, ch_9_10_out;



channel ch_10_10_in, ch_10_10_out;



channel ch_11_10_in, ch_11_10_out;



channel ch_12_10_in, ch_12_10_out;



channel ch_13_10_in, ch_13_10_out;



channel ch_14_10_in, ch_14_10_out;



channel ch_0_11_in, ch_0_11_out;



channel ch_1_11_in, ch_1_11_out;



channel ch_2_11_in, ch_2_11_out;



channel ch_3_11_in, ch_3_11_out;



channel ch_4_11_in, ch_4_11_out;



channel ch_5_11_in, ch_5_11_out;



channel ch_6_11_in, ch_6_11_out;



channel ch_7_11_in, ch_7_11_out;



channel ch_8_11_in, ch_8_11_out;



channel ch_9_11_in, ch_9_11_out;



channel ch_10_11_in, ch_10_11_out;



channel ch_11_11_in, ch_11_11_out;



channel ch_12_11_in, ch_12_11_out;



channel ch_13_11_in, ch_13_11_out;



channel ch_14_11_in, ch_14_11_out;



channel ch_0_12_in, ch_0_12_out;



channel ch_1_12_in, ch_1_12_out;



channel ch_2_12_in, ch_2_12_out;



channel ch_3_12_in, ch_3_12_out;



channel ch_4_12_in, ch_4_12_out;



channel ch_5_12_in, ch_5_12_out;



channel ch_6_12_in, ch_6_12_out;



channel ch_7_12_in, ch_7_12_out;



channel ch_8_12_in, ch_8_12_out;



channel ch_9_12_in, ch_9_12_out;



channel ch_10_12_in, ch_10_12_out;



channel ch_11_12_in, ch_11_12_out;



channel ch_12_12_in, ch_12_12_out;



channel ch_13_12_in, ch_13_12_out;



channel ch_14_12_in, ch_14_12_out;



channel ch_0_13_in, ch_0_13_out;



channel ch_1_13_in, ch_1_13_out;



channel ch_2_13_in, ch_2_13_out;



channel ch_3_13_in, ch_3_13_out;



channel ch_4_13_in, ch_4_13_out;



channel ch_5_13_in, ch_5_13_out;



channel ch_6_13_in, ch_6_13_out;



channel ch_7_13_in, ch_7_13_out;



channel ch_8_13_in, ch_8_13_out;



channel ch_9_13_in, ch_9_13_out;



channel ch_10_13_in, ch_10_13_out;



channel ch_11_13_in, ch_11_13_out;



channel ch_12_13_in, ch_12_13_out;



channel ch_13_13_in, ch_13_13_out;



channel ch_14_13_in, ch_14_13_out;



channel ch_0_14_in, ch_0_14_out;



channel ch_1_14_in, ch_1_14_out;



channel ch_2_14_in, ch_2_14_out;



channel ch_3_14_in, ch_3_14_out;



channel ch_4_14_in, ch_4_14_out;



channel ch_5_14_in, ch_5_14_out;



channel ch_6_14_in, ch_6_14_out;



channel ch_7_14_in, ch_7_14_out;



channel ch_8_14_in, ch_8_14_out;



channel ch_9_14_in, ch_9_14_out;



channel ch_10_14_in, ch_10_14_out;



channel ch_11_14_in, ch_11_14_out;



channel ch_12_14_in, ch_12_14_out;



channel ch_13_14_in, ch_13_14_out;



channel ch_14_14_in, ch_14_14_out;




//forloop(y,0,decr(N), `buffer_channel(ch_`'y,2)')

// process definitions



process Node_0 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) == 1 && connected[(0*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] ) > 1;
	effect n = (connected[(0*15+0)] +connected[(0*15+1)] +connected[(0*15+2)] +connected[(0*15+3)] +connected[(0*15+4)] +connected[(0*15+5)] +connected[(0*15+6)] +connected[(0*15+7)] +connected[(0*15+8)] +connected[(0*15+9)] +connected[(0*15+10)] +connected[(0*15+11)] +connected[(0*15+12)] +connected[(0*15+13)] +connected[(0*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 0; sync ch_0_0_out?m; },
 wait_for_request -> wait_q { guard 1 != 0; sync ch_1_0_out?m; },
 wait_for_request -> wait_q { guard 2 != 0; sync ch_2_0_out?m; },
 wait_for_request -> wait_q { guard 3 != 0; sync ch_3_0_out?m; },
 wait_for_request -> wait_q { guard 4 != 0; sync ch_4_0_out?m; },
 wait_for_request -> wait_q { guard 5 != 0; sync ch_5_0_out?m; },
 wait_for_request -> wait_q { guard 6 != 0; sync ch_6_0_out?m; },
 wait_for_request -> wait_q { guard 7 != 0; sync ch_7_0_out?m; },
 wait_for_request -> wait_q { guard 8 != 0; sync ch_8_0_out?m; },
 wait_for_request -> wait_q { guard 9 != 0; sync ch_9_0_out?m; },
 wait_for_request -> wait_q { guard 10 != 0; sync ch_10_0_out?m; },
 wait_for_request -> wait_q { guard 11 != 0; sync ch_11_0_out?m; },
 wait_for_request -> wait_q { guard 12 != 0; sync ch_12_0_out?m; },
 wait_for_request -> wait_q { guard 13 != 0; sync ch_13_0_out?m; },
 wait_for_request -> wait_q { guard 14 != 0; sync ch_14_0_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(0*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(0*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_0_0_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_0_1_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_0_2_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_0_3_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_0_4_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_0_5_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_0_6_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_0_7_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_0_8_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_0_9_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_0_10_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_0_11_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_0_12_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_0_13_in!(2*15+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_0_14_in!(2*15+0);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+0)] && (received[0] == 0);
	sync ch_0_0_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+1)] && (received[1] == 0);
	sync ch_0_1_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+2)] && (received[2] == 0);
	sync ch_0_2_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+3)] && (received[3] == 0);
	sync ch_0_3_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+4)] && (received[4] == 0);
	sync ch_0_4_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+5)] && (received[5] == 0);
	sync ch_0_5_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+6)] && (received[6] == 0);
	sync ch_0_6_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+7)] && (received[7] == 0);
	sync ch_0_7_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+8)] && (received[8] == 0);
	sync ch_0_8_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+9)] && (received[9] == 0);
	sync ch_0_9_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+10)] && (received[10] == 0);
	sync ch_0_10_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+11)] && (received[11] == 0);
	sync ch_0_11_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+12)] && (received[12] == 0);
	sync ch_0_12_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+13)] && (received[13] == 0);
	sync ch_0_13_in!(1*15+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(0*15+14)] && (received[14] == 0);
	sync ch_0_14_in!(1*15+0);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 0 and received[0] == 1; sync ch_0_0_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 0 and received[1] == 1; sync ch_1_0_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 0 and received[2] == 1; sync ch_2_0_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 0 and received[3] == 1; sync ch_3_0_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 0 and received[4] == 1; sync ch_4_0_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 0 and received[5] == 1; sync ch_5_0_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 0 and received[6] == 1; sync ch_6_0_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 0 and received[7] == 1; sync ch_7_0_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 0 and received[8] == 1; sync ch_8_0_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 0 and received[9] == 1; sync ch_9_0_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 0 and received[10] == 1; sync ch_10_0_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 0 and received[11] == 1; sync ch_11_0_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 0 and received[12] == 1; sync ch_12_0_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 0 and received[13] == 1; sync ch_13_0_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 0 and received[14] == 1; sync ch_14_0_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 0, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_0_0_in!(1*15+0);},
found_partner -> response { guard 1 == j; sync ch_0_1_in!(1*15+0);},
found_partner -> response { guard 2 == j; sync ch_0_2_in!(1*15+0);},
found_partner -> response { guard 3 == j; sync ch_0_3_in!(1*15+0);},
found_partner -> response { guard 4 == j; sync ch_0_4_in!(1*15+0);},
found_partner -> response { guard 5 == j; sync ch_0_5_in!(1*15+0);},
found_partner -> response { guard 6 == j; sync ch_0_6_in!(1*15+0);},
found_partner -> response { guard 7 == j; sync ch_0_7_in!(1*15+0);},
found_partner -> response { guard 8 == j; sync ch_0_8_in!(1*15+0);},
found_partner -> response { guard 9 == j; sync ch_0_9_in!(1*15+0);},
found_partner -> response { guard 10 == j; sync ch_0_10_in!(1*15+0);},
found_partner -> response { guard 11 == j; sync ch_0_11_in!(1*15+0);},
found_partner -> response { guard 12 == j; sync ch_0_12_in!(1*15+0);},
found_partner -> response { guard 13 == j; sync ch_0_13_in!(1*15+0);},
found_partner -> response { guard 14 == j; sync ch_0_14_in!(1*15+0);},

 found_partner -> found_q { guard 0 != 0; sync ch_0_0_out?m; },
found_partner -> found_q { guard 1 != 0; sync ch_1_0_out?m; },
found_partner -> found_q { guard 2 != 0; sync ch_2_0_out?m; },
found_partner -> found_q { guard 3 != 0; sync ch_3_0_out?m; },
found_partner -> found_q { guard 4 != 0; sync ch_4_0_out?m; },
found_partner -> found_q { guard 5 != 0; sync ch_5_0_out?m; },
found_partner -> found_q { guard 6 != 0; sync ch_6_0_out?m; },
found_partner -> found_q { guard 7 != 0; sync ch_7_0_out?m; },
found_partner -> found_q { guard 8 != 0; sync ch_8_0_out?m; },
found_partner -> found_q { guard 9 != 0; sync ch_9_0_out?m; },
found_partner -> found_q { guard 10 != 0; sync ch_10_0_out?m; },
found_partner -> found_q { guard 11 != 0; sync ch_11_0_out?m; },
found_partner -> found_q { guard 12 != 0; sync ch_12_0_out?m; },
found_partner -> found_q { guard 13 != 0; sync ch_13_0_out?m; },
found_partner -> found_q { guard 14 != 0; sync ch_14_0_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 0; sync ch_0_0_out?m; },
 response -> response_q { guard 1 != 0; sync ch_1_0_out?m; },
 response -> response_q { guard 2 != 0; sync ch_2_0_out?m; },
 response -> response_q { guard 3 != 0; sync ch_3_0_out?m; },
 response -> response_q { guard 4 != 0; sync ch_4_0_out?m; },
 response -> response_q { guard 5 != 0; sync ch_5_0_out?m; },
 response -> response_q { guard 6 != 0; sync ch_6_0_out?m; },
 response -> response_q { guard 7 != 0; sync ch_7_0_out?m; },
 response -> response_q { guard 8 != 0; sync ch_8_0_out?m; },
 response -> response_q { guard 9 != 0; sync ch_9_0_out?m; },
 response -> response_q { guard 10 != 0; sync ch_10_0_out?m; },
 response -> response_q { guard 11 != 0; sync ch_11_0_out?m; },
 response -> response_q { guard 12 != 0; sync ch_12_0_out?m; },
 response -> response_q { guard 13 != 0; sync ch_13_0_out?m; },
 response -> response_q { guard 14 != 0; sync ch_14_0_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_0_0_in!(3*15+0); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_0_1_in!(3*15+0); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_0_2_in!(3*15+0); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_0_3_in!(3*15+0); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_0_4_in!(3*15+0); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_0_5_in!(3*15+0); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_0_6_in!(3*15+0); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_0_7_in!(3*15+0); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_0_8_in!(3*15+0); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_0_9_in!(3*15+0); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_0_10_in!(3*15+0); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_0_11_in!(3*15+0); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_0_12_in!(3*15+0); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_0_13_in!(3*15+0); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_0_14_in!(3*15+0); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_0_0_in!(1*15+0); },
 winner -> response { guard 1 == m%15; sync ch_0_1_in!(1*15+0); },
 winner -> response { guard 2 == m%15; sync ch_0_2_in!(1*15+0); },
 winner -> response { guard 3 == m%15; sync ch_0_3_in!(1*15+0); },
 winner -> response { guard 4 == m%15; sync ch_0_4_in!(1*15+0); },
 winner -> response { guard 5 == m%15; sync ch_0_5_in!(1*15+0); },
 winner -> response { guard 6 == m%15; sync ch_0_6_in!(1*15+0); },
 winner -> response { guard 7 == m%15; sync ch_0_7_in!(1*15+0); },
 winner -> response { guard 8 == m%15; sync ch_0_8_in!(1*15+0); },
 winner -> response { guard 9 == m%15; sync ch_0_9_in!(1*15+0); },
 winner -> response { guard 10 == m%15; sync ch_0_10_in!(1*15+0); },
 winner -> response { guard 11 == m%15; sync ch_0_11_in!(1*15+0); },
 winner -> response { guard 12 == m%15; sync ch_0_12_in!(1*15+0); },
 winner -> response { guard 13 == m%15; sync ch_0_13_in!(1*15+0); },
 winner -> response { guard 14 == m%15; sync ch_0_14_in!(1*15+0); },

 loser -> loser_q { guard 0 != 0; sync ch_0_0_out?m; },
loser -> loser_q { guard 1 != 0; sync ch_1_0_out?m; },
loser -> loser_q { guard 2 != 0; sync ch_2_0_out?m; },
loser -> loser_q { guard 3 != 0; sync ch_3_0_out?m; },
loser -> loser_q { guard 4 != 0; sync ch_4_0_out?m; },
loser -> loser_q { guard 5 != 0; sync ch_5_0_out?m; },
loser -> loser_q { guard 6 != 0; sync ch_6_0_out?m; },
loser -> loser_q { guard 7 != 0; sync ch_7_0_out?m; },
loser -> loser_q { guard 8 != 0; sync ch_8_0_out?m; },
loser -> loser_q { guard 9 != 0; sync ch_9_0_out?m; },
loser -> loser_q { guard 10 != 0; sync ch_10_0_out?m; },
loser -> loser_q { guard 11 != 0; sync ch_11_0_out?m; },
loser -> loser_q { guard 12 != 0; sync ch_12_0_out?m; },
loser -> loser_q { guard 13 != 0; sync ch_13_0_out?m; },
loser -> loser_q { guard 14 != 0; sync ch_14_0_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_1 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) == 1 && connected[(1*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] ) > 1;
	effect n = (connected[(1*15+0)] +connected[(1*15+1)] +connected[(1*15+2)] +connected[(1*15+3)] +connected[(1*15+4)] +connected[(1*15+5)] +connected[(1*15+6)] +connected[(1*15+7)] +connected[(1*15+8)] +connected[(1*15+9)] +connected[(1*15+10)] +connected[(1*15+11)] +connected[(1*15+12)] +connected[(1*15+13)] +connected[(1*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 1; sync ch_0_1_out?m; },
 wait_for_request -> wait_q { guard 1 != 1; sync ch_1_1_out?m; },
 wait_for_request -> wait_q { guard 2 != 1; sync ch_2_1_out?m; },
 wait_for_request -> wait_q { guard 3 != 1; sync ch_3_1_out?m; },
 wait_for_request -> wait_q { guard 4 != 1; sync ch_4_1_out?m; },
 wait_for_request -> wait_q { guard 5 != 1; sync ch_5_1_out?m; },
 wait_for_request -> wait_q { guard 6 != 1; sync ch_6_1_out?m; },
 wait_for_request -> wait_q { guard 7 != 1; sync ch_7_1_out?m; },
 wait_for_request -> wait_q { guard 8 != 1; sync ch_8_1_out?m; },
 wait_for_request -> wait_q { guard 9 != 1; sync ch_9_1_out?m; },
 wait_for_request -> wait_q { guard 10 != 1; sync ch_10_1_out?m; },
 wait_for_request -> wait_q { guard 11 != 1; sync ch_11_1_out?m; },
 wait_for_request -> wait_q { guard 12 != 1; sync ch_12_1_out?m; },
 wait_for_request -> wait_q { guard 13 != 1; sync ch_13_1_out?m; },
 wait_for_request -> wait_q { guard 14 != 1; sync ch_14_1_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(1*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(1*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_1_0_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_1_1_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_1_2_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_1_3_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_1_4_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_1_5_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_1_6_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_1_7_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_1_8_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_1_9_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_1_10_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_1_11_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_1_12_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_1_13_in!(2*15+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_1_14_in!(2*15+1);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+0)] && (received[0] == 0);
	sync ch_1_0_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+1)] && (received[1] == 0);
	sync ch_1_1_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+2)] && (received[2] == 0);
	sync ch_1_2_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+3)] && (received[3] == 0);
	sync ch_1_3_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+4)] && (received[4] == 0);
	sync ch_1_4_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+5)] && (received[5] == 0);
	sync ch_1_5_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+6)] && (received[6] == 0);
	sync ch_1_6_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+7)] && (received[7] == 0);
	sync ch_1_7_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+8)] && (received[8] == 0);
	sync ch_1_8_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+9)] && (received[9] == 0);
	sync ch_1_9_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+10)] && (received[10] == 0);
	sync ch_1_10_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+11)] && (received[11] == 0);
	sync ch_1_11_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+12)] && (received[12] == 0);
	sync ch_1_12_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+13)] && (received[13] == 0);
	sync ch_1_13_in!(1*15+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(1*15+14)] && (received[14] == 0);
	sync ch_1_14_in!(1*15+1);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 1 and received[0] == 1; sync ch_0_1_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 1 and received[1] == 1; sync ch_1_1_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 1 and received[2] == 1; sync ch_2_1_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 1 and received[3] == 1; sync ch_3_1_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 1 and received[4] == 1; sync ch_4_1_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 1 and received[5] == 1; sync ch_5_1_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 1 and received[6] == 1; sync ch_6_1_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 1 and received[7] == 1; sync ch_7_1_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 1 and received[8] == 1; sync ch_8_1_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 1 and received[9] == 1; sync ch_9_1_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 1 and received[10] == 1; sync ch_10_1_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 1 and received[11] == 1; sync ch_11_1_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 1 and received[12] == 1; sync ch_12_1_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 1 and received[13] == 1; sync ch_13_1_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 1 and received[14] == 1; sync ch_14_1_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 1, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_1_0_in!(1*15+1);},
found_partner -> response { guard 1 == j; sync ch_1_1_in!(1*15+1);},
found_partner -> response { guard 2 == j; sync ch_1_2_in!(1*15+1);},
found_partner -> response { guard 3 == j; sync ch_1_3_in!(1*15+1);},
found_partner -> response { guard 4 == j; sync ch_1_4_in!(1*15+1);},
found_partner -> response { guard 5 == j; sync ch_1_5_in!(1*15+1);},
found_partner -> response { guard 6 == j; sync ch_1_6_in!(1*15+1);},
found_partner -> response { guard 7 == j; sync ch_1_7_in!(1*15+1);},
found_partner -> response { guard 8 == j; sync ch_1_8_in!(1*15+1);},
found_partner -> response { guard 9 == j; sync ch_1_9_in!(1*15+1);},
found_partner -> response { guard 10 == j; sync ch_1_10_in!(1*15+1);},
found_partner -> response { guard 11 == j; sync ch_1_11_in!(1*15+1);},
found_partner -> response { guard 12 == j; sync ch_1_12_in!(1*15+1);},
found_partner -> response { guard 13 == j; sync ch_1_13_in!(1*15+1);},
found_partner -> response { guard 14 == j; sync ch_1_14_in!(1*15+1);},

 found_partner -> found_q { guard 0 != 1; sync ch_0_1_out?m; },
found_partner -> found_q { guard 1 != 1; sync ch_1_1_out?m; },
found_partner -> found_q { guard 2 != 1; sync ch_2_1_out?m; },
found_partner -> found_q { guard 3 != 1; sync ch_3_1_out?m; },
found_partner -> found_q { guard 4 != 1; sync ch_4_1_out?m; },
found_partner -> found_q { guard 5 != 1; sync ch_5_1_out?m; },
found_partner -> found_q { guard 6 != 1; sync ch_6_1_out?m; },
found_partner -> found_q { guard 7 != 1; sync ch_7_1_out?m; },
found_partner -> found_q { guard 8 != 1; sync ch_8_1_out?m; },
found_partner -> found_q { guard 9 != 1; sync ch_9_1_out?m; },
found_partner -> found_q { guard 10 != 1; sync ch_10_1_out?m; },
found_partner -> found_q { guard 11 != 1; sync ch_11_1_out?m; },
found_partner -> found_q { guard 12 != 1; sync ch_12_1_out?m; },
found_partner -> found_q { guard 13 != 1; sync ch_13_1_out?m; },
found_partner -> found_q { guard 14 != 1; sync ch_14_1_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 1; sync ch_0_1_out?m; },
 response -> response_q { guard 1 != 1; sync ch_1_1_out?m; },
 response -> response_q { guard 2 != 1; sync ch_2_1_out?m; },
 response -> response_q { guard 3 != 1; sync ch_3_1_out?m; },
 response -> response_q { guard 4 != 1; sync ch_4_1_out?m; },
 response -> response_q { guard 5 != 1; sync ch_5_1_out?m; },
 response -> response_q { guard 6 != 1; sync ch_6_1_out?m; },
 response -> response_q { guard 7 != 1; sync ch_7_1_out?m; },
 response -> response_q { guard 8 != 1; sync ch_8_1_out?m; },
 response -> response_q { guard 9 != 1; sync ch_9_1_out?m; },
 response -> response_q { guard 10 != 1; sync ch_10_1_out?m; },
 response -> response_q { guard 11 != 1; sync ch_11_1_out?m; },
 response -> response_q { guard 12 != 1; sync ch_12_1_out?m; },
 response -> response_q { guard 13 != 1; sync ch_13_1_out?m; },
 response -> response_q { guard 14 != 1; sync ch_14_1_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_1_0_in!(3*15+1); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_1_1_in!(3*15+1); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_1_2_in!(3*15+1); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_1_3_in!(3*15+1); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_1_4_in!(3*15+1); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_1_5_in!(3*15+1); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_1_6_in!(3*15+1); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_1_7_in!(3*15+1); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_1_8_in!(3*15+1); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_1_9_in!(3*15+1); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_1_10_in!(3*15+1); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_1_11_in!(3*15+1); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_1_12_in!(3*15+1); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_1_13_in!(3*15+1); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_1_14_in!(3*15+1); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_1_0_in!(1*15+1); },
 winner -> response { guard 1 == m%15; sync ch_1_1_in!(1*15+1); },
 winner -> response { guard 2 == m%15; sync ch_1_2_in!(1*15+1); },
 winner -> response { guard 3 == m%15; sync ch_1_3_in!(1*15+1); },
 winner -> response { guard 4 == m%15; sync ch_1_4_in!(1*15+1); },
 winner -> response { guard 5 == m%15; sync ch_1_5_in!(1*15+1); },
 winner -> response { guard 6 == m%15; sync ch_1_6_in!(1*15+1); },
 winner -> response { guard 7 == m%15; sync ch_1_7_in!(1*15+1); },
 winner -> response { guard 8 == m%15; sync ch_1_8_in!(1*15+1); },
 winner -> response { guard 9 == m%15; sync ch_1_9_in!(1*15+1); },
 winner -> response { guard 10 == m%15; sync ch_1_10_in!(1*15+1); },
 winner -> response { guard 11 == m%15; sync ch_1_11_in!(1*15+1); },
 winner -> response { guard 12 == m%15; sync ch_1_12_in!(1*15+1); },
 winner -> response { guard 13 == m%15; sync ch_1_13_in!(1*15+1); },
 winner -> response { guard 14 == m%15; sync ch_1_14_in!(1*15+1); },

 loser -> loser_q { guard 0 != 1; sync ch_0_1_out?m; },
loser -> loser_q { guard 1 != 1; sync ch_1_1_out?m; },
loser -> loser_q { guard 2 != 1; sync ch_2_1_out?m; },
loser -> loser_q { guard 3 != 1; sync ch_3_1_out?m; },
loser -> loser_q { guard 4 != 1; sync ch_4_1_out?m; },
loser -> loser_q { guard 5 != 1; sync ch_5_1_out?m; },
loser -> loser_q { guard 6 != 1; sync ch_6_1_out?m; },
loser -> loser_q { guard 7 != 1; sync ch_7_1_out?m; },
loser -> loser_q { guard 8 != 1; sync ch_8_1_out?m; },
loser -> loser_q { guard 9 != 1; sync ch_9_1_out?m; },
loser -> loser_q { guard 10 != 1; sync ch_10_1_out?m; },
loser -> loser_q { guard 11 != 1; sync ch_11_1_out?m; },
loser -> loser_q { guard 12 != 1; sync ch_12_1_out?m; },
loser -> loser_q { guard 13 != 1; sync ch_13_1_out?m; },
loser -> loser_q { guard 14 != 1; sync ch_14_1_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_2 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) == 1 && connected[(2*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] ) > 1;
	effect n = (connected[(2*15+0)] +connected[(2*15+1)] +connected[(2*15+2)] +connected[(2*15+3)] +connected[(2*15+4)] +connected[(2*15+5)] +connected[(2*15+6)] +connected[(2*15+7)] +connected[(2*15+8)] +connected[(2*15+9)] +connected[(2*15+10)] +connected[(2*15+11)] +connected[(2*15+12)] +connected[(2*15+13)] +connected[(2*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 2; sync ch_0_2_out?m; },
 wait_for_request -> wait_q { guard 1 != 2; sync ch_1_2_out?m; },
 wait_for_request -> wait_q { guard 2 != 2; sync ch_2_2_out?m; },
 wait_for_request -> wait_q { guard 3 != 2; sync ch_3_2_out?m; },
 wait_for_request -> wait_q { guard 4 != 2; sync ch_4_2_out?m; },
 wait_for_request -> wait_q { guard 5 != 2; sync ch_5_2_out?m; },
 wait_for_request -> wait_q { guard 6 != 2; sync ch_6_2_out?m; },
 wait_for_request -> wait_q { guard 7 != 2; sync ch_7_2_out?m; },
 wait_for_request -> wait_q { guard 8 != 2; sync ch_8_2_out?m; },
 wait_for_request -> wait_q { guard 9 != 2; sync ch_9_2_out?m; },
 wait_for_request -> wait_q { guard 10 != 2; sync ch_10_2_out?m; },
 wait_for_request -> wait_q { guard 11 != 2; sync ch_11_2_out?m; },
 wait_for_request -> wait_q { guard 12 != 2; sync ch_12_2_out?m; },
 wait_for_request -> wait_q { guard 13 != 2; sync ch_13_2_out?m; },
 wait_for_request -> wait_q { guard 14 != 2; sync ch_14_2_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(2*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(2*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_2_0_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_2_1_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_2_2_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_2_3_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_2_4_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_2_5_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_2_6_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_2_7_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_2_8_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_2_9_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_2_10_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_2_11_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_2_12_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_2_13_in!(2*15+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_2_14_in!(2*15+2);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+0)] && (received[0] == 0);
	sync ch_2_0_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+1)] && (received[1] == 0);
	sync ch_2_1_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+2)] && (received[2] == 0);
	sync ch_2_2_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+3)] && (received[3] == 0);
	sync ch_2_3_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+4)] && (received[4] == 0);
	sync ch_2_4_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+5)] && (received[5] == 0);
	sync ch_2_5_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+6)] && (received[6] == 0);
	sync ch_2_6_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+7)] && (received[7] == 0);
	sync ch_2_7_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+8)] && (received[8] == 0);
	sync ch_2_8_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+9)] && (received[9] == 0);
	sync ch_2_9_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+10)] && (received[10] == 0);
	sync ch_2_10_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+11)] && (received[11] == 0);
	sync ch_2_11_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+12)] && (received[12] == 0);
	sync ch_2_12_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+13)] && (received[13] == 0);
	sync ch_2_13_in!(1*15+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(2*15+14)] && (received[14] == 0);
	sync ch_2_14_in!(1*15+2);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 2 and received[0] == 1; sync ch_0_2_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 2 and received[1] == 1; sync ch_1_2_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 2 and received[2] == 1; sync ch_2_2_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 2 and received[3] == 1; sync ch_3_2_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 2 and received[4] == 1; sync ch_4_2_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 2 and received[5] == 1; sync ch_5_2_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 2 and received[6] == 1; sync ch_6_2_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 2 and received[7] == 1; sync ch_7_2_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 2 and received[8] == 1; sync ch_8_2_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 2 and received[9] == 1; sync ch_9_2_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 2 and received[10] == 1; sync ch_10_2_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 2 and received[11] == 1; sync ch_11_2_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 2 and received[12] == 1; sync ch_12_2_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 2 and received[13] == 1; sync ch_13_2_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 2 and received[14] == 1; sync ch_14_2_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 2, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_2_0_in!(1*15+2);},
found_partner -> response { guard 1 == j; sync ch_2_1_in!(1*15+2);},
found_partner -> response { guard 2 == j; sync ch_2_2_in!(1*15+2);},
found_partner -> response { guard 3 == j; sync ch_2_3_in!(1*15+2);},
found_partner -> response { guard 4 == j; sync ch_2_4_in!(1*15+2);},
found_partner -> response { guard 5 == j; sync ch_2_5_in!(1*15+2);},
found_partner -> response { guard 6 == j; sync ch_2_6_in!(1*15+2);},
found_partner -> response { guard 7 == j; sync ch_2_7_in!(1*15+2);},
found_partner -> response { guard 8 == j; sync ch_2_8_in!(1*15+2);},
found_partner -> response { guard 9 == j; sync ch_2_9_in!(1*15+2);},
found_partner -> response { guard 10 == j; sync ch_2_10_in!(1*15+2);},
found_partner -> response { guard 11 == j; sync ch_2_11_in!(1*15+2);},
found_partner -> response { guard 12 == j; sync ch_2_12_in!(1*15+2);},
found_partner -> response { guard 13 == j; sync ch_2_13_in!(1*15+2);},
found_partner -> response { guard 14 == j; sync ch_2_14_in!(1*15+2);},

 found_partner -> found_q { guard 0 != 2; sync ch_0_2_out?m; },
found_partner -> found_q { guard 1 != 2; sync ch_1_2_out?m; },
found_partner -> found_q { guard 2 != 2; sync ch_2_2_out?m; },
found_partner -> found_q { guard 3 != 2; sync ch_3_2_out?m; },
found_partner -> found_q { guard 4 != 2; sync ch_4_2_out?m; },
found_partner -> found_q { guard 5 != 2; sync ch_5_2_out?m; },
found_partner -> found_q { guard 6 != 2; sync ch_6_2_out?m; },
found_partner -> found_q { guard 7 != 2; sync ch_7_2_out?m; },
found_partner -> found_q { guard 8 != 2; sync ch_8_2_out?m; },
found_partner -> found_q { guard 9 != 2; sync ch_9_2_out?m; },
found_partner -> found_q { guard 10 != 2; sync ch_10_2_out?m; },
found_partner -> found_q { guard 11 != 2; sync ch_11_2_out?m; },
found_partner -> found_q { guard 12 != 2; sync ch_12_2_out?m; },
found_partner -> found_q { guard 13 != 2; sync ch_13_2_out?m; },
found_partner -> found_q { guard 14 != 2; sync ch_14_2_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 2; sync ch_0_2_out?m; },
 response -> response_q { guard 1 != 2; sync ch_1_2_out?m; },
 response -> response_q { guard 2 != 2; sync ch_2_2_out?m; },
 response -> response_q { guard 3 != 2; sync ch_3_2_out?m; },
 response -> response_q { guard 4 != 2; sync ch_4_2_out?m; },
 response -> response_q { guard 5 != 2; sync ch_5_2_out?m; },
 response -> response_q { guard 6 != 2; sync ch_6_2_out?m; },
 response -> response_q { guard 7 != 2; sync ch_7_2_out?m; },
 response -> response_q { guard 8 != 2; sync ch_8_2_out?m; },
 response -> response_q { guard 9 != 2; sync ch_9_2_out?m; },
 response -> response_q { guard 10 != 2; sync ch_10_2_out?m; },
 response -> response_q { guard 11 != 2; sync ch_11_2_out?m; },
 response -> response_q { guard 12 != 2; sync ch_12_2_out?m; },
 response -> response_q { guard 13 != 2; sync ch_13_2_out?m; },
 response -> response_q { guard 14 != 2; sync ch_14_2_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_2_0_in!(3*15+2); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_2_1_in!(3*15+2); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_2_2_in!(3*15+2); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_2_3_in!(3*15+2); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_2_4_in!(3*15+2); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_2_5_in!(3*15+2); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_2_6_in!(3*15+2); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_2_7_in!(3*15+2); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_2_8_in!(3*15+2); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_2_9_in!(3*15+2); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_2_10_in!(3*15+2); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_2_11_in!(3*15+2); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_2_12_in!(3*15+2); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_2_13_in!(3*15+2); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_2_14_in!(3*15+2); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_2_0_in!(1*15+2); },
 winner -> response { guard 1 == m%15; sync ch_2_1_in!(1*15+2); },
 winner -> response { guard 2 == m%15; sync ch_2_2_in!(1*15+2); },
 winner -> response { guard 3 == m%15; sync ch_2_3_in!(1*15+2); },
 winner -> response { guard 4 == m%15; sync ch_2_4_in!(1*15+2); },
 winner -> response { guard 5 == m%15; sync ch_2_5_in!(1*15+2); },
 winner -> response { guard 6 == m%15; sync ch_2_6_in!(1*15+2); },
 winner -> response { guard 7 == m%15; sync ch_2_7_in!(1*15+2); },
 winner -> response { guard 8 == m%15; sync ch_2_8_in!(1*15+2); },
 winner -> response { guard 9 == m%15; sync ch_2_9_in!(1*15+2); },
 winner -> response { guard 10 == m%15; sync ch_2_10_in!(1*15+2); },
 winner -> response { guard 11 == m%15; sync ch_2_11_in!(1*15+2); },
 winner -> response { guard 12 == m%15; sync ch_2_12_in!(1*15+2); },
 winner -> response { guard 13 == m%15; sync ch_2_13_in!(1*15+2); },
 winner -> response { guard 14 == m%15; sync ch_2_14_in!(1*15+2); },

 loser -> loser_q { guard 0 != 2; sync ch_0_2_out?m; },
loser -> loser_q { guard 1 != 2; sync ch_1_2_out?m; },
loser -> loser_q { guard 2 != 2; sync ch_2_2_out?m; },
loser -> loser_q { guard 3 != 2; sync ch_3_2_out?m; },
loser -> loser_q { guard 4 != 2; sync ch_4_2_out?m; },
loser -> loser_q { guard 5 != 2; sync ch_5_2_out?m; },
loser -> loser_q { guard 6 != 2; sync ch_6_2_out?m; },
loser -> loser_q { guard 7 != 2; sync ch_7_2_out?m; },
loser -> loser_q { guard 8 != 2; sync ch_8_2_out?m; },
loser -> loser_q { guard 9 != 2; sync ch_9_2_out?m; },
loser -> loser_q { guard 10 != 2; sync ch_10_2_out?m; },
loser -> loser_q { guard 11 != 2; sync ch_11_2_out?m; },
loser -> loser_q { guard 12 != 2; sync ch_12_2_out?m; },
loser -> loser_q { guard 13 != 2; sync ch_13_2_out?m; },
loser -> loser_q { guard 14 != 2; sync ch_14_2_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_3 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) == 1 && connected[(3*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] ) > 1;
	effect n = (connected[(3*15+0)] +connected[(3*15+1)] +connected[(3*15+2)] +connected[(3*15+3)] +connected[(3*15+4)] +connected[(3*15+5)] +connected[(3*15+6)] +connected[(3*15+7)] +connected[(3*15+8)] +connected[(3*15+9)] +connected[(3*15+10)] +connected[(3*15+11)] +connected[(3*15+12)] +connected[(3*15+13)] +connected[(3*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 3; sync ch_0_3_out?m; },
 wait_for_request -> wait_q { guard 1 != 3; sync ch_1_3_out?m; },
 wait_for_request -> wait_q { guard 2 != 3; sync ch_2_3_out?m; },
 wait_for_request -> wait_q { guard 3 != 3; sync ch_3_3_out?m; },
 wait_for_request -> wait_q { guard 4 != 3; sync ch_4_3_out?m; },
 wait_for_request -> wait_q { guard 5 != 3; sync ch_5_3_out?m; },
 wait_for_request -> wait_q { guard 6 != 3; sync ch_6_3_out?m; },
 wait_for_request -> wait_q { guard 7 != 3; sync ch_7_3_out?m; },
 wait_for_request -> wait_q { guard 8 != 3; sync ch_8_3_out?m; },
 wait_for_request -> wait_q { guard 9 != 3; sync ch_9_3_out?m; },
 wait_for_request -> wait_q { guard 10 != 3; sync ch_10_3_out?m; },
 wait_for_request -> wait_q { guard 11 != 3; sync ch_11_3_out?m; },
 wait_for_request -> wait_q { guard 12 != 3; sync ch_12_3_out?m; },
 wait_for_request -> wait_q { guard 13 != 3; sync ch_13_3_out?m; },
 wait_for_request -> wait_q { guard 14 != 3; sync ch_14_3_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(3*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(3*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_3_0_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_3_1_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_3_2_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_3_3_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_3_4_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_3_5_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_3_6_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_3_7_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_3_8_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_3_9_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_3_10_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_3_11_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_3_12_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_3_13_in!(2*15+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_3_14_in!(2*15+3);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+0)] && (received[0] == 0);
	sync ch_3_0_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+1)] && (received[1] == 0);
	sync ch_3_1_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+2)] && (received[2] == 0);
	sync ch_3_2_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+3)] && (received[3] == 0);
	sync ch_3_3_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+4)] && (received[4] == 0);
	sync ch_3_4_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+5)] && (received[5] == 0);
	sync ch_3_5_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+6)] && (received[6] == 0);
	sync ch_3_6_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+7)] && (received[7] == 0);
	sync ch_3_7_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+8)] && (received[8] == 0);
	sync ch_3_8_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+9)] && (received[9] == 0);
	sync ch_3_9_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+10)] && (received[10] == 0);
	sync ch_3_10_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+11)] && (received[11] == 0);
	sync ch_3_11_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+12)] && (received[12] == 0);
	sync ch_3_12_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+13)] && (received[13] == 0);
	sync ch_3_13_in!(1*15+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(3*15+14)] && (received[14] == 0);
	sync ch_3_14_in!(1*15+3);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 3 and received[0] == 1; sync ch_0_3_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 3 and received[1] == 1; sync ch_1_3_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 3 and received[2] == 1; sync ch_2_3_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 3 and received[3] == 1; sync ch_3_3_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 3 and received[4] == 1; sync ch_4_3_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 3 and received[5] == 1; sync ch_5_3_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 3 and received[6] == 1; sync ch_6_3_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 3 and received[7] == 1; sync ch_7_3_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 3 and received[8] == 1; sync ch_8_3_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 3 and received[9] == 1; sync ch_9_3_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 3 and received[10] == 1; sync ch_10_3_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 3 and received[11] == 1; sync ch_11_3_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 3 and received[12] == 1; sync ch_12_3_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 3 and received[13] == 1; sync ch_13_3_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 3 and received[14] == 1; sync ch_14_3_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 3, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_3_0_in!(1*15+3);},
found_partner -> response { guard 1 == j; sync ch_3_1_in!(1*15+3);},
found_partner -> response { guard 2 == j; sync ch_3_2_in!(1*15+3);},
found_partner -> response { guard 3 == j; sync ch_3_3_in!(1*15+3);},
found_partner -> response { guard 4 == j; sync ch_3_4_in!(1*15+3);},
found_partner -> response { guard 5 == j; sync ch_3_5_in!(1*15+3);},
found_partner -> response { guard 6 == j; sync ch_3_6_in!(1*15+3);},
found_partner -> response { guard 7 == j; sync ch_3_7_in!(1*15+3);},
found_partner -> response { guard 8 == j; sync ch_3_8_in!(1*15+3);},
found_partner -> response { guard 9 == j; sync ch_3_9_in!(1*15+3);},
found_partner -> response { guard 10 == j; sync ch_3_10_in!(1*15+3);},
found_partner -> response { guard 11 == j; sync ch_3_11_in!(1*15+3);},
found_partner -> response { guard 12 == j; sync ch_3_12_in!(1*15+3);},
found_partner -> response { guard 13 == j; sync ch_3_13_in!(1*15+3);},
found_partner -> response { guard 14 == j; sync ch_3_14_in!(1*15+3);},

 found_partner -> found_q { guard 0 != 3; sync ch_0_3_out?m; },
found_partner -> found_q { guard 1 != 3; sync ch_1_3_out?m; },
found_partner -> found_q { guard 2 != 3; sync ch_2_3_out?m; },
found_partner -> found_q { guard 3 != 3; sync ch_3_3_out?m; },
found_partner -> found_q { guard 4 != 3; sync ch_4_3_out?m; },
found_partner -> found_q { guard 5 != 3; sync ch_5_3_out?m; },
found_partner -> found_q { guard 6 != 3; sync ch_6_3_out?m; },
found_partner -> found_q { guard 7 != 3; sync ch_7_3_out?m; },
found_partner -> found_q { guard 8 != 3; sync ch_8_3_out?m; },
found_partner -> found_q { guard 9 != 3; sync ch_9_3_out?m; },
found_partner -> found_q { guard 10 != 3; sync ch_10_3_out?m; },
found_partner -> found_q { guard 11 != 3; sync ch_11_3_out?m; },
found_partner -> found_q { guard 12 != 3; sync ch_12_3_out?m; },
found_partner -> found_q { guard 13 != 3; sync ch_13_3_out?m; },
found_partner -> found_q { guard 14 != 3; sync ch_14_3_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 3; sync ch_0_3_out?m; },
 response -> response_q { guard 1 != 3; sync ch_1_3_out?m; },
 response -> response_q { guard 2 != 3; sync ch_2_3_out?m; },
 response -> response_q { guard 3 != 3; sync ch_3_3_out?m; },
 response -> response_q { guard 4 != 3; sync ch_4_3_out?m; },
 response -> response_q { guard 5 != 3; sync ch_5_3_out?m; },
 response -> response_q { guard 6 != 3; sync ch_6_3_out?m; },
 response -> response_q { guard 7 != 3; sync ch_7_3_out?m; },
 response -> response_q { guard 8 != 3; sync ch_8_3_out?m; },
 response -> response_q { guard 9 != 3; sync ch_9_3_out?m; },
 response -> response_q { guard 10 != 3; sync ch_10_3_out?m; },
 response -> response_q { guard 11 != 3; sync ch_11_3_out?m; },
 response -> response_q { guard 12 != 3; sync ch_12_3_out?m; },
 response -> response_q { guard 13 != 3; sync ch_13_3_out?m; },
 response -> response_q { guard 14 != 3; sync ch_14_3_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_3_0_in!(3*15+3); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_3_1_in!(3*15+3); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_3_2_in!(3*15+3); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_3_3_in!(3*15+3); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_3_4_in!(3*15+3); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_3_5_in!(3*15+3); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_3_6_in!(3*15+3); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_3_7_in!(3*15+3); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_3_8_in!(3*15+3); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_3_9_in!(3*15+3); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_3_10_in!(3*15+3); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_3_11_in!(3*15+3); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_3_12_in!(3*15+3); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_3_13_in!(3*15+3); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_3_14_in!(3*15+3); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_3_0_in!(1*15+3); },
 winner -> response { guard 1 == m%15; sync ch_3_1_in!(1*15+3); },
 winner -> response { guard 2 == m%15; sync ch_3_2_in!(1*15+3); },
 winner -> response { guard 3 == m%15; sync ch_3_3_in!(1*15+3); },
 winner -> response { guard 4 == m%15; sync ch_3_4_in!(1*15+3); },
 winner -> response { guard 5 == m%15; sync ch_3_5_in!(1*15+3); },
 winner -> response { guard 6 == m%15; sync ch_3_6_in!(1*15+3); },
 winner -> response { guard 7 == m%15; sync ch_3_7_in!(1*15+3); },
 winner -> response { guard 8 == m%15; sync ch_3_8_in!(1*15+3); },
 winner -> response { guard 9 == m%15; sync ch_3_9_in!(1*15+3); },
 winner -> response { guard 10 == m%15; sync ch_3_10_in!(1*15+3); },
 winner -> response { guard 11 == m%15; sync ch_3_11_in!(1*15+3); },
 winner -> response { guard 12 == m%15; sync ch_3_12_in!(1*15+3); },
 winner -> response { guard 13 == m%15; sync ch_3_13_in!(1*15+3); },
 winner -> response { guard 14 == m%15; sync ch_3_14_in!(1*15+3); },

 loser -> loser_q { guard 0 != 3; sync ch_0_3_out?m; },
loser -> loser_q { guard 1 != 3; sync ch_1_3_out?m; },
loser -> loser_q { guard 2 != 3; sync ch_2_3_out?m; },
loser -> loser_q { guard 3 != 3; sync ch_3_3_out?m; },
loser -> loser_q { guard 4 != 3; sync ch_4_3_out?m; },
loser -> loser_q { guard 5 != 3; sync ch_5_3_out?m; },
loser -> loser_q { guard 6 != 3; sync ch_6_3_out?m; },
loser -> loser_q { guard 7 != 3; sync ch_7_3_out?m; },
loser -> loser_q { guard 8 != 3; sync ch_8_3_out?m; },
loser -> loser_q { guard 9 != 3; sync ch_9_3_out?m; },
loser -> loser_q { guard 10 != 3; sync ch_10_3_out?m; },
loser -> loser_q { guard 11 != 3; sync ch_11_3_out?m; },
loser -> loser_q { guard 12 != 3; sync ch_12_3_out?m; },
loser -> loser_q { guard 13 != 3; sync ch_13_3_out?m; },
loser -> loser_q { guard 14 != 3; sync ch_14_3_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_4 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) == 1 && connected[(4*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] ) > 1;
	effect n = (connected[(4*15+0)] +connected[(4*15+1)] +connected[(4*15+2)] +connected[(4*15+3)] +connected[(4*15+4)] +connected[(4*15+5)] +connected[(4*15+6)] +connected[(4*15+7)] +connected[(4*15+8)] +connected[(4*15+9)] +connected[(4*15+10)] +connected[(4*15+11)] +connected[(4*15+12)] +connected[(4*15+13)] +connected[(4*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 4; sync ch_0_4_out?m; },
 wait_for_request -> wait_q { guard 1 != 4; sync ch_1_4_out?m; },
 wait_for_request -> wait_q { guard 2 != 4; sync ch_2_4_out?m; },
 wait_for_request -> wait_q { guard 3 != 4; sync ch_3_4_out?m; },
 wait_for_request -> wait_q { guard 4 != 4; sync ch_4_4_out?m; },
 wait_for_request -> wait_q { guard 5 != 4; sync ch_5_4_out?m; },
 wait_for_request -> wait_q { guard 6 != 4; sync ch_6_4_out?m; },
 wait_for_request -> wait_q { guard 7 != 4; sync ch_7_4_out?m; },
 wait_for_request -> wait_q { guard 8 != 4; sync ch_8_4_out?m; },
 wait_for_request -> wait_q { guard 9 != 4; sync ch_9_4_out?m; },
 wait_for_request -> wait_q { guard 10 != 4; sync ch_10_4_out?m; },
 wait_for_request -> wait_q { guard 11 != 4; sync ch_11_4_out?m; },
 wait_for_request -> wait_q { guard 12 != 4; sync ch_12_4_out?m; },
 wait_for_request -> wait_q { guard 13 != 4; sync ch_13_4_out?m; },
 wait_for_request -> wait_q { guard 14 != 4; sync ch_14_4_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(4*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(4*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_4_0_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_4_1_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_4_2_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_4_3_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_4_4_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_4_5_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_4_6_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_4_7_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_4_8_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_4_9_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_4_10_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_4_11_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_4_12_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_4_13_in!(2*15+4);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_4_14_in!(2*15+4);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+0)] && (received[0] == 0);
	sync ch_4_0_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+1)] && (received[1] == 0);
	sync ch_4_1_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+2)] && (received[2] == 0);
	sync ch_4_2_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+3)] && (received[3] == 0);
	sync ch_4_3_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+4)] && (received[4] == 0);
	sync ch_4_4_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+5)] && (received[5] == 0);
	sync ch_4_5_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+6)] && (received[6] == 0);
	sync ch_4_6_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+7)] && (received[7] == 0);
	sync ch_4_7_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+8)] && (received[8] == 0);
	sync ch_4_8_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+9)] && (received[9] == 0);
	sync ch_4_9_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+10)] && (received[10] == 0);
	sync ch_4_10_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+11)] && (received[11] == 0);
	sync ch_4_11_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+12)] && (received[12] == 0);
	sync ch_4_12_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+13)] && (received[13] == 0);
	sync ch_4_13_in!(1*15+4);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(4*15+14)] && (received[14] == 0);
	sync ch_4_14_in!(1*15+4);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 4 and received[0] == 1; sync ch_0_4_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 4 and received[1] == 1; sync ch_1_4_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 4 and received[2] == 1; sync ch_2_4_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 4 and received[3] == 1; sync ch_3_4_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 4 and received[4] == 1; sync ch_4_4_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 4 and received[5] == 1; sync ch_5_4_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 4 and received[6] == 1; sync ch_6_4_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 4 and received[7] == 1; sync ch_7_4_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 4 and received[8] == 1; sync ch_8_4_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 4 and received[9] == 1; sync ch_9_4_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 4 and received[10] == 1; sync ch_10_4_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 4 and received[11] == 1; sync ch_11_4_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 4 and received[12] == 1; sync ch_12_4_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 4 and received[13] == 1; sync ch_13_4_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 4 and received[14] == 1; sync ch_14_4_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 4, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_4_0_in!(1*15+4);},
found_partner -> response { guard 1 == j; sync ch_4_1_in!(1*15+4);},
found_partner -> response { guard 2 == j; sync ch_4_2_in!(1*15+4);},
found_partner -> response { guard 3 == j; sync ch_4_3_in!(1*15+4);},
found_partner -> response { guard 4 == j; sync ch_4_4_in!(1*15+4);},
found_partner -> response { guard 5 == j; sync ch_4_5_in!(1*15+4);},
found_partner -> response { guard 6 == j; sync ch_4_6_in!(1*15+4);},
found_partner -> response { guard 7 == j; sync ch_4_7_in!(1*15+4);},
found_partner -> response { guard 8 == j; sync ch_4_8_in!(1*15+4);},
found_partner -> response { guard 9 == j; sync ch_4_9_in!(1*15+4);},
found_partner -> response { guard 10 == j; sync ch_4_10_in!(1*15+4);},
found_partner -> response { guard 11 == j; sync ch_4_11_in!(1*15+4);},
found_partner -> response { guard 12 == j; sync ch_4_12_in!(1*15+4);},
found_partner -> response { guard 13 == j; sync ch_4_13_in!(1*15+4);},
found_partner -> response { guard 14 == j; sync ch_4_14_in!(1*15+4);},

 found_partner -> found_q { guard 0 != 4; sync ch_0_4_out?m; },
found_partner -> found_q { guard 1 != 4; sync ch_1_4_out?m; },
found_partner -> found_q { guard 2 != 4; sync ch_2_4_out?m; },
found_partner -> found_q { guard 3 != 4; sync ch_3_4_out?m; },
found_partner -> found_q { guard 4 != 4; sync ch_4_4_out?m; },
found_partner -> found_q { guard 5 != 4; sync ch_5_4_out?m; },
found_partner -> found_q { guard 6 != 4; sync ch_6_4_out?m; },
found_partner -> found_q { guard 7 != 4; sync ch_7_4_out?m; },
found_partner -> found_q { guard 8 != 4; sync ch_8_4_out?m; },
found_partner -> found_q { guard 9 != 4; sync ch_9_4_out?m; },
found_partner -> found_q { guard 10 != 4; sync ch_10_4_out?m; },
found_partner -> found_q { guard 11 != 4; sync ch_11_4_out?m; },
found_partner -> found_q { guard 12 != 4; sync ch_12_4_out?m; },
found_partner -> found_q { guard 13 != 4; sync ch_13_4_out?m; },
found_partner -> found_q { guard 14 != 4; sync ch_14_4_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 4; sync ch_0_4_out?m; },
 response -> response_q { guard 1 != 4; sync ch_1_4_out?m; },
 response -> response_q { guard 2 != 4; sync ch_2_4_out?m; },
 response -> response_q { guard 3 != 4; sync ch_3_4_out?m; },
 response -> response_q { guard 4 != 4; sync ch_4_4_out?m; },
 response -> response_q { guard 5 != 4; sync ch_5_4_out?m; },
 response -> response_q { guard 6 != 4; sync ch_6_4_out?m; },
 response -> response_q { guard 7 != 4; sync ch_7_4_out?m; },
 response -> response_q { guard 8 != 4; sync ch_8_4_out?m; },
 response -> response_q { guard 9 != 4; sync ch_9_4_out?m; },
 response -> response_q { guard 10 != 4; sync ch_10_4_out?m; },
 response -> response_q { guard 11 != 4; sync ch_11_4_out?m; },
 response -> response_q { guard 12 != 4; sync ch_12_4_out?m; },
 response -> response_q { guard 13 != 4; sync ch_13_4_out?m; },
 response -> response_q { guard 14 != 4; sync ch_14_4_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_4_0_in!(3*15+4); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_4_1_in!(3*15+4); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_4_2_in!(3*15+4); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_4_3_in!(3*15+4); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_4_4_in!(3*15+4); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_4_5_in!(3*15+4); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_4_6_in!(3*15+4); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_4_7_in!(3*15+4); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_4_8_in!(3*15+4); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_4_9_in!(3*15+4); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_4_10_in!(3*15+4); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_4_11_in!(3*15+4); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_4_12_in!(3*15+4); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_4_13_in!(3*15+4); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_4_14_in!(3*15+4); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_4_0_in!(1*15+4); },
 winner -> response { guard 1 == m%15; sync ch_4_1_in!(1*15+4); },
 winner -> response { guard 2 == m%15; sync ch_4_2_in!(1*15+4); },
 winner -> response { guard 3 == m%15; sync ch_4_3_in!(1*15+4); },
 winner -> response { guard 4 == m%15; sync ch_4_4_in!(1*15+4); },
 winner -> response { guard 5 == m%15; sync ch_4_5_in!(1*15+4); },
 winner -> response { guard 6 == m%15; sync ch_4_6_in!(1*15+4); },
 winner -> response { guard 7 == m%15; sync ch_4_7_in!(1*15+4); },
 winner -> response { guard 8 == m%15; sync ch_4_8_in!(1*15+4); },
 winner -> response { guard 9 == m%15; sync ch_4_9_in!(1*15+4); },
 winner -> response { guard 10 == m%15; sync ch_4_10_in!(1*15+4); },
 winner -> response { guard 11 == m%15; sync ch_4_11_in!(1*15+4); },
 winner -> response { guard 12 == m%15; sync ch_4_12_in!(1*15+4); },
 winner -> response { guard 13 == m%15; sync ch_4_13_in!(1*15+4); },
 winner -> response { guard 14 == m%15; sync ch_4_14_in!(1*15+4); },

 loser -> loser_q { guard 0 != 4; sync ch_0_4_out?m; },
loser -> loser_q { guard 1 != 4; sync ch_1_4_out?m; },
loser -> loser_q { guard 2 != 4; sync ch_2_4_out?m; },
loser -> loser_q { guard 3 != 4; sync ch_3_4_out?m; },
loser -> loser_q { guard 4 != 4; sync ch_4_4_out?m; },
loser -> loser_q { guard 5 != 4; sync ch_5_4_out?m; },
loser -> loser_q { guard 6 != 4; sync ch_6_4_out?m; },
loser -> loser_q { guard 7 != 4; sync ch_7_4_out?m; },
loser -> loser_q { guard 8 != 4; sync ch_8_4_out?m; },
loser -> loser_q { guard 9 != 4; sync ch_9_4_out?m; },
loser -> loser_q { guard 10 != 4; sync ch_10_4_out?m; },
loser -> loser_q { guard 11 != 4; sync ch_11_4_out?m; },
loser -> loser_q { guard 12 != 4; sync ch_12_4_out?m; },
loser -> loser_q { guard 13 != 4; sync ch_13_4_out?m; },
loser -> loser_q { guard 14 != 4; sync ch_14_4_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_5 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) == 1 && connected[(5*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] ) > 1;
	effect n = (connected[(5*15+0)] +connected[(5*15+1)] +connected[(5*15+2)] +connected[(5*15+3)] +connected[(5*15+4)] +connected[(5*15+5)] +connected[(5*15+6)] +connected[(5*15+7)] +connected[(5*15+8)] +connected[(5*15+9)] +connected[(5*15+10)] +connected[(5*15+11)] +connected[(5*15+12)] +connected[(5*15+13)] +connected[(5*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 5; sync ch_0_5_out?m; },
 wait_for_request -> wait_q { guard 1 != 5; sync ch_1_5_out?m; },
 wait_for_request -> wait_q { guard 2 != 5; sync ch_2_5_out?m; },
 wait_for_request -> wait_q { guard 3 != 5; sync ch_3_5_out?m; },
 wait_for_request -> wait_q { guard 4 != 5; sync ch_4_5_out?m; },
 wait_for_request -> wait_q { guard 5 != 5; sync ch_5_5_out?m; },
 wait_for_request -> wait_q { guard 6 != 5; sync ch_6_5_out?m; },
 wait_for_request -> wait_q { guard 7 != 5; sync ch_7_5_out?m; },
 wait_for_request -> wait_q { guard 8 != 5; sync ch_8_5_out?m; },
 wait_for_request -> wait_q { guard 9 != 5; sync ch_9_5_out?m; },
 wait_for_request -> wait_q { guard 10 != 5; sync ch_10_5_out?m; },
 wait_for_request -> wait_q { guard 11 != 5; sync ch_11_5_out?m; },
 wait_for_request -> wait_q { guard 12 != 5; sync ch_12_5_out?m; },
 wait_for_request -> wait_q { guard 13 != 5; sync ch_13_5_out?m; },
 wait_for_request -> wait_q { guard 14 != 5; sync ch_14_5_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(5*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(5*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_5_0_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_5_1_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_5_2_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_5_3_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_5_4_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_5_5_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_5_6_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_5_7_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_5_8_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_5_9_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_5_10_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_5_11_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_5_12_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_5_13_in!(2*15+5);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_5_14_in!(2*15+5);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+0)] && (received[0] == 0);
	sync ch_5_0_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+1)] && (received[1] == 0);
	sync ch_5_1_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+2)] && (received[2] == 0);
	sync ch_5_2_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+3)] && (received[3] == 0);
	sync ch_5_3_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+4)] && (received[4] == 0);
	sync ch_5_4_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+5)] && (received[5] == 0);
	sync ch_5_5_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+6)] && (received[6] == 0);
	sync ch_5_6_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+7)] && (received[7] == 0);
	sync ch_5_7_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+8)] && (received[8] == 0);
	sync ch_5_8_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+9)] && (received[9] == 0);
	sync ch_5_9_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+10)] && (received[10] == 0);
	sync ch_5_10_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+11)] && (received[11] == 0);
	sync ch_5_11_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+12)] && (received[12] == 0);
	sync ch_5_12_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+13)] && (received[13] == 0);
	sync ch_5_13_in!(1*15+5);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(5*15+14)] && (received[14] == 0);
	sync ch_5_14_in!(1*15+5);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 5 and received[0] == 1; sync ch_0_5_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 5 and received[1] == 1; sync ch_1_5_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 5 and received[2] == 1; sync ch_2_5_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 5 and received[3] == 1; sync ch_3_5_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 5 and received[4] == 1; sync ch_4_5_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 5 and received[5] == 1; sync ch_5_5_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 5 and received[6] == 1; sync ch_6_5_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 5 and received[7] == 1; sync ch_7_5_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 5 and received[8] == 1; sync ch_8_5_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 5 and received[9] == 1; sync ch_9_5_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 5 and received[10] == 1; sync ch_10_5_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 5 and received[11] == 1; sync ch_11_5_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 5 and received[12] == 1; sync ch_12_5_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 5 and received[13] == 1; sync ch_13_5_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 5 and received[14] == 1; sync ch_14_5_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 5, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_5_0_in!(1*15+5);},
found_partner -> response { guard 1 == j; sync ch_5_1_in!(1*15+5);},
found_partner -> response { guard 2 == j; sync ch_5_2_in!(1*15+5);},
found_partner -> response { guard 3 == j; sync ch_5_3_in!(1*15+5);},
found_partner -> response { guard 4 == j; sync ch_5_4_in!(1*15+5);},
found_partner -> response { guard 5 == j; sync ch_5_5_in!(1*15+5);},
found_partner -> response { guard 6 == j; sync ch_5_6_in!(1*15+5);},
found_partner -> response { guard 7 == j; sync ch_5_7_in!(1*15+5);},
found_partner -> response { guard 8 == j; sync ch_5_8_in!(1*15+5);},
found_partner -> response { guard 9 == j; sync ch_5_9_in!(1*15+5);},
found_partner -> response { guard 10 == j; sync ch_5_10_in!(1*15+5);},
found_partner -> response { guard 11 == j; sync ch_5_11_in!(1*15+5);},
found_partner -> response { guard 12 == j; sync ch_5_12_in!(1*15+5);},
found_partner -> response { guard 13 == j; sync ch_5_13_in!(1*15+5);},
found_partner -> response { guard 14 == j; sync ch_5_14_in!(1*15+5);},

 found_partner -> found_q { guard 0 != 5; sync ch_0_5_out?m; },
found_partner -> found_q { guard 1 != 5; sync ch_1_5_out?m; },
found_partner -> found_q { guard 2 != 5; sync ch_2_5_out?m; },
found_partner -> found_q { guard 3 != 5; sync ch_3_5_out?m; },
found_partner -> found_q { guard 4 != 5; sync ch_4_5_out?m; },
found_partner -> found_q { guard 5 != 5; sync ch_5_5_out?m; },
found_partner -> found_q { guard 6 != 5; sync ch_6_5_out?m; },
found_partner -> found_q { guard 7 != 5; sync ch_7_5_out?m; },
found_partner -> found_q { guard 8 != 5; sync ch_8_5_out?m; },
found_partner -> found_q { guard 9 != 5; sync ch_9_5_out?m; },
found_partner -> found_q { guard 10 != 5; sync ch_10_5_out?m; },
found_partner -> found_q { guard 11 != 5; sync ch_11_5_out?m; },
found_partner -> found_q { guard 12 != 5; sync ch_12_5_out?m; },
found_partner -> found_q { guard 13 != 5; sync ch_13_5_out?m; },
found_partner -> found_q { guard 14 != 5; sync ch_14_5_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 5; sync ch_0_5_out?m; },
 response -> response_q { guard 1 != 5; sync ch_1_5_out?m; },
 response -> response_q { guard 2 != 5; sync ch_2_5_out?m; },
 response -> response_q { guard 3 != 5; sync ch_3_5_out?m; },
 response -> response_q { guard 4 != 5; sync ch_4_5_out?m; },
 response -> response_q { guard 5 != 5; sync ch_5_5_out?m; },
 response -> response_q { guard 6 != 5; sync ch_6_5_out?m; },
 response -> response_q { guard 7 != 5; sync ch_7_5_out?m; },
 response -> response_q { guard 8 != 5; sync ch_8_5_out?m; },
 response -> response_q { guard 9 != 5; sync ch_9_5_out?m; },
 response -> response_q { guard 10 != 5; sync ch_10_5_out?m; },
 response -> response_q { guard 11 != 5; sync ch_11_5_out?m; },
 response -> response_q { guard 12 != 5; sync ch_12_5_out?m; },
 response -> response_q { guard 13 != 5; sync ch_13_5_out?m; },
 response -> response_q { guard 14 != 5; sync ch_14_5_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_5_0_in!(3*15+5); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_5_1_in!(3*15+5); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_5_2_in!(3*15+5); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_5_3_in!(3*15+5); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_5_4_in!(3*15+5); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_5_5_in!(3*15+5); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_5_6_in!(3*15+5); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_5_7_in!(3*15+5); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_5_8_in!(3*15+5); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_5_9_in!(3*15+5); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_5_10_in!(3*15+5); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_5_11_in!(3*15+5); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_5_12_in!(3*15+5); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_5_13_in!(3*15+5); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_5_14_in!(3*15+5); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_5_0_in!(1*15+5); },
 winner -> response { guard 1 == m%15; sync ch_5_1_in!(1*15+5); },
 winner -> response { guard 2 == m%15; sync ch_5_2_in!(1*15+5); },
 winner -> response { guard 3 == m%15; sync ch_5_3_in!(1*15+5); },
 winner -> response { guard 4 == m%15; sync ch_5_4_in!(1*15+5); },
 winner -> response { guard 5 == m%15; sync ch_5_5_in!(1*15+5); },
 winner -> response { guard 6 == m%15; sync ch_5_6_in!(1*15+5); },
 winner -> response { guard 7 == m%15; sync ch_5_7_in!(1*15+5); },
 winner -> response { guard 8 == m%15; sync ch_5_8_in!(1*15+5); },
 winner -> response { guard 9 == m%15; sync ch_5_9_in!(1*15+5); },
 winner -> response { guard 10 == m%15; sync ch_5_10_in!(1*15+5); },
 winner -> response { guard 11 == m%15; sync ch_5_11_in!(1*15+5); },
 winner -> response { guard 12 == m%15; sync ch_5_12_in!(1*15+5); },
 winner -> response { guard 13 == m%15; sync ch_5_13_in!(1*15+5); },
 winner -> response { guard 14 == m%15; sync ch_5_14_in!(1*15+5); },

 loser -> loser_q { guard 0 != 5; sync ch_0_5_out?m; },
loser -> loser_q { guard 1 != 5; sync ch_1_5_out?m; },
loser -> loser_q { guard 2 != 5; sync ch_2_5_out?m; },
loser -> loser_q { guard 3 != 5; sync ch_3_5_out?m; },
loser -> loser_q { guard 4 != 5; sync ch_4_5_out?m; },
loser -> loser_q { guard 5 != 5; sync ch_5_5_out?m; },
loser -> loser_q { guard 6 != 5; sync ch_6_5_out?m; },
loser -> loser_q { guard 7 != 5; sync ch_7_5_out?m; },
loser -> loser_q { guard 8 != 5; sync ch_8_5_out?m; },
loser -> loser_q { guard 9 != 5; sync ch_9_5_out?m; },
loser -> loser_q { guard 10 != 5; sync ch_10_5_out?m; },
loser -> loser_q { guard 11 != 5; sync ch_11_5_out?m; },
loser -> loser_q { guard 12 != 5; sync ch_12_5_out?m; },
loser -> loser_q { guard 13 != 5; sync ch_13_5_out?m; },
loser -> loser_q { guard 14 != 5; sync ch_14_5_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_6 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) == 1 && connected[(6*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] ) > 1;
	effect n = (connected[(6*15+0)] +connected[(6*15+1)] +connected[(6*15+2)] +connected[(6*15+3)] +connected[(6*15+4)] +connected[(6*15+5)] +connected[(6*15+6)] +connected[(6*15+7)] +connected[(6*15+8)] +connected[(6*15+9)] +connected[(6*15+10)] +connected[(6*15+11)] +connected[(6*15+12)] +connected[(6*15+13)] +connected[(6*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 6; sync ch_0_6_out?m; },
 wait_for_request -> wait_q { guard 1 != 6; sync ch_1_6_out?m; },
 wait_for_request -> wait_q { guard 2 != 6; sync ch_2_6_out?m; },
 wait_for_request -> wait_q { guard 3 != 6; sync ch_3_6_out?m; },
 wait_for_request -> wait_q { guard 4 != 6; sync ch_4_6_out?m; },
 wait_for_request -> wait_q { guard 5 != 6; sync ch_5_6_out?m; },
 wait_for_request -> wait_q { guard 6 != 6; sync ch_6_6_out?m; },
 wait_for_request -> wait_q { guard 7 != 6; sync ch_7_6_out?m; },
 wait_for_request -> wait_q { guard 8 != 6; sync ch_8_6_out?m; },
 wait_for_request -> wait_q { guard 9 != 6; sync ch_9_6_out?m; },
 wait_for_request -> wait_q { guard 10 != 6; sync ch_10_6_out?m; },
 wait_for_request -> wait_q { guard 11 != 6; sync ch_11_6_out?m; },
 wait_for_request -> wait_q { guard 12 != 6; sync ch_12_6_out?m; },
 wait_for_request -> wait_q { guard 13 != 6; sync ch_13_6_out?m; },
 wait_for_request -> wait_q { guard 14 != 6; sync ch_14_6_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(6*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(6*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_6_0_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_6_1_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_6_2_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_6_3_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_6_4_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_6_5_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_6_6_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_6_7_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_6_8_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_6_9_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_6_10_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_6_11_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_6_12_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_6_13_in!(2*15+6);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_6_14_in!(2*15+6);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+0)] && (received[0] == 0);
	sync ch_6_0_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+1)] && (received[1] == 0);
	sync ch_6_1_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+2)] && (received[2] == 0);
	sync ch_6_2_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+3)] && (received[3] == 0);
	sync ch_6_3_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+4)] && (received[4] == 0);
	sync ch_6_4_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+5)] && (received[5] == 0);
	sync ch_6_5_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+6)] && (received[6] == 0);
	sync ch_6_6_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+7)] && (received[7] == 0);
	sync ch_6_7_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+8)] && (received[8] == 0);
	sync ch_6_8_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+9)] && (received[9] == 0);
	sync ch_6_9_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+10)] && (received[10] == 0);
	sync ch_6_10_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+11)] && (received[11] == 0);
	sync ch_6_11_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+12)] && (received[12] == 0);
	sync ch_6_12_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+13)] && (received[13] == 0);
	sync ch_6_13_in!(1*15+6);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(6*15+14)] && (received[14] == 0);
	sync ch_6_14_in!(1*15+6);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 6 and received[0] == 1; sync ch_0_6_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 6 and received[1] == 1; sync ch_1_6_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 6 and received[2] == 1; sync ch_2_6_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 6 and received[3] == 1; sync ch_3_6_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 6 and received[4] == 1; sync ch_4_6_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 6 and received[5] == 1; sync ch_5_6_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 6 and received[6] == 1; sync ch_6_6_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 6 and received[7] == 1; sync ch_7_6_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 6 and received[8] == 1; sync ch_8_6_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 6 and received[9] == 1; sync ch_9_6_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 6 and received[10] == 1; sync ch_10_6_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 6 and received[11] == 1; sync ch_11_6_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 6 and received[12] == 1; sync ch_12_6_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 6 and received[13] == 1; sync ch_13_6_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 6 and received[14] == 1; sync ch_14_6_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 6, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_6_0_in!(1*15+6);},
found_partner -> response { guard 1 == j; sync ch_6_1_in!(1*15+6);},
found_partner -> response { guard 2 == j; sync ch_6_2_in!(1*15+6);},
found_partner -> response { guard 3 == j; sync ch_6_3_in!(1*15+6);},
found_partner -> response { guard 4 == j; sync ch_6_4_in!(1*15+6);},
found_partner -> response { guard 5 == j; sync ch_6_5_in!(1*15+6);},
found_partner -> response { guard 6 == j; sync ch_6_6_in!(1*15+6);},
found_partner -> response { guard 7 == j; sync ch_6_7_in!(1*15+6);},
found_partner -> response { guard 8 == j; sync ch_6_8_in!(1*15+6);},
found_partner -> response { guard 9 == j; sync ch_6_9_in!(1*15+6);},
found_partner -> response { guard 10 == j; sync ch_6_10_in!(1*15+6);},
found_partner -> response { guard 11 == j; sync ch_6_11_in!(1*15+6);},
found_partner -> response { guard 12 == j; sync ch_6_12_in!(1*15+6);},
found_partner -> response { guard 13 == j; sync ch_6_13_in!(1*15+6);},
found_partner -> response { guard 14 == j; sync ch_6_14_in!(1*15+6);},

 found_partner -> found_q { guard 0 != 6; sync ch_0_6_out?m; },
found_partner -> found_q { guard 1 != 6; sync ch_1_6_out?m; },
found_partner -> found_q { guard 2 != 6; sync ch_2_6_out?m; },
found_partner -> found_q { guard 3 != 6; sync ch_3_6_out?m; },
found_partner -> found_q { guard 4 != 6; sync ch_4_6_out?m; },
found_partner -> found_q { guard 5 != 6; sync ch_5_6_out?m; },
found_partner -> found_q { guard 6 != 6; sync ch_6_6_out?m; },
found_partner -> found_q { guard 7 != 6; sync ch_7_6_out?m; },
found_partner -> found_q { guard 8 != 6; sync ch_8_6_out?m; },
found_partner -> found_q { guard 9 != 6; sync ch_9_6_out?m; },
found_partner -> found_q { guard 10 != 6; sync ch_10_6_out?m; },
found_partner -> found_q { guard 11 != 6; sync ch_11_6_out?m; },
found_partner -> found_q { guard 12 != 6; sync ch_12_6_out?m; },
found_partner -> found_q { guard 13 != 6; sync ch_13_6_out?m; },
found_partner -> found_q { guard 14 != 6; sync ch_14_6_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 6; sync ch_0_6_out?m; },
 response -> response_q { guard 1 != 6; sync ch_1_6_out?m; },
 response -> response_q { guard 2 != 6; sync ch_2_6_out?m; },
 response -> response_q { guard 3 != 6; sync ch_3_6_out?m; },
 response -> response_q { guard 4 != 6; sync ch_4_6_out?m; },
 response -> response_q { guard 5 != 6; sync ch_5_6_out?m; },
 response -> response_q { guard 6 != 6; sync ch_6_6_out?m; },
 response -> response_q { guard 7 != 6; sync ch_7_6_out?m; },
 response -> response_q { guard 8 != 6; sync ch_8_6_out?m; },
 response -> response_q { guard 9 != 6; sync ch_9_6_out?m; },
 response -> response_q { guard 10 != 6; sync ch_10_6_out?m; },
 response -> response_q { guard 11 != 6; sync ch_11_6_out?m; },
 response -> response_q { guard 12 != 6; sync ch_12_6_out?m; },
 response -> response_q { guard 13 != 6; sync ch_13_6_out?m; },
 response -> response_q { guard 14 != 6; sync ch_14_6_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_6_0_in!(3*15+6); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_6_1_in!(3*15+6); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_6_2_in!(3*15+6); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_6_3_in!(3*15+6); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_6_4_in!(3*15+6); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_6_5_in!(3*15+6); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_6_6_in!(3*15+6); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_6_7_in!(3*15+6); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_6_8_in!(3*15+6); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_6_9_in!(3*15+6); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_6_10_in!(3*15+6); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_6_11_in!(3*15+6); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_6_12_in!(3*15+6); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_6_13_in!(3*15+6); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_6_14_in!(3*15+6); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_6_0_in!(1*15+6); },
 winner -> response { guard 1 == m%15; sync ch_6_1_in!(1*15+6); },
 winner -> response { guard 2 == m%15; sync ch_6_2_in!(1*15+6); },
 winner -> response { guard 3 == m%15; sync ch_6_3_in!(1*15+6); },
 winner -> response { guard 4 == m%15; sync ch_6_4_in!(1*15+6); },
 winner -> response { guard 5 == m%15; sync ch_6_5_in!(1*15+6); },
 winner -> response { guard 6 == m%15; sync ch_6_6_in!(1*15+6); },
 winner -> response { guard 7 == m%15; sync ch_6_7_in!(1*15+6); },
 winner -> response { guard 8 == m%15; sync ch_6_8_in!(1*15+6); },
 winner -> response { guard 9 == m%15; sync ch_6_9_in!(1*15+6); },
 winner -> response { guard 10 == m%15; sync ch_6_10_in!(1*15+6); },
 winner -> response { guard 11 == m%15; sync ch_6_11_in!(1*15+6); },
 winner -> response { guard 12 == m%15; sync ch_6_12_in!(1*15+6); },
 winner -> response { guard 13 == m%15; sync ch_6_13_in!(1*15+6); },
 winner -> response { guard 14 == m%15; sync ch_6_14_in!(1*15+6); },

 loser -> loser_q { guard 0 != 6; sync ch_0_6_out?m; },
loser -> loser_q { guard 1 != 6; sync ch_1_6_out?m; },
loser -> loser_q { guard 2 != 6; sync ch_2_6_out?m; },
loser -> loser_q { guard 3 != 6; sync ch_3_6_out?m; },
loser -> loser_q { guard 4 != 6; sync ch_4_6_out?m; },
loser -> loser_q { guard 5 != 6; sync ch_5_6_out?m; },
loser -> loser_q { guard 6 != 6; sync ch_6_6_out?m; },
loser -> loser_q { guard 7 != 6; sync ch_7_6_out?m; },
loser -> loser_q { guard 8 != 6; sync ch_8_6_out?m; },
loser -> loser_q { guard 9 != 6; sync ch_9_6_out?m; },
loser -> loser_q { guard 10 != 6; sync ch_10_6_out?m; },
loser -> loser_q { guard 11 != 6; sync ch_11_6_out?m; },
loser -> loser_q { guard 12 != 6; sync ch_12_6_out?m; },
loser -> loser_q { guard 13 != 6; sync ch_13_6_out?m; },
loser -> loser_q { guard 14 != 6; sync ch_14_6_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_7 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) == 1 && connected[(7*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] ) > 1;
	effect n = (connected[(7*15+0)] +connected[(7*15+1)] +connected[(7*15+2)] +connected[(7*15+3)] +connected[(7*15+4)] +connected[(7*15+5)] +connected[(7*15+6)] +connected[(7*15+7)] +connected[(7*15+8)] +connected[(7*15+9)] +connected[(7*15+10)] +connected[(7*15+11)] +connected[(7*15+12)] +connected[(7*15+13)] +connected[(7*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 7; sync ch_0_7_out?m; },
 wait_for_request -> wait_q { guard 1 != 7; sync ch_1_7_out?m; },
 wait_for_request -> wait_q { guard 2 != 7; sync ch_2_7_out?m; },
 wait_for_request -> wait_q { guard 3 != 7; sync ch_3_7_out?m; },
 wait_for_request -> wait_q { guard 4 != 7; sync ch_4_7_out?m; },
 wait_for_request -> wait_q { guard 5 != 7; sync ch_5_7_out?m; },
 wait_for_request -> wait_q { guard 6 != 7; sync ch_6_7_out?m; },
 wait_for_request -> wait_q { guard 7 != 7; sync ch_7_7_out?m; },
 wait_for_request -> wait_q { guard 8 != 7; sync ch_8_7_out?m; },
 wait_for_request -> wait_q { guard 9 != 7; sync ch_9_7_out?m; },
 wait_for_request -> wait_q { guard 10 != 7; sync ch_10_7_out?m; },
 wait_for_request -> wait_q { guard 11 != 7; sync ch_11_7_out?m; },
 wait_for_request -> wait_q { guard 12 != 7; sync ch_12_7_out?m; },
 wait_for_request -> wait_q { guard 13 != 7; sync ch_13_7_out?m; },
 wait_for_request -> wait_q { guard 14 != 7; sync ch_14_7_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(7*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(7*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_7_0_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_7_1_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_7_2_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_7_3_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_7_4_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_7_5_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_7_6_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_7_7_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_7_8_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_7_9_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_7_10_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_7_11_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_7_12_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_7_13_in!(2*15+7);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_7_14_in!(2*15+7);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+0)] && (received[0] == 0);
	sync ch_7_0_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+1)] && (received[1] == 0);
	sync ch_7_1_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+2)] && (received[2] == 0);
	sync ch_7_2_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+3)] && (received[3] == 0);
	sync ch_7_3_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+4)] && (received[4] == 0);
	sync ch_7_4_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+5)] && (received[5] == 0);
	sync ch_7_5_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+6)] && (received[6] == 0);
	sync ch_7_6_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+7)] && (received[7] == 0);
	sync ch_7_7_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+8)] && (received[8] == 0);
	sync ch_7_8_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+9)] && (received[9] == 0);
	sync ch_7_9_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+10)] && (received[10] == 0);
	sync ch_7_10_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+11)] && (received[11] == 0);
	sync ch_7_11_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+12)] && (received[12] == 0);
	sync ch_7_12_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+13)] && (received[13] == 0);
	sync ch_7_13_in!(1*15+7);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(7*15+14)] && (received[14] == 0);
	sync ch_7_14_in!(1*15+7);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 7 and received[0] == 1; sync ch_0_7_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 7 and received[1] == 1; sync ch_1_7_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 7 and received[2] == 1; sync ch_2_7_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 7 and received[3] == 1; sync ch_3_7_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 7 and received[4] == 1; sync ch_4_7_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 7 and received[5] == 1; sync ch_5_7_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 7 and received[6] == 1; sync ch_6_7_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 7 and received[7] == 1; sync ch_7_7_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 7 and received[8] == 1; sync ch_8_7_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 7 and received[9] == 1; sync ch_9_7_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 7 and received[10] == 1; sync ch_10_7_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 7 and received[11] == 1; sync ch_11_7_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 7 and received[12] == 1; sync ch_12_7_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 7 and received[13] == 1; sync ch_13_7_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 7 and received[14] == 1; sync ch_14_7_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 7, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_7_0_in!(1*15+7);},
found_partner -> response { guard 1 == j; sync ch_7_1_in!(1*15+7);},
found_partner -> response { guard 2 == j; sync ch_7_2_in!(1*15+7);},
found_partner -> response { guard 3 == j; sync ch_7_3_in!(1*15+7);},
found_partner -> response { guard 4 == j; sync ch_7_4_in!(1*15+7);},
found_partner -> response { guard 5 == j; sync ch_7_5_in!(1*15+7);},
found_partner -> response { guard 6 == j; sync ch_7_6_in!(1*15+7);},
found_partner -> response { guard 7 == j; sync ch_7_7_in!(1*15+7);},
found_partner -> response { guard 8 == j; sync ch_7_8_in!(1*15+7);},
found_partner -> response { guard 9 == j; sync ch_7_9_in!(1*15+7);},
found_partner -> response { guard 10 == j; sync ch_7_10_in!(1*15+7);},
found_partner -> response { guard 11 == j; sync ch_7_11_in!(1*15+7);},
found_partner -> response { guard 12 == j; sync ch_7_12_in!(1*15+7);},
found_partner -> response { guard 13 == j; sync ch_7_13_in!(1*15+7);},
found_partner -> response { guard 14 == j; sync ch_7_14_in!(1*15+7);},

 found_partner -> found_q { guard 0 != 7; sync ch_0_7_out?m; },
found_partner -> found_q { guard 1 != 7; sync ch_1_7_out?m; },
found_partner -> found_q { guard 2 != 7; sync ch_2_7_out?m; },
found_partner -> found_q { guard 3 != 7; sync ch_3_7_out?m; },
found_partner -> found_q { guard 4 != 7; sync ch_4_7_out?m; },
found_partner -> found_q { guard 5 != 7; sync ch_5_7_out?m; },
found_partner -> found_q { guard 6 != 7; sync ch_6_7_out?m; },
found_partner -> found_q { guard 7 != 7; sync ch_7_7_out?m; },
found_partner -> found_q { guard 8 != 7; sync ch_8_7_out?m; },
found_partner -> found_q { guard 9 != 7; sync ch_9_7_out?m; },
found_partner -> found_q { guard 10 != 7; sync ch_10_7_out?m; },
found_partner -> found_q { guard 11 != 7; sync ch_11_7_out?m; },
found_partner -> found_q { guard 12 != 7; sync ch_12_7_out?m; },
found_partner -> found_q { guard 13 != 7; sync ch_13_7_out?m; },
found_partner -> found_q { guard 14 != 7; sync ch_14_7_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 7; sync ch_0_7_out?m; },
 response -> response_q { guard 1 != 7; sync ch_1_7_out?m; },
 response -> response_q { guard 2 != 7; sync ch_2_7_out?m; },
 response -> response_q { guard 3 != 7; sync ch_3_7_out?m; },
 response -> response_q { guard 4 != 7; sync ch_4_7_out?m; },
 response -> response_q { guard 5 != 7; sync ch_5_7_out?m; },
 response -> response_q { guard 6 != 7; sync ch_6_7_out?m; },
 response -> response_q { guard 7 != 7; sync ch_7_7_out?m; },
 response -> response_q { guard 8 != 7; sync ch_8_7_out?m; },
 response -> response_q { guard 9 != 7; sync ch_9_7_out?m; },
 response -> response_q { guard 10 != 7; sync ch_10_7_out?m; },
 response -> response_q { guard 11 != 7; sync ch_11_7_out?m; },
 response -> response_q { guard 12 != 7; sync ch_12_7_out?m; },
 response -> response_q { guard 13 != 7; sync ch_13_7_out?m; },
 response -> response_q { guard 14 != 7; sync ch_14_7_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_7_0_in!(3*15+7); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_7_1_in!(3*15+7); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_7_2_in!(3*15+7); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_7_3_in!(3*15+7); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_7_4_in!(3*15+7); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_7_5_in!(3*15+7); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_7_6_in!(3*15+7); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_7_7_in!(3*15+7); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_7_8_in!(3*15+7); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_7_9_in!(3*15+7); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_7_10_in!(3*15+7); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_7_11_in!(3*15+7); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_7_12_in!(3*15+7); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_7_13_in!(3*15+7); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_7_14_in!(3*15+7); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_7_0_in!(1*15+7); },
 winner -> response { guard 1 == m%15; sync ch_7_1_in!(1*15+7); },
 winner -> response { guard 2 == m%15; sync ch_7_2_in!(1*15+7); },
 winner -> response { guard 3 == m%15; sync ch_7_3_in!(1*15+7); },
 winner -> response { guard 4 == m%15; sync ch_7_4_in!(1*15+7); },
 winner -> response { guard 5 == m%15; sync ch_7_5_in!(1*15+7); },
 winner -> response { guard 6 == m%15; sync ch_7_6_in!(1*15+7); },
 winner -> response { guard 7 == m%15; sync ch_7_7_in!(1*15+7); },
 winner -> response { guard 8 == m%15; sync ch_7_8_in!(1*15+7); },
 winner -> response { guard 9 == m%15; sync ch_7_9_in!(1*15+7); },
 winner -> response { guard 10 == m%15; sync ch_7_10_in!(1*15+7); },
 winner -> response { guard 11 == m%15; sync ch_7_11_in!(1*15+7); },
 winner -> response { guard 12 == m%15; sync ch_7_12_in!(1*15+7); },
 winner -> response { guard 13 == m%15; sync ch_7_13_in!(1*15+7); },
 winner -> response { guard 14 == m%15; sync ch_7_14_in!(1*15+7); },

 loser -> loser_q { guard 0 != 7; sync ch_0_7_out?m; },
loser -> loser_q { guard 1 != 7; sync ch_1_7_out?m; },
loser -> loser_q { guard 2 != 7; sync ch_2_7_out?m; },
loser -> loser_q { guard 3 != 7; sync ch_3_7_out?m; },
loser -> loser_q { guard 4 != 7; sync ch_4_7_out?m; },
loser -> loser_q { guard 5 != 7; sync ch_5_7_out?m; },
loser -> loser_q { guard 6 != 7; sync ch_6_7_out?m; },
loser -> loser_q { guard 7 != 7; sync ch_7_7_out?m; },
loser -> loser_q { guard 8 != 7; sync ch_8_7_out?m; },
loser -> loser_q { guard 9 != 7; sync ch_9_7_out?m; },
loser -> loser_q { guard 10 != 7; sync ch_10_7_out?m; },
loser -> loser_q { guard 11 != 7; sync ch_11_7_out?m; },
loser -> loser_q { guard 12 != 7; sync ch_12_7_out?m; },
loser -> loser_q { guard 13 != 7; sync ch_13_7_out?m; },
loser -> loser_q { guard 14 != 7; sync ch_14_7_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_8 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) == 1 && connected[(8*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] ) > 1;
	effect n = (connected[(8*15+0)] +connected[(8*15+1)] +connected[(8*15+2)] +connected[(8*15+3)] +connected[(8*15+4)] +connected[(8*15+5)] +connected[(8*15+6)] +connected[(8*15+7)] +connected[(8*15+8)] +connected[(8*15+9)] +connected[(8*15+10)] +connected[(8*15+11)] +connected[(8*15+12)] +connected[(8*15+13)] +connected[(8*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 8; sync ch_0_8_out?m; },
 wait_for_request -> wait_q { guard 1 != 8; sync ch_1_8_out?m; },
 wait_for_request -> wait_q { guard 2 != 8; sync ch_2_8_out?m; },
 wait_for_request -> wait_q { guard 3 != 8; sync ch_3_8_out?m; },
 wait_for_request -> wait_q { guard 4 != 8; sync ch_4_8_out?m; },
 wait_for_request -> wait_q { guard 5 != 8; sync ch_5_8_out?m; },
 wait_for_request -> wait_q { guard 6 != 8; sync ch_6_8_out?m; },
 wait_for_request -> wait_q { guard 7 != 8; sync ch_7_8_out?m; },
 wait_for_request -> wait_q { guard 8 != 8; sync ch_8_8_out?m; },
 wait_for_request -> wait_q { guard 9 != 8; sync ch_9_8_out?m; },
 wait_for_request -> wait_q { guard 10 != 8; sync ch_10_8_out?m; },
 wait_for_request -> wait_q { guard 11 != 8; sync ch_11_8_out?m; },
 wait_for_request -> wait_q { guard 12 != 8; sync ch_12_8_out?m; },
 wait_for_request -> wait_q { guard 13 != 8; sync ch_13_8_out?m; },
 wait_for_request -> wait_q { guard 14 != 8; sync ch_14_8_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(8*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(8*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_8_0_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_8_1_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_8_2_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_8_3_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_8_4_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_8_5_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_8_6_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_8_7_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_8_8_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_8_9_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_8_10_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_8_11_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_8_12_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_8_13_in!(2*15+8);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_8_14_in!(2*15+8);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+0)] && (received[0] == 0);
	sync ch_8_0_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+1)] && (received[1] == 0);
	sync ch_8_1_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+2)] && (received[2] == 0);
	sync ch_8_2_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+3)] && (received[3] == 0);
	sync ch_8_3_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+4)] && (received[4] == 0);
	sync ch_8_4_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+5)] && (received[5] == 0);
	sync ch_8_5_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+6)] && (received[6] == 0);
	sync ch_8_6_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+7)] && (received[7] == 0);
	sync ch_8_7_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+8)] && (received[8] == 0);
	sync ch_8_8_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+9)] && (received[9] == 0);
	sync ch_8_9_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+10)] && (received[10] == 0);
	sync ch_8_10_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+11)] && (received[11] == 0);
	sync ch_8_11_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+12)] && (received[12] == 0);
	sync ch_8_12_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+13)] && (received[13] == 0);
	sync ch_8_13_in!(1*15+8);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(8*15+14)] && (received[14] == 0);
	sync ch_8_14_in!(1*15+8);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 8 and received[0] == 1; sync ch_0_8_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 8 and received[1] == 1; sync ch_1_8_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 8 and received[2] == 1; sync ch_2_8_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 8 and received[3] == 1; sync ch_3_8_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 8 and received[4] == 1; sync ch_4_8_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 8 and received[5] == 1; sync ch_5_8_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 8 and received[6] == 1; sync ch_6_8_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 8 and received[7] == 1; sync ch_7_8_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 8 and received[8] == 1; sync ch_8_8_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 8 and received[9] == 1; sync ch_9_8_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 8 and received[10] == 1; sync ch_10_8_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 8 and received[11] == 1; sync ch_11_8_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 8 and received[12] == 1; sync ch_12_8_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 8 and received[13] == 1; sync ch_13_8_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 8 and received[14] == 1; sync ch_14_8_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 8, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_8_0_in!(1*15+8);},
found_partner -> response { guard 1 == j; sync ch_8_1_in!(1*15+8);},
found_partner -> response { guard 2 == j; sync ch_8_2_in!(1*15+8);},
found_partner -> response { guard 3 == j; sync ch_8_3_in!(1*15+8);},
found_partner -> response { guard 4 == j; sync ch_8_4_in!(1*15+8);},
found_partner -> response { guard 5 == j; sync ch_8_5_in!(1*15+8);},
found_partner -> response { guard 6 == j; sync ch_8_6_in!(1*15+8);},
found_partner -> response { guard 7 == j; sync ch_8_7_in!(1*15+8);},
found_partner -> response { guard 8 == j; sync ch_8_8_in!(1*15+8);},
found_partner -> response { guard 9 == j; sync ch_8_9_in!(1*15+8);},
found_partner -> response { guard 10 == j; sync ch_8_10_in!(1*15+8);},
found_partner -> response { guard 11 == j; sync ch_8_11_in!(1*15+8);},
found_partner -> response { guard 12 == j; sync ch_8_12_in!(1*15+8);},
found_partner -> response { guard 13 == j; sync ch_8_13_in!(1*15+8);},
found_partner -> response { guard 14 == j; sync ch_8_14_in!(1*15+8);},

 found_partner -> found_q { guard 0 != 8; sync ch_0_8_out?m; },
found_partner -> found_q { guard 1 != 8; sync ch_1_8_out?m; },
found_partner -> found_q { guard 2 != 8; sync ch_2_8_out?m; },
found_partner -> found_q { guard 3 != 8; sync ch_3_8_out?m; },
found_partner -> found_q { guard 4 != 8; sync ch_4_8_out?m; },
found_partner -> found_q { guard 5 != 8; sync ch_5_8_out?m; },
found_partner -> found_q { guard 6 != 8; sync ch_6_8_out?m; },
found_partner -> found_q { guard 7 != 8; sync ch_7_8_out?m; },
found_partner -> found_q { guard 8 != 8; sync ch_8_8_out?m; },
found_partner -> found_q { guard 9 != 8; sync ch_9_8_out?m; },
found_partner -> found_q { guard 10 != 8; sync ch_10_8_out?m; },
found_partner -> found_q { guard 11 != 8; sync ch_11_8_out?m; },
found_partner -> found_q { guard 12 != 8; sync ch_12_8_out?m; },
found_partner -> found_q { guard 13 != 8; sync ch_13_8_out?m; },
found_partner -> found_q { guard 14 != 8; sync ch_14_8_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 8; sync ch_0_8_out?m; },
 response -> response_q { guard 1 != 8; sync ch_1_8_out?m; },
 response -> response_q { guard 2 != 8; sync ch_2_8_out?m; },
 response -> response_q { guard 3 != 8; sync ch_3_8_out?m; },
 response -> response_q { guard 4 != 8; sync ch_4_8_out?m; },
 response -> response_q { guard 5 != 8; sync ch_5_8_out?m; },
 response -> response_q { guard 6 != 8; sync ch_6_8_out?m; },
 response -> response_q { guard 7 != 8; sync ch_7_8_out?m; },
 response -> response_q { guard 8 != 8; sync ch_8_8_out?m; },
 response -> response_q { guard 9 != 8; sync ch_9_8_out?m; },
 response -> response_q { guard 10 != 8; sync ch_10_8_out?m; },
 response -> response_q { guard 11 != 8; sync ch_11_8_out?m; },
 response -> response_q { guard 12 != 8; sync ch_12_8_out?m; },
 response -> response_q { guard 13 != 8; sync ch_13_8_out?m; },
 response -> response_q { guard 14 != 8; sync ch_14_8_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_8_0_in!(3*15+8); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_8_1_in!(3*15+8); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_8_2_in!(3*15+8); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_8_3_in!(3*15+8); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_8_4_in!(3*15+8); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_8_5_in!(3*15+8); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_8_6_in!(3*15+8); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_8_7_in!(3*15+8); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_8_8_in!(3*15+8); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_8_9_in!(3*15+8); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_8_10_in!(3*15+8); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_8_11_in!(3*15+8); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_8_12_in!(3*15+8); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_8_13_in!(3*15+8); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_8_14_in!(3*15+8); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_8_0_in!(1*15+8); },
 winner -> response { guard 1 == m%15; sync ch_8_1_in!(1*15+8); },
 winner -> response { guard 2 == m%15; sync ch_8_2_in!(1*15+8); },
 winner -> response { guard 3 == m%15; sync ch_8_3_in!(1*15+8); },
 winner -> response { guard 4 == m%15; sync ch_8_4_in!(1*15+8); },
 winner -> response { guard 5 == m%15; sync ch_8_5_in!(1*15+8); },
 winner -> response { guard 6 == m%15; sync ch_8_6_in!(1*15+8); },
 winner -> response { guard 7 == m%15; sync ch_8_7_in!(1*15+8); },
 winner -> response { guard 8 == m%15; sync ch_8_8_in!(1*15+8); },
 winner -> response { guard 9 == m%15; sync ch_8_9_in!(1*15+8); },
 winner -> response { guard 10 == m%15; sync ch_8_10_in!(1*15+8); },
 winner -> response { guard 11 == m%15; sync ch_8_11_in!(1*15+8); },
 winner -> response { guard 12 == m%15; sync ch_8_12_in!(1*15+8); },
 winner -> response { guard 13 == m%15; sync ch_8_13_in!(1*15+8); },
 winner -> response { guard 14 == m%15; sync ch_8_14_in!(1*15+8); },

 loser -> loser_q { guard 0 != 8; sync ch_0_8_out?m; },
loser -> loser_q { guard 1 != 8; sync ch_1_8_out?m; },
loser -> loser_q { guard 2 != 8; sync ch_2_8_out?m; },
loser -> loser_q { guard 3 != 8; sync ch_3_8_out?m; },
loser -> loser_q { guard 4 != 8; sync ch_4_8_out?m; },
loser -> loser_q { guard 5 != 8; sync ch_5_8_out?m; },
loser -> loser_q { guard 6 != 8; sync ch_6_8_out?m; },
loser -> loser_q { guard 7 != 8; sync ch_7_8_out?m; },
loser -> loser_q { guard 8 != 8; sync ch_8_8_out?m; },
loser -> loser_q { guard 9 != 8; sync ch_9_8_out?m; },
loser -> loser_q { guard 10 != 8; sync ch_10_8_out?m; },
loser -> loser_q { guard 11 != 8; sync ch_11_8_out?m; },
loser -> loser_q { guard 12 != 8; sync ch_12_8_out?m; },
loser -> loser_q { guard 13 != 8; sync ch_13_8_out?m; },
loser -> loser_q { guard 14 != 8; sync ch_14_8_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_9 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) == 1 && connected[(9*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] ) > 1;
	effect n = (connected[(9*15+0)] +connected[(9*15+1)] +connected[(9*15+2)] +connected[(9*15+3)] +connected[(9*15+4)] +connected[(9*15+5)] +connected[(9*15+6)] +connected[(9*15+7)] +connected[(9*15+8)] +connected[(9*15+9)] +connected[(9*15+10)] +connected[(9*15+11)] +connected[(9*15+12)] +connected[(9*15+13)] +connected[(9*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 9; sync ch_0_9_out?m; },
 wait_for_request -> wait_q { guard 1 != 9; sync ch_1_9_out?m; },
 wait_for_request -> wait_q { guard 2 != 9; sync ch_2_9_out?m; },
 wait_for_request -> wait_q { guard 3 != 9; sync ch_3_9_out?m; },
 wait_for_request -> wait_q { guard 4 != 9; sync ch_4_9_out?m; },
 wait_for_request -> wait_q { guard 5 != 9; sync ch_5_9_out?m; },
 wait_for_request -> wait_q { guard 6 != 9; sync ch_6_9_out?m; },
 wait_for_request -> wait_q { guard 7 != 9; sync ch_7_9_out?m; },
 wait_for_request -> wait_q { guard 8 != 9; sync ch_8_9_out?m; },
 wait_for_request -> wait_q { guard 9 != 9; sync ch_9_9_out?m; },
 wait_for_request -> wait_q { guard 10 != 9; sync ch_10_9_out?m; },
 wait_for_request -> wait_q { guard 11 != 9; sync ch_11_9_out?m; },
 wait_for_request -> wait_q { guard 12 != 9; sync ch_12_9_out?m; },
 wait_for_request -> wait_q { guard 13 != 9; sync ch_13_9_out?m; },
 wait_for_request -> wait_q { guard 14 != 9; sync ch_14_9_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(9*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(9*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_9_0_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_9_1_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_9_2_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_9_3_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_9_4_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_9_5_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_9_6_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_9_7_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_9_8_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_9_9_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_9_10_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_9_11_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_9_12_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_9_13_in!(2*15+9);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_9_14_in!(2*15+9);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+0)] && (received[0] == 0);
	sync ch_9_0_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+1)] && (received[1] == 0);
	sync ch_9_1_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+2)] && (received[2] == 0);
	sync ch_9_2_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+3)] && (received[3] == 0);
	sync ch_9_3_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+4)] && (received[4] == 0);
	sync ch_9_4_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+5)] && (received[5] == 0);
	sync ch_9_5_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+6)] && (received[6] == 0);
	sync ch_9_6_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+7)] && (received[7] == 0);
	sync ch_9_7_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+8)] && (received[8] == 0);
	sync ch_9_8_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+9)] && (received[9] == 0);
	sync ch_9_9_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+10)] && (received[10] == 0);
	sync ch_9_10_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+11)] && (received[11] == 0);
	sync ch_9_11_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+12)] && (received[12] == 0);
	sync ch_9_12_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+13)] && (received[13] == 0);
	sync ch_9_13_in!(1*15+9);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(9*15+14)] && (received[14] == 0);
	sync ch_9_14_in!(1*15+9);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 9 and received[0] == 1; sync ch_0_9_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 9 and received[1] == 1; sync ch_1_9_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 9 and received[2] == 1; sync ch_2_9_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 9 and received[3] == 1; sync ch_3_9_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 9 and received[4] == 1; sync ch_4_9_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 9 and received[5] == 1; sync ch_5_9_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 9 and received[6] == 1; sync ch_6_9_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 9 and received[7] == 1; sync ch_7_9_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 9 and received[8] == 1; sync ch_8_9_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 9 and received[9] == 1; sync ch_9_9_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 9 and received[10] == 1; sync ch_10_9_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 9 and received[11] == 1; sync ch_11_9_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 9 and received[12] == 1; sync ch_12_9_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 9 and received[13] == 1; sync ch_13_9_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 9 and received[14] == 1; sync ch_14_9_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 9, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_9_0_in!(1*15+9);},
found_partner -> response { guard 1 == j; sync ch_9_1_in!(1*15+9);},
found_partner -> response { guard 2 == j; sync ch_9_2_in!(1*15+9);},
found_partner -> response { guard 3 == j; sync ch_9_3_in!(1*15+9);},
found_partner -> response { guard 4 == j; sync ch_9_4_in!(1*15+9);},
found_partner -> response { guard 5 == j; sync ch_9_5_in!(1*15+9);},
found_partner -> response { guard 6 == j; sync ch_9_6_in!(1*15+9);},
found_partner -> response { guard 7 == j; sync ch_9_7_in!(1*15+9);},
found_partner -> response { guard 8 == j; sync ch_9_8_in!(1*15+9);},
found_partner -> response { guard 9 == j; sync ch_9_9_in!(1*15+9);},
found_partner -> response { guard 10 == j; sync ch_9_10_in!(1*15+9);},
found_partner -> response { guard 11 == j; sync ch_9_11_in!(1*15+9);},
found_partner -> response { guard 12 == j; sync ch_9_12_in!(1*15+9);},
found_partner -> response { guard 13 == j; sync ch_9_13_in!(1*15+9);},
found_partner -> response { guard 14 == j; sync ch_9_14_in!(1*15+9);},

 found_partner -> found_q { guard 0 != 9; sync ch_0_9_out?m; },
found_partner -> found_q { guard 1 != 9; sync ch_1_9_out?m; },
found_partner -> found_q { guard 2 != 9; sync ch_2_9_out?m; },
found_partner -> found_q { guard 3 != 9; sync ch_3_9_out?m; },
found_partner -> found_q { guard 4 != 9; sync ch_4_9_out?m; },
found_partner -> found_q { guard 5 != 9; sync ch_5_9_out?m; },
found_partner -> found_q { guard 6 != 9; sync ch_6_9_out?m; },
found_partner -> found_q { guard 7 != 9; sync ch_7_9_out?m; },
found_partner -> found_q { guard 8 != 9; sync ch_8_9_out?m; },
found_partner -> found_q { guard 9 != 9; sync ch_9_9_out?m; },
found_partner -> found_q { guard 10 != 9; sync ch_10_9_out?m; },
found_partner -> found_q { guard 11 != 9; sync ch_11_9_out?m; },
found_partner -> found_q { guard 12 != 9; sync ch_12_9_out?m; },
found_partner -> found_q { guard 13 != 9; sync ch_13_9_out?m; },
found_partner -> found_q { guard 14 != 9; sync ch_14_9_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 9; sync ch_0_9_out?m; },
 response -> response_q { guard 1 != 9; sync ch_1_9_out?m; },
 response -> response_q { guard 2 != 9; sync ch_2_9_out?m; },
 response -> response_q { guard 3 != 9; sync ch_3_9_out?m; },
 response -> response_q { guard 4 != 9; sync ch_4_9_out?m; },
 response -> response_q { guard 5 != 9; sync ch_5_9_out?m; },
 response -> response_q { guard 6 != 9; sync ch_6_9_out?m; },
 response -> response_q { guard 7 != 9; sync ch_7_9_out?m; },
 response -> response_q { guard 8 != 9; sync ch_8_9_out?m; },
 response -> response_q { guard 9 != 9; sync ch_9_9_out?m; },
 response -> response_q { guard 10 != 9; sync ch_10_9_out?m; },
 response -> response_q { guard 11 != 9; sync ch_11_9_out?m; },
 response -> response_q { guard 12 != 9; sync ch_12_9_out?m; },
 response -> response_q { guard 13 != 9; sync ch_13_9_out?m; },
 response -> response_q { guard 14 != 9; sync ch_14_9_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_9_0_in!(3*15+9); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_9_1_in!(3*15+9); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_9_2_in!(3*15+9); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_9_3_in!(3*15+9); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_9_4_in!(3*15+9); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_9_5_in!(3*15+9); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_9_6_in!(3*15+9); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_9_7_in!(3*15+9); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_9_8_in!(3*15+9); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_9_9_in!(3*15+9); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_9_10_in!(3*15+9); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_9_11_in!(3*15+9); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_9_12_in!(3*15+9); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_9_13_in!(3*15+9); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_9_14_in!(3*15+9); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_9_0_in!(1*15+9); },
 winner -> response { guard 1 == m%15; sync ch_9_1_in!(1*15+9); },
 winner -> response { guard 2 == m%15; sync ch_9_2_in!(1*15+9); },
 winner -> response { guard 3 == m%15; sync ch_9_3_in!(1*15+9); },
 winner -> response { guard 4 == m%15; sync ch_9_4_in!(1*15+9); },
 winner -> response { guard 5 == m%15; sync ch_9_5_in!(1*15+9); },
 winner -> response { guard 6 == m%15; sync ch_9_6_in!(1*15+9); },
 winner -> response { guard 7 == m%15; sync ch_9_7_in!(1*15+9); },
 winner -> response { guard 8 == m%15; sync ch_9_8_in!(1*15+9); },
 winner -> response { guard 9 == m%15; sync ch_9_9_in!(1*15+9); },
 winner -> response { guard 10 == m%15; sync ch_9_10_in!(1*15+9); },
 winner -> response { guard 11 == m%15; sync ch_9_11_in!(1*15+9); },
 winner -> response { guard 12 == m%15; sync ch_9_12_in!(1*15+9); },
 winner -> response { guard 13 == m%15; sync ch_9_13_in!(1*15+9); },
 winner -> response { guard 14 == m%15; sync ch_9_14_in!(1*15+9); },

 loser -> loser_q { guard 0 != 9; sync ch_0_9_out?m; },
loser -> loser_q { guard 1 != 9; sync ch_1_9_out?m; },
loser -> loser_q { guard 2 != 9; sync ch_2_9_out?m; },
loser -> loser_q { guard 3 != 9; sync ch_3_9_out?m; },
loser -> loser_q { guard 4 != 9; sync ch_4_9_out?m; },
loser -> loser_q { guard 5 != 9; sync ch_5_9_out?m; },
loser -> loser_q { guard 6 != 9; sync ch_6_9_out?m; },
loser -> loser_q { guard 7 != 9; sync ch_7_9_out?m; },
loser -> loser_q { guard 8 != 9; sync ch_8_9_out?m; },
loser -> loser_q { guard 9 != 9; sync ch_9_9_out?m; },
loser -> loser_q { guard 10 != 9; sync ch_10_9_out?m; },
loser -> loser_q { guard 11 != 9; sync ch_11_9_out?m; },
loser -> loser_q { guard 12 != 9; sync ch_12_9_out?m; },
loser -> loser_q { guard 13 != 9; sync ch_13_9_out?m; },
loser -> loser_q { guard 14 != 9; sync ch_14_9_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_10 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) == 1 && connected[(10*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] ) > 1;
	effect n = (connected[(10*15+0)] +connected[(10*15+1)] +connected[(10*15+2)] +connected[(10*15+3)] +connected[(10*15+4)] +connected[(10*15+5)] +connected[(10*15+6)] +connected[(10*15+7)] +connected[(10*15+8)] +connected[(10*15+9)] +connected[(10*15+10)] +connected[(10*15+11)] +connected[(10*15+12)] +connected[(10*15+13)] +connected[(10*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 10; sync ch_0_10_out?m; },
 wait_for_request -> wait_q { guard 1 != 10; sync ch_1_10_out?m; },
 wait_for_request -> wait_q { guard 2 != 10; sync ch_2_10_out?m; },
 wait_for_request -> wait_q { guard 3 != 10; sync ch_3_10_out?m; },
 wait_for_request -> wait_q { guard 4 != 10; sync ch_4_10_out?m; },
 wait_for_request -> wait_q { guard 5 != 10; sync ch_5_10_out?m; },
 wait_for_request -> wait_q { guard 6 != 10; sync ch_6_10_out?m; },
 wait_for_request -> wait_q { guard 7 != 10; sync ch_7_10_out?m; },
 wait_for_request -> wait_q { guard 8 != 10; sync ch_8_10_out?m; },
 wait_for_request -> wait_q { guard 9 != 10; sync ch_9_10_out?m; },
 wait_for_request -> wait_q { guard 10 != 10; sync ch_10_10_out?m; },
 wait_for_request -> wait_q { guard 11 != 10; sync ch_11_10_out?m; },
 wait_for_request -> wait_q { guard 12 != 10; sync ch_12_10_out?m; },
 wait_for_request -> wait_q { guard 13 != 10; sync ch_13_10_out?m; },
 wait_for_request -> wait_q { guard 14 != 10; sync ch_14_10_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(10*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(10*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_10_0_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_10_1_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_10_2_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_10_3_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_10_4_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_10_5_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_10_6_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_10_7_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_10_8_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_10_9_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_10_10_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_10_11_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_10_12_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_10_13_in!(2*15+10);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_10_14_in!(2*15+10);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+0)] && (received[0] == 0);
	sync ch_10_0_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+1)] && (received[1] == 0);
	sync ch_10_1_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+2)] && (received[2] == 0);
	sync ch_10_2_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+3)] && (received[3] == 0);
	sync ch_10_3_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+4)] && (received[4] == 0);
	sync ch_10_4_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+5)] && (received[5] == 0);
	sync ch_10_5_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+6)] && (received[6] == 0);
	sync ch_10_6_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+7)] && (received[7] == 0);
	sync ch_10_7_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+8)] && (received[8] == 0);
	sync ch_10_8_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+9)] && (received[9] == 0);
	sync ch_10_9_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+10)] && (received[10] == 0);
	sync ch_10_10_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+11)] && (received[11] == 0);
	sync ch_10_11_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+12)] && (received[12] == 0);
	sync ch_10_12_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+13)] && (received[13] == 0);
	sync ch_10_13_in!(1*15+10);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(10*15+14)] && (received[14] == 0);
	sync ch_10_14_in!(1*15+10);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 10 and received[0] == 1; sync ch_0_10_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 10 and received[1] == 1; sync ch_1_10_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 10 and received[2] == 1; sync ch_2_10_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 10 and received[3] == 1; sync ch_3_10_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 10 and received[4] == 1; sync ch_4_10_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 10 and received[5] == 1; sync ch_5_10_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 10 and received[6] == 1; sync ch_6_10_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 10 and received[7] == 1; sync ch_7_10_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 10 and received[8] == 1; sync ch_8_10_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 10 and received[9] == 1; sync ch_9_10_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 10 and received[10] == 1; sync ch_10_10_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 10 and received[11] == 1; sync ch_11_10_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 10 and received[12] == 1; sync ch_12_10_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 10 and received[13] == 1; sync ch_13_10_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 10 and received[14] == 1; sync ch_14_10_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 10, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_10_0_in!(1*15+10);},
found_partner -> response { guard 1 == j; sync ch_10_1_in!(1*15+10);},
found_partner -> response { guard 2 == j; sync ch_10_2_in!(1*15+10);},
found_partner -> response { guard 3 == j; sync ch_10_3_in!(1*15+10);},
found_partner -> response { guard 4 == j; sync ch_10_4_in!(1*15+10);},
found_partner -> response { guard 5 == j; sync ch_10_5_in!(1*15+10);},
found_partner -> response { guard 6 == j; sync ch_10_6_in!(1*15+10);},
found_partner -> response { guard 7 == j; sync ch_10_7_in!(1*15+10);},
found_partner -> response { guard 8 == j; sync ch_10_8_in!(1*15+10);},
found_partner -> response { guard 9 == j; sync ch_10_9_in!(1*15+10);},
found_partner -> response { guard 10 == j; sync ch_10_10_in!(1*15+10);},
found_partner -> response { guard 11 == j; sync ch_10_11_in!(1*15+10);},
found_partner -> response { guard 12 == j; sync ch_10_12_in!(1*15+10);},
found_partner -> response { guard 13 == j; sync ch_10_13_in!(1*15+10);},
found_partner -> response { guard 14 == j; sync ch_10_14_in!(1*15+10);},

 found_partner -> found_q { guard 0 != 10; sync ch_0_10_out?m; },
found_partner -> found_q { guard 1 != 10; sync ch_1_10_out?m; },
found_partner -> found_q { guard 2 != 10; sync ch_2_10_out?m; },
found_partner -> found_q { guard 3 != 10; sync ch_3_10_out?m; },
found_partner -> found_q { guard 4 != 10; sync ch_4_10_out?m; },
found_partner -> found_q { guard 5 != 10; sync ch_5_10_out?m; },
found_partner -> found_q { guard 6 != 10; sync ch_6_10_out?m; },
found_partner -> found_q { guard 7 != 10; sync ch_7_10_out?m; },
found_partner -> found_q { guard 8 != 10; sync ch_8_10_out?m; },
found_partner -> found_q { guard 9 != 10; sync ch_9_10_out?m; },
found_partner -> found_q { guard 10 != 10; sync ch_10_10_out?m; },
found_partner -> found_q { guard 11 != 10; sync ch_11_10_out?m; },
found_partner -> found_q { guard 12 != 10; sync ch_12_10_out?m; },
found_partner -> found_q { guard 13 != 10; sync ch_13_10_out?m; },
found_partner -> found_q { guard 14 != 10; sync ch_14_10_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 10; sync ch_0_10_out?m; },
 response -> response_q { guard 1 != 10; sync ch_1_10_out?m; },
 response -> response_q { guard 2 != 10; sync ch_2_10_out?m; },
 response -> response_q { guard 3 != 10; sync ch_3_10_out?m; },
 response -> response_q { guard 4 != 10; sync ch_4_10_out?m; },
 response -> response_q { guard 5 != 10; sync ch_5_10_out?m; },
 response -> response_q { guard 6 != 10; sync ch_6_10_out?m; },
 response -> response_q { guard 7 != 10; sync ch_7_10_out?m; },
 response -> response_q { guard 8 != 10; sync ch_8_10_out?m; },
 response -> response_q { guard 9 != 10; sync ch_9_10_out?m; },
 response -> response_q { guard 10 != 10; sync ch_10_10_out?m; },
 response -> response_q { guard 11 != 10; sync ch_11_10_out?m; },
 response -> response_q { guard 12 != 10; sync ch_12_10_out?m; },
 response -> response_q { guard 13 != 10; sync ch_13_10_out?m; },
 response -> response_q { guard 14 != 10; sync ch_14_10_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_10_0_in!(3*15+10); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_10_1_in!(3*15+10); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_10_2_in!(3*15+10); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_10_3_in!(3*15+10); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_10_4_in!(3*15+10); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_10_5_in!(3*15+10); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_10_6_in!(3*15+10); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_10_7_in!(3*15+10); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_10_8_in!(3*15+10); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_10_9_in!(3*15+10); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_10_10_in!(3*15+10); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_10_11_in!(3*15+10); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_10_12_in!(3*15+10); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_10_13_in!(3*15+10); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_10_14_in!(3*15+10); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_10_0_in!(1*15+10); },
 winner -> response { guard 1 == m%15; sync ch_10_1_in!(1*15+10); },
 winner -> response { guard 2 == m%15; sync ch_10_2_in!(1*15+10); },
 winner -> response { guard 3 == m%15; sync ch_10_3_in!(1*15+10); },
 winner -> response { guard 4 == m%15; sync ch_10_4_in!(1*15+10); },
 winner -> response { guard 5 == m%15; sync ch_10_5_in!(1*15+10); },
 winner -> response { guard 6 == m%15; sync ch_10_6_in!(1*15+10); },
 winner -> response { guard 7 == m%15; sync ch_10_7_in!(1*15+10); },
 winner -> response { guard 8 == m%15; sync ch_10_8_in!(1*15+10); },
 winner -> response { guard 9 == m%15; sync ch_10_9_in!(1*15+10); },
 winner -> response { guard 10 == m%15; sync ch_10_10_in!(1*15+10); },
 winner -> response { guard 11 == m%15; sync ch_10_11_in!(1*15+10); },
 winner -> response { guard 12 == m%15; sync ch_10_12_in!(1*15+10); },
 winner -> response { guard 13 == m%15; sync ch_10_13_in!(1*15+10); },
 winner -> response { guard 14 == m%15; sync ch_10_14_in!(1*15+10); },

 loser -> loser_q { guard 0 != 10; sync ch_0_10_out?m; },
loser -> loser_q { guard 1 != 10; sync ch_1_10_out?m; },
loser -> loser_q { guard 2 != 10; sync ch_2_10_out?m; },
loser -> loser_q { guard 3 != 10; sync ch_3_10_out?m; },
loser -> loser_q { guard 4 != 10; sync ch_4_10_out?m; },
loser -> loser_q { guard 5 != 10; sync ch_5_10_out?m; },
loser -> loser_q { guard 6 != 10; sync ch_6_10_out?m; },
loser -> loser_q { guard 7 != 10; sync ch_7_10_out?m; },
loser -> loser_q { guard 8 != 10; sync ch_8_10_out?m; },
loser -> loser_q { guard 9 != 10; sync ch_9_10_out?m; },
loser -> loser_q { guard 10 != 10; sync ch_10_10_out?m; },
loser -> loser_q { guard 11 != 10; sync ch_11_10_out?m; },
loser -> loser_q { guard 12 != 10; sync ch_12_10_out?m; },
loser -> loser_q { guard 13 != 10; sync ch_13_10_out?m; },
loser -> loser_q { guard 14 != 10; sync ch_14_10_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_11 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) == 1 && connected[(11*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] ) > 1;
	effect n = (connected[(11*15+0)] +connected[(11*15+1)] +connected[(11*15+2)] +connected[(11*15+3)] +connected[(11*15+4)] +connected[(11*15+5)] +connected[(11*15+6)] +connected[(11*15+7)] +connected[(11*15+8)] +connected[(11*15+9)] +connected[(11*15+10)] +connected[(11*15+11)] +connected[(11*15+12)] +connected[(11*15+13)] +connected[(11*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 11; sync ch_0_11_out?m; },
 wait_for_request -> wait_q { guard 1 != 11; sync ch_1_11_out?m; },
 wait_for_request -> wait_q { guard 2 != 11; sync ch_2_11_out?m; },
 wait_for_request -> wait_q { guard 3 != 11; sync ch_3_11_out?m; },
 wait_for_request -> wait_q { guard 4 != 11; sync ch_4_11_out?m; },
 wait_for_request -> wait_q { guard 5 != 11; sync ch_5_11_out?m; },
 wait_for_request -> wait_q { guard 6 != 11; sync ch_6_11_out?m; },
 wait_for_request -> wait_q { guard 7 != 11; sync ch_7_11_out?m; },
 wait_for_request -> wait_q { guard 8 != 11; sync ch_8_11_out?m; },
 wait_for_request -> wait_q { guard 9 != 11; sync ch_9_11_out?m; },
 wait_for_request -> wait_q { guard 10 != 11; sync ch_10_11_out?m; },
 wait_for_request -> wait_q { guard 11 != 11; sync ch_11_11_out?m; },
 wait_for_request -> wait_q { guard 12 != 11; sync ch_12_11_out?m; },
 wait_for_request -> wait_q { guard 13 != 11; sync ch_13_11_out?m; },
 wait_for_request -> wait_q { guard 14 != 11; sync ch_14_11_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(11*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(11*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_11_0_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_11_1_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_11_2_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_11_3_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_11_4_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_11_5_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_11_6_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_11_7_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_11_8_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_11_9_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_11_10_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_11_11_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_11_12_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_11_13_in!(2*15+11);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_11_14_in!(2*15+11);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+0)] && (received[0] == 0);
	sync ch_11_0_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+1)] && (received[1] == 0);
	sync ch_11_1_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+2)] && (received[2] == 0);
	sync ch_11_2_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+3)] && (received[3] == 0);
	sync ch_11_3_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+4)] && (received[4] == 0);
	sync ch_11_4_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+5)] && (received[5] == 0);
	sync ch_11_5_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+6)] && (received[6] == 0);
	sync ch_11_6_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+7)] && (received[7] == 0);
	sync ch_11_7_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+8)] && (received[8] == 0);
	sync ch_11_8_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+9)] && (received[9] == 0);
	sync ch_11_9_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+10)] && (received[10] == 0);
	sync ch_11_10_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+11)] && (received[11] == 0);
	sync ch_11_11_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+12)] && (received[12] == 0);
	sync ch_11_12_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+13)] && (received[13] == 0);
	sync ch_11_13_in!(1*15+11);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(11*15+14)] && (received[14] == 0);
	sync ch_11_14_in!(1*15+11);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 11 and received[0] == 1; sync ch_0_11_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 11 and received[1] == 1; sync ch_1_11_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 11 and received[2] == 1; sync ch_2_11_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 11 and received[3] == 1; sync ch_3_11_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 11 and received[4] == 1; sync ch_4_11_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 11 and received[5] == 1; sync ch_5_11_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 11 and received[6] == 1; sync ch_6_11_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 11 and received[7] == 1; sync ch_7_11_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 11 and received[8] == 1; sync ch_8_11_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 11 and received[9] == 1; sync ch_9_11_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 11 and received[10] == 1; sync ch_10_11_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 11 and received[11] == 1; sync ch_11_11_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 11 and received[12] == 1; sync ch_12_11_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 11 and received[13] == 1; sync ch_13_11_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 11 and received[14] == 1; sync ch_14_11_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 11, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_11_0_in!(1*15+11);},
found_partner -> response { guard 1 == j; sync ch_11_1_in!(1*15+11);},
found_partner -> response { guard 2 == j; sync ch_11_2_in!(1*15+11);},
found_partner -> response { guard 3 == j; sync ch_11_3_in!(1*15+11);},
found_partner -> response { guard 4 == j; sync ch_11_4_in!(1*15+11);},
found_partner -> response { guard 5 == j; sync ch_11_5_in!(1*15+11);},
found_partner -> response { guard 6 == j; sync ch_11_6_in!(1*15+11);},
found_partner -> response { guard 7 == j; sync ch_11_7_in!(1*15+11);},
found_partner -> response { guard 8 == j; sync ch_11_8_in!(1*15+11);},
found_partner -> response { guard 9 == j; sync ch_11_9_in!(1*15+11);},
found_partner -> response { guard 10 == j; sync ch_11_10_in!(1*15+11);},
found_partner -> response { guard 11 == j; sync ch_11_11_in!(1*15+11);},
found_partner -> response { guard 12 == j; sync ch_11_12_in!(1*15+11);},
found_partner -> response { guard 13 == j; sync ch_11_13_in!(1*15+11);},
found_partner -> response { guard 14 == j; sync ch_11_14_in!(1*15+11);},

 found_partner -> found_q { guard 0 != 11; sync ch_0_11_out?m; },
found_partner -> found_q { guard 1 != 11; sync ch_1_11_out?m; },
found_partner -> found_q { guard 2 != 11; sync ch_2_11_out?m; },
found_partner -> found_q { guard 3 != 11; sync ch_3_11_out?m; },
found_partner -> found_q { guard 4 != 11; sync ch_4_11_out?m; },
found_partner -> found_q { guard 5 != 11; sync ch_5_11_out?m; },
found_partner -> found_q { guard 6 != 11; sync ch_6_11_out?m; },
found_partner -> found_q { guard 7 != 11; sync ch_7_11_out?m; },
found_partner -> found_q { guard 8 != 11; sync ch_8_11_out?m; },
found_partner -> found_q { guard 9 != 11; sync ch_9_11_out?m; },
found_partner -> found_q { guard 10 != 11; sync ch_10_11_out?m; },
found_partner -> found_q { guard 11 != 11; sync ch_11_11_out?m; },
found_partner -> found_q { guard 12 != 11; sync ch_12_11_out?m; },
found_partner -> found_q { guard 13 != 11; sync ch_13_11_out?m; },
found_partner -> found_q { guard 14 != 11; sync ch_14_11_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 11; sync ch_0_11_out?m; },
 response -> response_q { guard 1 != 11; sync ch_1_11_out?m; },
 response -> response_q { guard 2 != 11; sync ch_2_11_out?m; },
 response -> response_q { guard 3 != 11; sync ch_3_11_out?m; },
 response -> response_q { guard 4 != 11; sync ch_4_11_out?m; },
 response -> response_q { guard 5 != 11; sync ch_5_11_out?m; },
 response -> response_q { guard 6 != 11; sync ch_6_11_out?m; },
 response -> response_q { guard 7 != 11; sync ch_7_11_out?m; },
 response -> response_q { guard 8 != 11; sync ch_8_11_out?m; },
 response -> response_q { guard 9 != 11; sync ch_9_11_out?m; },
 response -> response_q { guard 10 != 11; sync ch_10_11_out?m; },
 response -> response_q { guard 11 != 11; sync ch_11_11_out?m; },
 response -> response_q { guard 12 != 11; sync ch_12_11_out?m; },
 response -> response_q { guard 13 != 11; sync ch_13_11_out?m; },
 response -> response_q { guard 14 != 11; sync ch_14_11_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_11_0_in!(3*15+11); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_11_1_in!(3*15+11); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_11_2_in!(3*15+11); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_11_3_in!(3*15+11); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_11_4_in!(3*15+11); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_11_5_in!(3*15+11); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_11_6_in!(3*15+11); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_11_7_in!(3*15+11); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_11_8_in!(3*15+11); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_11_9_in!(3*15+11); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_11_10_in!(3*15+11); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_11_11_in!(3*15+11); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_11_12_in!(3*15+11); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_11_13_in!(3*15+11); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_11_14_in!(3*15+11); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_11_0_in!(1*15+11); },
 winner -> response { guard 1 == m%15; sync ch_11_1_in!(1*15+11); },
 winner -> response { guard 2 == m%15; sync ch_11_2_in!(1*15+11); },
 winner -> response { guard 3 == m%15; sync ch_11_3_in!(1*15+11); },
 winner -> response { guard 4 == m%15; sync ch_11_4_in!(1*15+11); },
 winner -> response { guard 5 == m%15; sync ch_11_5_in!(1*15+11); },
 winner -> response { guard 6 == m%15; sync ch_11_6_in!(1*15+11); },
 winner -> response { guard 7 == m%15; sync ch_11_7_in!(1*15+11); },
 winner -> response { guard 8 == m%15; sync ch_11_8_in!(1*15+11); },
 winner -> response { guard 9 == m%15; sync ch_11_9_in!(1*15+11); },
 winner -> response { guard 10 == m%15; sync ch_11_10_in!(1*15+11); },
 winner -> response { guard 11 == m%15; sync ch_11_11_in!(1*15+11); },
 winner -> response { guard 12 == m%15; sync ch_11_12_in!(1*15+11); },
 winner -> response { guard 13 == m%15; sync ch_11_13_in!(1*15+11); },
 winner -> response { guard 14 == m%15; sync ch_11_14_in!(1*15+11); },

 loser -> loser_q { guard 0 != 11; sync ch_0_11_out?m; },
loser -> loser_q { guard 1 != 11; sync ch_1_11_out?m; },
loser -> loser_q { guard 2 != 11; sync ch_2_11_out?m; },
loser -> loser_q { guard 3 != 11; sync ch_3_11_out?m; },
loser -> loser_q { guard 4 != 11; sync ch_4_11_out?m; },
loser -> loser_q { guard 5 != 11; sync ch_5_11_out?m; },
loser -> loser_q { guard 6 != 11; sync ch_6_11_out?m; },
loser -> loser_q { guard 7 != 11; sync ch_7_11_out?m; },
loser -> loser_q { guard 8 != 11; sync ch_8_11_out?m; },
loser -> loser_q { guard 9 != 11; sync ch_9_11_out?m; },
loser -> loser_q { guard 10 != 11; sync ch_10_11_out?m; },
loser -> loser_q { guard 11 != 11; sync ch_11_11_out?m; },
loser -> loser_q { guard 12 != 11; sync ch_12_11_out?m; },
loser -> loser_q { guard 13 != 11; sync ch_13_11_out?m; },
loser -> loser_q { guard 14 != 11; sync ch_14_11_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_12 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) == 1 && connected[(12*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] ) > 1;
	effect n = (connected[(12*15+0)] +connected[(12*15+1)] +connected[(12*15+2)] +connected[(12*15+3)] +connected[(12*15+4)] +connected[(12*15+5)] +connected[(12*15+6)] +connected[(12*15+7)] +connected[(12*15+8)] +connected[(12*15+9)] +connected[(12*15+10)] +connected[(12*15+11)] +connected[(12*15+12)] +connected[(12*15+13)] +connected[(12*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 12; sync ch_0_12_out?m; },
 wait_for_request -> wait_q { guard 1 != 12; sync ch_1_12_out?m; },
 wait_for_request -> wait_q { guard 2 != 12; sync ch_2_12_out?m; },
 wait_for_request -> wait_q { guard 3 != 12; sync ch_3_12_out?m; },
 wait_for_request -> wait_q { guard 4 != 12; sync ch_4_12_out?m; },
 wait_for_request -> wait_q { guard 5 != 12; sync ch_5_12_out?m; },
 wait_for_request -> wait_q { guard 6 != 12; sync ch_6_12_out?m; },
 wait_for_request -> wait_q { guard 7 != 12; sync ch_7_12_out?m; },
 wait_for_request -> wait_q { guard 8 != 12; sync ch_8_12_out?m; },
 wait_for_request -> wait_q { guard 9 != 12; sync ch_9_12_out?m; },
 wait_for_request -> wait_q { guard 10 != 12; sync ch_10_12_out?m; },
 wait_for_request -> wait_q { guard 11 != 12; sync ch_11_12_out?m; },
 wait_for_request -> wait_q { guard 12 != 12; sync ch_12_12_out?m; },
 wait_for_request -> wait_q { guard 13 != 12; sync ch_13_12_out?m; },
 wait_for_request -> wait_q { guard 14 != 12; sync ch_14_12_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(12*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(12*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_12_0_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_12_1_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_12_2_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_12_3_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_12_4_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_12_5_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_12_6_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_12_7_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_12_8_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_12_9_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_12_10_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_12_11_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_12_12_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_12_13_in!(2*15+12);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_12_14_in!(2*15+12);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+0)] && (received[0] == 0);
	sync ch_12_0_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+1)] && (received[1] == 0);
	sync ch_12_1_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+2)] && (received[2] == 0);
	sync ch_12_2_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+3)] && (received[3] == 0);
	sync ch_12_3_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+4)] && (received[4] == 0);
	sync ch_12_4_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+5)] && (received[5] == 0);
	sync ch_12_5_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+6)] && (received[6] == 0);
	sync ch_12_6_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+7)] && (received[7] == 0);
	sync ch_12_7_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+8)] && (received[8] == 0);
	sync ch_12_8_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+9)] && (received[9] == 0);
	sync ch_12_9_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+10)] && (received[10] == 0);
	sync ch_12_10_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+11)] && (received[11] == 0);
	sync ch_12_11_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+12)] && (received[12] == 0);
	sync ch_12_12_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+13)] && (received[13] == 0);
	sync ch_12_13_in!(1*15+12);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(12*15+14)] && (received[14] == 0);
	sync ch_12_14_in!(1*15+12);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 12 and received[0] == 1; sync ch_0_12_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 12 and received[1] == 1; sync ch_1_12_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 12 and received[2] == 1; sync ch_2_12_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 12 and received[3] == 1; sync ch_3_12_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 12 and received[4] == 1; sync ch_4_12_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 12 and received[5] == 1; sync ch_5_12_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 12 and received[6] == 1; sync ch_6_12_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 12 and received[7] == 1; sync ch_7_12_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 12 and received[8] == 1; sync ch_8_12_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 12 and received[9] == 1; sync ch_9_12_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 12 and received[10] == 1; sync ch_10_12_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 12 and received[11] == 1; sync ch_11_12_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 12 and received[12] == 1; sync ch_12_12_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 12 and received[13] == 1; sync ch_13_12_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 12 and received[14] == 1; sync ch_14_12_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 12, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_12_0_in!(1*15+12);},
found_partner -> response { guard 1 == j; sync ch_12_1_in!(1*15+12);},
found_partner -> response { guard 2 == j; sync ch_12_2_in!(1*15+12);},
found_partner -> response { guard 3 == j; sync ch_12_3_in!(1*15+12);},
found_partner -> response { guard 4 == j; sync ch_12_4_in!(1*15+12);},
found_partner -> response { guard 5 == j; sync ch_12_5_in!(1*15+12);},
found_partner -> response { guard 6 == j; sync ch_12_6_in!(1*15+12);},
found_partner -> response { guard 7 == j; sync ch_12_7_in!(1*15+12);},
found_partner -> response { guard 8 == j; sync ch_12_8_in!(1*15+12);},
found_partner -> response { guard 9 == j; sync ch_12_9_in!(1*15+12);},
found_partner -> response { guard 10 == j; sync ch_12_10_in!(1*15+12);},
found_partner -> response { guard 11 == j; sync ch_12_11_in!(1*15+12);},
found_partner -> response { guard 12 == j; sync ch_12_12_in!(1*15+12);},
found_partner -> response { guard 13 == j; sync ch_12_13_in!(1*15+12);},
found_partner -> response { guard 14 == j; sync ch_12_14_in!(1*15+12);},

 found_partner -> found_q { guard 0 != 12; sync ch_0_12_out?m; },
found_partner -> found_q { guard 1 != 12; sync ch_1_12_out?m; },
found_partner -> found_q { guard 2 != 12; sync ch_2_12_out?m; },
found_partner -> found_q { guard 3 != 12; sync ch_3_12_out?m; },
found_partner -> found_q { guard 4 != 12; sync ch_4_12_out?m; },
found_partner -> found_q { guard 5 != 12; sync ch_5_12_out?m; },
found_partner -> found_q { guard 6 != 12; sync ch_6_12_out?m; },
found_partner -> found_q { guard 7 != 12; sync ch_7_12_out?m; },
found_partner -> found_q { guard 8 != 12; sync ch_8_12_out?m; },
found_partner -> found_q { guard 9 != 12; sync ch_9_12_out?m; },
found_partner -> found_q { guard 10 != 12; sync ch_10_12_out?m; },
found_partner -> found_q { guard 11 != 12; sync ch_11_12_out?m; },
found_partner -> found_q { guard 12 != 12; sync ch_12_12_out?m; },
found_partner -> found_q { guard 13 != 12; sync ch_13_12_out?m; },
found_partner -> found_q { guard 14 != 12; sync ch_14_12_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 12; sync ch_0_12_out?m; },
 response -> response_q { guard 1 != 12; sync ch_1_12_out?m; },
 response -> response_q { guard 2 != 12; sync ch_2_12_out?m; },
 response -> response_q { guard 3 != 12; sync ch_3_12_out?m; },
 response -> response_q { guard 4 != 12; sync ch_4_12_out?m; },
 response -> response_q { guard 5 != 12; sync ch_5_12_out?m; },
 response -> response_q { guard 6 != 12; sync ch_6_12_out?m; },
 response -> response_q { guard 7 != 12; sync ch_7_12_out?m; },
 response -> response_q { guard 8 != 12; sync ch_8_12_out?m; },
 response -> response_q { guard 9 != 12; sync ch_9_12_out?m; },
 response -> response_q { guard 10 != 12; sync ch_10_12_out?m; },
 response -> response_q { guard 11 != 12; sync ch_11_12_out?m; },
 response -> response_q { guard 12 != 12; sync ch_12_12_out?m; },
 response -> response_q { guard 13 != 12; sync ch_13_12_out?m; },
 response -> response_q { guard 14 != 12; sync ch_14_12_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_12_0_in!(3*15+12); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_12_1_in!(3*15+12); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_12_2_in!(3*15+12); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_12_3_in!(3*15+12); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_12_4_in!(3*15+12); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_12_5_in!(3*15+12); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_12_6_in!(3*15+12); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_12_7_in!(3*15+12); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_12_8_in!(3*15+12); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_12_9_in!(3*15+12); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_12_10_in!(3*15+12); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_12_11_in!(3*15+12); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_12_12_in!(3*15+12); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_12_13_in!(3*15+12); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_12_14_in!(3*15+12); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_12_0_in!(1*15+12); },
 winner -> response { guard 1 == m%15; sync ch_12_1_in!(1*15+12); },
 winner -> response { guard 2 == m%15; sync ch_12_2_in!(1*15+12); },
 winner -> response { guard 3 == m%15; sync ch_12_3_in!(1*15+12); },
 winner -> response { guard 4 == m%15; sync ch_12_4_in!(1*15+12); },
 winner -> response { guard 5 == m%15; sync ch_12_5_in!(1*15+12); },
 winner -> response { guard 6 == m%15; sync ch_12_6_in!(1*15+12); },
 winner -> response { guard 7 == m%15; sync ch_12_7_in!(1*15+12); },
 winner -> response { guard 8 == m%15; sync ch_12_8_in!(1*15+12); },
 winner -> response { guard 9 == m%15; sync ch_12_9_in!(1*15+12); },
 winner -> response { guard 10 == m%15; sync ch_12_10_in!(1*15+12); },
 winner -> response { guard 11 == m%15; sync ch_12_11_in!(1*15+12); },
 winner -> response { guard 12 == m%15; sync ch_12_12_in!(1*15+12); },
 winner -> response { guard 13 == m%15; sync ch_12_13_in!(1*15+12); },
 winner -> response { guard 14 == m%15; sync ch_12_14_in!(1*15+12); },

 loser -> loser_q { guard 0 != 12; sync ch_0_12_out?m; },
loser -> loser_q { guard 1 != 12; sync ch_1_12_out?m; },
loser -> loser_q { guard 2 != 12; sync ch_2_12_out?m; },
loser -> loser_q { guard 3 != 12; sync ch_3_12_out?m; },
loser -> loser_q { guard 4 != 12; sync ch_4_12_out?m; },
loser -> loser_q { guard 5 != 12; sync ch_5_12_out?m; },
loser -> loser_q { guard 6 != 12; sync ch_6_12_out?m; },
loser -> loser_q { guard 7 != 12; sync ch_7_12_out?m; },
loser -> loser_q { guard 8 != 12; sync ch_8_12_out?m; },
loser -> loser_q { guard 9 != 12; sync ch_9_12_out?m; },
loser -> loser_q { guard 10 != 12; sync ch_10_12_out?m; },
loser -> loser_q { guard 11 != 12; sync ch_11_12_out?m; },
loser -> loser_q { guard 12 != 12; sync ch_12_12_out?m; },
loser -> loser_q { guard 13 != 12; sync ch_13_12_out?m; },
loser -> loser_q { guard 14 != 12; sync ch_14_12_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_13 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) == 1 && connected[(13*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] ) > 1;
	effect n = (connected[(13*15+0)] +connected[(13*15+1)] +connected[(13*15+2)] +connected[(13*15+3)] +connected[(13*15+4)] +connected[(13*15+5)] +connected[(13*15+6)] +connected[(13*15+7)] +connected[(13*15+8)] +connected[(13*15+9)] +connected[(13*15+10)] +connected[(13*15+11)] +connected[(13*15+12)] +connected[(13*15+13)] +connected[(13*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 13; sync ch_0_13_out?m; },
 wait_for_request -> wait_q { guard 1 != 13; sync ch_1_13_out?m; },
 wait_for_request -> wait_q { guard 2 != 13; sync ch_2_13_out?m; },
 wait_for_request -> wait_q { guard 3 != 13; sync ch_3_13_out?m; },
 wait_for_request -> wait_q { guard 4 != 13; sync ch_4_13_out?m; },
 wait_for_request -> wait_q { guard 5 != 13; sync ch_5_13_out?m; },
 wait_for_request -> wait_q { guard 6 != 13; sync ch_6_13_out?m; },
 wait_for_request -> wait_q { guard 7 != 13; sync ch_7_13_out?m; },
 wait_for_request -> wait_q { guard 8 != 13; sync ch_8_13_out?m; },
 wait_for_request -> wait_q { guard 9 != 13; sync ch_9_13_out?m; },
 wait_for_request -> wait_q { guard 10 != 13; sync ch_10_13_out?m; },
 wait_for_request -> wait_q { guard 11 != 13; sync ch_11_13_out?m; },
 wait_for_request -> wait_q { guard 12 != 13; sync ch_12_13_out?m; },
 wait_for_request -> wait_q { guard 13 != 13; sync ch_13_13_out?m; },
 wait_for_request -> wait_q { guard 14 != 13; sync ch_14_13_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(13*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(13*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_13_0_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_13_1_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_13_2_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_13_3_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_13_4_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_13_5_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_13_6_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_13_7_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_13_8_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_13_9_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_13_10_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_13_11_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_13_12_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_13_13_in!(2*15+13);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_13_14_in!(2*15+13);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+0)] && (received[0] == 0);
	sync ch_13_0_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+1)] && (received[1] == 0);
	sync ch_13_1_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+2)] && (received[2] == 0);
	sync ch_13_2_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+3)] && (received[3] == 0);
	sync ch_13_3_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+4)] && (received[4] == 0);
	sync ch_13_4_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+5)] && (received[5] == 0);
	sync ch_13_5_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+6)] && (received[6] == 0);
	sync ch_13_6_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+7)] && (received[7] == 0);
	sync ch_13_7_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+8)] && (received[8] == 0);
	sync ch_13_8_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+9)] && (received[9] == 0);
	sync ch_13_9_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+10)] && (received[10] == 0);
	sync ch_13_10_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+11)] && (received[11] == 0);
	sync ch_13_11_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+12)] && (received[12] == 0);
	sync ch_13_12_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+13)] && (received[13] == 0);
	sync ch_13_13_in!(1*15+13);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(13*15+14)] && (received[14] == 0);
	sync ch_13_14_in!(1*15+13);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 13 and received[0] == 1; sync ch_0_13_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 13 and received[1] == 1; sync ch_1_13_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 13 and received[2] == 1; sync ch_2_13_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 13 and received[3] == 1; sync ch_3_13_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 13 and received[4] == 1; sync ch_4_13_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 13 and received[5] == 1; sync ch_5_13_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 13 and received[6] == 1; sync ch_6_13_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 13 and received[7] == 1; sync ch_7_13_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 13 and received[8] == 1; sync ch_8_13_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 13 and received[9] == 1; sync ch_9_13_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 13 and received[10] == 1; sync ch_10_13_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 13 and received[11] == 1; sync ch_11_13_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 13 and received[12] == 1; sync ch_12_13_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 13 and received[13] == 1; sync ch_13_13_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 13 and received[14] == 1; sync ch_14_13_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 13, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_13_0_in!(1*15+13);},
found_partner -> response { guard 1 == j; sync ch_13_1_in!(1*15+13);},
found_partner -> response { guard 2 == j; sync ch_13_2_in!(1*15+13);},
found_partner -> response { guard 3 == j; sync ch_13_3_in!(1*15+13);},
found_partner -> response { guard 4 == j; sync ch_13_4_in!(1*15+13);},
found_partner -> response { guard 5 == j; sync ch_13_5_in!(1*15+13);},
found_partner -> response { guard 6 == j; sync ch_13_6_in!(1*15+13);},
found_partner -> response { guard 7 == j; sync ch_13_7_in!(1*15+13);},
found_partner -> response { guard 8 == j; sync ch_13_8_in!(1*15+13);},
found_partner -> response { guard 9 == j; sync ch_13_9_in!(1*15+13);},
found_partner -> response { guard 10 == j; sync ch_13_10_in!(1*15+13);},
found_partner -> response { guard 11 == j; sync ch_13_11_in!(1*15+13);},
found_partner -> response { guard 12 == j; sync ch_13_12_in!(1*15+13);},
found_partner -> response { guard 13 == j; sync ch_13_13_in!(1*15+13);},
found_partner -> response { guard 14 == j; sync ch_13_14_in!(1*15+13);},

 found_partner -> found_q { guard 0 != 13; sync ch_0_13_out?m; },
found_partner -> found_q { guard 1 != 13; sync ch_1_13_out?m; },
found_partner -> found_q { guard 2 != 13; sync ch_2_13_out?m; },
found_partner -> found_q { guard 3 != 13; sync ch_3_13_out?m; },
found_partner -> found_q { guard 4 != 13; sync ch_4_13_out?m; },
found_partner -> found_q { guard 5 != 13; sync ch_5_13_out?m; },
found_partner -> found_q { guard 6 != 13; sync ch_6_13_out?m; },
found_partner -> found_q { guard 7 != 13; sync ch_7_13_out?m; },
found_partner -> found_q { guard 8 != 13; sync ch_8_13_out?m; },
found_partner -> found_q { guard 9 != 13; sync ch_9_13_out?m; },
found_partner -> found_q { guard 10 != 13; sync ch_10_13_out?m; },
found_partner -> found_q { guard 11 != 13; sync ch_11_13_out?m; },
found_partner -> found_q { guard 12 != 13; sync ch_12_13_out?m; },
found_partner -> found_q { guard 13 != 13; sync ch_13_13_out?m; },
found_partner -> found_q { guard 14 != 13; sync ch_14_13_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 13; sync ch_0_13_out?m; },
 response -> response_q { guard 1 != 13; sync ch_1_13_out?m; },
 response -> response_q { guard 2 != 13; sync ch_2_13_out?m; },
 response -> response_q { guard 3 != 13; sync ch_3_13_out?m; },
 response -> response_q { guard 4 != 13; sync ch_4_13_out?m; },
 response -> response_q { guard 5 != 13; sync ch_5_13_out?m; },
 response -> response_q { guard 6 != 13; sync ch_6_13_out?m; },
 response -> response_q { guard 7 != 13; sync ch_7_13_out?m; },
 response -> response_q { guard 8 != 13; sync ch_8_13_out?m; },
 response -> response_q { guard 9 != 13; sync ch_9_13_out?m; },
 response -> response_q { guard 10 != 13; sync ch_10_13_out?m; },
 response -> response_q { guard 11 != 13; sync ch_11_13_out?m; },
 response -> response_q { guard 12 != 13; sync ch_12_13_out?m; },
 response -> response_q { guard 13 != 13; sync ch_13_13_out?m; },
 response -> response_q { guard 14 != 13; sync ch_14_13_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_13_0_in!(3*15+13); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_13_1_in!(3*15+13); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_13_2_in!(3*15+13); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_13_3_in!(3*15+13); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_13_4_in!(3*15+13); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_13_5_in!(3*15+13); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_13_6_in!(3*15+13); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_13_7_in!(3*15+13); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_13_8_in!(3*15+13); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_13_9_in!(3*15+13); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_13_10_in!(3*15+13); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_13_11_in!(3*15+13); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_13_12_in!(3*15+13); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_13_13_in!(3*15+13); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_13_14_in!(3*15+13); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_13_0_in!(1*15+13); },
 winner -> response { guard 1 == m%15; sync ch_13_1_in!(1*15+13); },
 winner -> response { guard 2 == m%15; sync ch_13_2_in!(1*15+13); },
 winner -> response { guard 3 == m%15; sync ch_13_3_in!(1*15+13); },
 winner -> response { guard 4 == m%15; sync ch_13_4_in!(1*15+13); },
 winner -> response { guard 5 == m%15; sync ch_13_5_in!(1*15+13); },
 winner -> response { guard 6 == m%15; sync ch_13_6_in!(1*15+13); },
 winner -> response { guard 7 == m%15; sync ch_13_7_in!(1*15+13); },
 winner -> response { guard 8 == m%15; sync ch_13_8_in!(1*15+13); },
 winner -> response { guard 9 == m%15; sync ch_13_9_in!(1*15+13); },
 winner -> response { guard 10 == m%15; sync ch_13_10_in!(1*15+13); },
 winner -> response { guard 11 == m%15; sync ch_13_11_in!(1*15+13); },
 winner -> response { guard 12 == m%15; sync ch_13_12_in!(1*15+13); },
 winner -> response { guard 13 == m%15; sync ch_13_13_in!(1*15+13); },
 winner -> response { guard 14 == m%15; sync ch_13_14_in!(1*15+13); },

 loser -> loser_q { guard 0 != 13; sync ch_0_13_out?m; },
loser -> loser_q { guard 1 != 13; sync ch_1_13_out?m; },
loser -> loser_q { guard 2 != 13; sync ch_2_13_out?m; },
loser -> loser_q { guard 3 != 13; sync ch_3_13_out?m; },
loser -> loser_q { guard 4 != 13; sync ch_4_13_out?m; },
loser -> loser_q { guard 5 != 13; sync ch_5_13_out?m; },
loser -> loser_q { guard 6 != 13; sync ch_6_13_out?m; },
loser -> loser_q { guard 7 != 13; sync ch_7_13_out?m; },
loser -> loser_q { guard 8 != 13; sync ch_8_13_out?m; },
loser -> loser_q { guard 9 != 13; sync ch_9_13_out?m; },
loser -> loser_q { guard 10 != 13; sync ch_10_13_out?m; },
loser -> loser_q { guard 11 != 13; sync ch_11_13_out?m; },
loser -> loser_q { guard 12 != 13; sync ch_12_13_out?m; },
loser -> loser_q { guard 13 != 13; sync ch_13_13_out?m; },
loser -> loser_q { guard 14 != 13; sync ch_14_13_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}
process Node_14 {
byte received[15];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+3)];
	effect j = 3; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+4)];
	effect j = 4; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+5)];
	effect j = 5; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+6)];
	effect j = 6; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+7)];
	effect j = 7; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+8)];
	effect j = 8; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+9)];
	effect j = 9; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+10)];
	effect j = 10; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+11)];
	effect j = 11; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+12)];
	effect j = 12; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+13)];
	effect j = 13; },
start -> found_partner {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) == 1 && connected[(14*15+14)];
	effect j = 14; },

 start -> wait_for_request {
	guard (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] ) > 1;
	effect n = (connected[(14*15+0)] +connected[(14*15+1)] +connected[(14*15+2)] +connected[(14*15+3)] +connected[(14*15+4)] +connected[(14*15+5)] +connected[(14*15+6)] +connected[(14*15+7)] +connected[(14*15+8)] +connected[(14*15+9)] +connected[(14*15+10)] +connected[(14*15+11)] +connected[(14*15+12)] +connected[(14*15+13)] +connected[(14*15+14)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 14; sync ch_0_14_out?m; },
 wait_for_request -> wait_q { guard 1 != 14; sync ch_1_14_out?m; },
 wait_for_request -> wait_q { guard 2 != 14; sync ch_2_14_out?m; },
 wait_for_request -> wait_q { guard 3 != 14; sync ch_3_14_out?m; },
 wait_for_request -> wait_q { guard 4 != 14; sync ch_4_14_out?m; },
 wait_for_request -> wait_q { guard 5 != 14; sync ch_5_14_out?m; },
 wait_for_request -> wait_q { guard 6 != 14; sync ch_6_14_out?m; },
 wait_for_request -> wait_q { guard 7 != 14; sync ch_7_14_out?m; },
 wait_for_request -> wait_q { guard 8 != 14; sync ch_8_14_out?m; },
 wait_for_request -> wait_q { guard 9 != 14; sync ch_9_14_out?m; },
 wait_for_request -> wait_q { guard 10 != 14; sync ch_10_14_out?m; },
 wait_for_request -> wait_q { guard 11 != 14; sync ch_11_14_out?m; },
 wait_for_request -> wait_q { guard 12 != 14; sync ch_12_14_out?m; },
 wait_for_request -> wait_q { guard 13 != 14; sync ch_13_14_out?m; },
 wait_for_request -> wait_q { guard 14 != 14; sync ch_14_14_out?m; },

 wait_q -> error_st {
	guard m/15 != 1 || (not connected[(14*15+m%15)]) || received[m%15] == 1;
 },
 wait_q -> wait_for_request {
	guard m/15 == 1 && connected[(14*15+m%15)] && received[m%15] == 0;
	effect received[m%15] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<15 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_14_0_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_14_1_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_14_2_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_14_3_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 4 == j && received[j];
	sync ch_14_4_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 5 == j && received[j];
	sync ch_14_5_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 6 == j && received[j];
	sync ch_14_6_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 7 == j && received[j];
	sync ch_14_7_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 8 == j && received[j];
	sync ch_14_8_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 9 == j && received[j];
	sync ch_14_9_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 10 == j && received[j];
	sync ch_14_10_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 11 == j && received[j];
	sync ch_14_11_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 12 == j && received[j];
	sync ch_14_12_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 13 == j && received[j];
	sync ch_14_13_in!(2*15+14);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 14 == j && received[j];
	sync ch_14_14_in!(2*15+14);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 15; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+0)] && (received[0] == 0);
	sync ch_14_0_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+1)] && (received[1] == 0);
	sync ch_14_1_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+2)] && (received[2] == 0);
	sync ch_14_2_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+3)] && (received[3] == 0);
	sync ch_14_3_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+4)] && (received[4] == 0);
	sync ch_14_4_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+5)] && (received[5] == 0);
	sync ch_14_5_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+6)] && (received[6] == 0);
	sync ch_14_6_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+7)] && (received[7] == 0);
	sync ch_14_7_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+8)] && (received[8] == 0);
	sync ch_14_8_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+9)] && (received[9] == 0);
	sync ch_14_9_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+10)] && (received[10] == 0);
	sync ch_14_10_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+11)] && (received[11] == 0);
	sync ch_14_11_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+12)] && (received[12] == 0);
	sync ch_14_12_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+13)] && (received[13] == 0);
	sync ch_14_13_in!(1*15+14);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 15 && connected[(14*15+14)] && (received[14] == 0);
	sync ch_14_14_in!(1*15+14);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 14 and received[0] == 1; sync ch_0_14_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 14 and received[1] == 1; sync ch_1_14_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 14 and received[2] == 1; sync ch_2_14_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 14 and received[3] == 1; sync ch_3_14_out?m; },
wait_for_acks -> wait_ack_q { guard 4 != 14 and received[4] == 1; sync ch_4_14_out?m; },
wait_for_acks -> wait_ack_q { guard 5 != 14 and received[5] == 1; sync ch_5_14_out?m; },
wait_for_acks -> wait_ack_q { guard 6 != 14 and received[6] == 1; sync ch_6_14_out?m; },
wait_for_acks -> wait_ack_q { guard 7 != 14 and received[7] == 1; sync ch_7_14_out?m; },
wait_for_acks -> wait_ack_q { guard 8 != 14 and received[8] == 1; sync ch_8_14_out?m; },
wait_for_acks -> wait_ack_q { guard 9 != 14 and received[9] == 1; sync ch_9_14_out?m; },
wait_for_acks -> wait_ack_q { guard 10 != 14 and received[10] == 1; sync ch_10_14_out?m; },
wait_for_acks -> wait_ack_q { guard 11 != 14 and received[11] == 1; sync ch_11_14_out?m; },
wait_for_acks -> wait_ack_q { guard 12 != 14 and received[12] == 1; sync ch_12_14_out?m; },
wait_for_acks -> wait_ack_q { guard 13 != 14 and received[13] == 1; sync ch_13_14_out?m; },
wait_for_acks -> wait_ack_q { guard 14 != 14 and received[14] == 1; sync ch_14_14_out?m; },

 wait_ack_q -> error_st { guard m/15 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/15 == 3; effect received[m%15] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3] +received[4] +received[5] +received[6] +received[7] +received[8] +received[9] +received[10] +received[11] +received[12] +received[13] +received[14]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 14, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_14_0_in!(1*15+14);},
found_partner -> response { guard 1 == j; sync ch_14_1_in!(1*15+14);},
found_partner -> response { guard 2 == j; sync ch_14_2_in!(1*15+14);},
found_partner -> response { guard 3 == j; sync ch_14_3_in!(1*15+14);},
found_partner -> response { guard 4 == j; sync ch_14_4_in!(1*15+14);},
found_partner -> response { guard 5 == j; sync ch_14_5_in!(1*15+14);},
found_partner -> response { guard 6 == j; sync ch_14_6_in!(1*15+14);},
found_partner -> response { guard 7 == j; sync ch_14_7_in!(1*15+14);},
found_partner -> response { guard 8 == j; sync ch_14_8_in!(1*15+14);},
found_partner -> response { guard 9 == j; sync ch_14_9_in!(1*15+14);},
found_partner -> response { guard 10 == j; sync ch_14_10_in!(1*15+14);},
found_partner -> response { guard 11 == j; sync ch_14_11_in!(1*15+14);},
found_partner -> response { guard 12 == j; sync ch_14_12_in!(1*15+14);},
found_partner -> response { guard 13 == j; sync ch_14_13_in!(1*15+14);},
found_partner -> response { guard 14 == j; sync ch_14_14_in!(1*15+14);},

 found_partner -> found_q { guard 0 != 14; sync ch_0_14_out?m; },
found_partner -> found_q { guard 1 != 14; sync ch_1_14_out?m; },
found_partner -> found_q { guard 2 != 14; sync ch_2_14_out?m; },
found_partner -> found_q { guard 3 != 14; sync ch_3_14_out?m; },
found_partner -> found_q { guard 4 != 14; sync ch_4_14_out?m; },
found_partner -> found_q { guard 5 != 14; sync ch_5_14_out?m; },
found_partner -> found_q { guard 6 != 14; sync ch_6_14_out?m; },
found_partner -> found_q { guard 7 != 14; sync ch_7_14_out?m; },
found_partner -> found_q { guard 8 != 14; sync ch_8_14_out?m; },
found_partner -> found_q { guard 9 != 14; sync ch_9_14_out?m; },
found_partner -> found_q { guard 10 != 14; sync ch_10_14_out?m; },
found_partner -> found_q { guard 11 != 14; sync ch_11_14_out?m; },
found_partner -> found_q { guard 12 != 14; sync ch_12_14_out?m; },
found_partner -> found_q { guard 13 != 14; sync ch_13_14_out?m; },
found_partner -> found_q { guard 14 != 14; sync ch_14_14_out?m; },

 found_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1;},
 found_q -> error_st { guard m/15 != 1; },

 // response
  response -> response_q { guard 0 != 14; sync ch_0_14_out?m; },
 response -> response_q { guard 1 != 14; sync ch_1_14_out?m; },
 response -> response_q { guard 2 != 14; sync ch_2_14_out?m; },
 response -> response_q { guard 3 != 14; sync ch_3_14_out?m; },
 response -> response_q { guard 4 != 14; sync ch_4_14_out?m; },
 response -> response_q { guard 5 != 14; sync ch_5_14_out?m; },
 response -> response_q { guard 6 != 14; sync ch_6_14_out?m; },
 response -> response_q { guard 7 != 14; sync ch_7_14_out?m; },
 response -> response_q { guard 8 != 14; sync ch_8_14_out?m; },
 response -> response_q { guard 9 != 14; sync ch_9_14_out?m; },
 response -> response_q { guard 10 != 14; sync ch_10_14_out?m; },
 response -> response_q { guard 11 != 14; sync ch_11_14_out?m; },
 response -> response_q { guard 12 != 14; sync ch_12_14_out?m; },
 response -> response_q { guard 13 != 14; sync ch_13_14_out?m; },
 response -> response_q { guard 14 != 14; sync ch_14_14_out?m; },

 response_q -> become_child { guard m/15 == 2; },
  become_child -> finish {
	guard 0 == m%15;
	sync ch_14_0_in!(3*15+14); },
 become_child -> finish {
	guard 1 == m%15;
	sync ch_14_1_in!(3*15+14); },
 become_child -> finish {
	guard 2 == m%15;
	sync ch_14_2_in!(3*15+14); },
 become_child -> finish {
	guard 3 == m%15;
	sync ch_14_3_in!(3*15+14); },
 become_child -> finish {
	guard 4 == m%15;
	sync ch_14_4_in!(3*15+14); },
 become_child -> finish {
	guard 5 == m%15;
	sync ch_14_5_in!(3*15+14); },
 become_child -> finish {
	guard 6 == m%15;
	sync ch_14_6_in!(3*15+14); },
 become_child -> finish {
	guard 7 == m%15;
	sync ch_14_7_in!(3*15+14); },
 become_child -> finish {
	guard 8 == m%15;
	sync ch_14_8_in!(3*15+14); },
 become_child -> finish {
	guard 9 == m%15;
	sync ch_14_9_in!(3*15+14); },
 become_child -> finish {
	guard 10 == m%15;
	sync ch_14_10_in!(3*15+14); },
 become_child -> finish {
	guard 11 == m%15;
	sync ch_14_11_in!(3*15+14); },
 become_child -> finish {
	guard 12 == m%15;
	sync ch_14_12_in!(3*15+14); },
 become_child -> finish {
	guard 13 == m%15;
	sync ch_14_13_in!(3*15+14); },
 become_child -> finish {
	guard 14 == m%15;
	sync ch_14_14_in!(3*15+14); },

 response_q -> contention { guard m/15 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%15; sync ch_14_0_in!(1*15+14); },
 winner -> response { guard 1 == m%15; sync ch_14_1_in!(1*15+14); },
 winner -> response { guard 2 == m%15; sync ch_14_2_in!(1*15+14); },
 winner -> response { guard 3 == m%15; sync ch_14_3_in!(1*15+14); },
 winner -> response { guard 4 == m%15; sync ch_14_4_in!(1*15+14); },
 winner -> response { guard 5 == m%15; sync ch_14_5_in!(1*15+14); },
 winner -> response { guard 6 == m%15; sync ch_14_6_in!(1*15+14); },
 winner -> response { guard 7 == m%15; sync ch_14_7_in!(1*15+14); },
 winner -> response { guard 8 == m%15; sync ch_14_8_in!(1*15+14); },
 winner -> response { guard 9 == m%15; sync ch_14_9_in!(1*15+14); },
 winner -> response { guard 10 == m%15; sync ch_14_10_in!(1*15+14); },
 winner -> response { guard 11 == m%15; sync ch_14_11_in!(1*15+14); },
 winner -> response { guard 12 == m%15; sync ch_14_12_in!(1*15+14); },
 winner -> response { guard 13 == m%15; sync ch_14_13_in!(1*15+14); },
 winner -> response { guard 14 == m%15; sync ch_14_14_in!(1*15+14); },

 loser -> loser_q { guard 0 != 14; sync ch_0_14_out?m; },
loser -> loser_q { guard 1 != 14; sync ch_1_14_out?m; },
loser -> loser_q { guard 2 != 14; sync ch_2_14_out?m; },
loser -> loser_q { guard 3 != 14; sync ch_3_14_out?m; },
loser -> loser_q { guard 4 != 14; sync ch_4_14_out?m; },
loser -> loser_q { guard 5 != 14; sync ch_5_14_out?m; },
loser -> loser_q { guard 6 != 14; sync ch_6_14_out?m; },
loser -> loser_q { guard 7 != 14; sync ch_7_14_out?m; },
loser -> loser_q { guard 8 != 14; sync ch_8_14_out?m; },
loser -> loser_q { guard 9 != 14; sync ch_9_14_out?m; },
loser -> loser_q { guard 10 != 14; sync ch_10_14_out?m; },
loser -> loser_q { guard 11 != 14; sync ch_11_14_out?m; },
loser -> loser_q { guard 12 != 14; sync ch_12_14_out?m; },
loser -> loser_q { guard 13 != 14; sync ch_13_14_out?m; },
loser -> loser_q { guard 14 != 14; sync ch_14_14_out?m; },

 loser_q -> child_handshake { guard m/15 == 1; effect received[m%15] = 1, n = 1; };

}



process channel_ch_0_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_0_in?v; },
 tr -> ready { sync ch_0_0_out!v;};
}

process channel_ch_1_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_0_in?v; },
 tr -> ready { sync ch_1_0_out!v;};
}

process channel_ch_2_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_0_in?v; },
 tr -> ready { sync ch_2_0_out!v;};
}

process channel_ch_3_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_0_in?v; },
 tr -> ready { sync ch_3_0_out!v;};
}

process channel_ch_4_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_0_in?v; },
 tr -> ready { sync ch_4_0_out!v;};
}

process channel_ch_5_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_0_in?v; },
 tr -> ready { sync ch_5_0_out!v;};
}

process channel_ch_6_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_0_in?v; },
 tr -> ready { sync ch_6_0_out!v;};
}

process channel_ch_7_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_0_in?v; },
 tr -> ready { sync ch_7_0_out!v;};
}

process channel_ch_8_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_0_in?v; },
 tr -> ready { sync ch_8_0_out!v;};
}

process channel_ch_9_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_0_in?v; },
 tr -> ready { sync ch_9_0_out!v;};
}

process channel_ch_10_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_0_in?v; },
 tr -> ready { sync ch_10_0_out!v;};
}

process channel_ch_11_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_0_in?v; },
 tr -> ready { sync ch_11_0_out!v;};
}

process channel_ch_12_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_0_in?v; },
 tr -> ready { sync ch_12_0_out!v;};
}

process channel_ch_13_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_0_in?v; },
 tr -> ready { sync ch_13_0_out!v;};
}

process channel_ch_14_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_0_in?v; },
 tr -> ready { sync ch_14_0_out!v;};
}

process channel_ch_0_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_1_in?v; },
 tr -> ready { sync ch_0_1_out!v;};
}

process channel_ch_1_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_1_in?v; },
 tr -> ready { sync ch_1_1_out!v;};
}

process channel_ch_2_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_1_in?v; },
 tr -> ready { sync ch_2_1_out!v;};
}

process channel_ch_3_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_1_in?v; },
 tr -> ready { sync ch_3_1_out!v;};
}

process channel_ch_4_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_1_in?v; },
 tr -> ready { sync ch_4_1_out!v;};
}

process channel_ch_5_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_1_in?v; },
 tr -> ready { sync ch_5_1_out!v;};
}

process channel_ch_6_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_1_in?v; },
 tr -> ready { sync ch_6_1_out!v;};
}

process channel_ch_7_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_1_in?v; },
 tr -> ready { sync ch_7_1_out!v;};
}

process channel_ch_8_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_1_in?v; },
 tr -> ready { sync ch_8_1_out!v;};
}

process channel_ch_9_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_1_in?v; },
 tr -> ready { sync ch_9_1_out!v;};
}

process channel_ch_10_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_1_in?v; },
 tr -> ready { sync ch_10_1_out!v;};
}

process channel_ch_11_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_1_in?v; },
 tr -> ready { sync ch_11_1_out!v;};
}

process channel_ch_12_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_1_in?v; },
 tr -> ready { sync ch_12_1_out!v;};
}

process channel_ch_13_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_1_in?v; },
 tr -> ready { sync ch_13_1_out!v;};
}

process channel_ch_14_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_1_in?v; },
 tr -> ready { sync ch_14_1_out!v;};
}

process channel_ch_0_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_2_in?v; },
 tr -> ready { sync ch_0_2_out!v;};
}

process channel_ch_1_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_2_in?v; },
 tr -> ready { sync ch_1_2_out!v;};
}

process channel_ch_2_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_2_in?v; },
 tr -> ready { sync ch_2_2_out!v;};
}

process channel_ch_3_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_2_in?v; },
 tr -> ready { sync ch_3_2_out!v;};
}

process channel_ch_4_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_2_in?v; },
 tr -> ready { sync ch_4_2_out!v;};
}

process channel_ch_5_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_2_in?v; },
 tr -> ready { sync ch_5_2_out!v;};
}

process channel_ch_6_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_2_in?v; },
 tr -> ready { sync ch_6_2_out!v;};
}

process channel_ch_7_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_2_in?v; },
 tr -> ready { sync ch_7_2_out!v;};
}

process channel_ch_8_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_2_in?v; },
 tr -> ready { sync ch_8_2_out!v;};
}

process channel_ch_9_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_2_in?v; },
 tr -> ready { sync ch_9_2_out!v;};
}

process channel_ch_10_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_2_in?v; },
 tr -> ready { sync ch_10_2_out!v;};
}

process channel_ch_11_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_2_in?v; },
 tr -> ready { sync ch_11_2_out!v;};
}

process channel_ch_12_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_2_in?v; },
 tr -> ready { sync ch_12_2_out!v;};
}

process channel_ch_13_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_2_in?v; },
 tr -> ready { sync ch_13_2_out!v;};
}

process channel_ch_14_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_2_in?v; },
 tr -> ready { sync ch_14_2_out!v;};
}

process channel_ch_0_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_3_in?v; },
 tr -> ready { sync ch_0_3_out!v;};
}

process channel_ch_1_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_3_in?v; },
 tr -> ready { sync ch_1_3_out!v;};
}

process channel_ch_2_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_3_in?v; },
 tr -> ready { sync ch_2_3_out!v;};
}

process channel_ch_3_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_3_in?v; },
 tr -> ready { sync ch_3_3_out!v;};
}

process channel_ch_4_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_3_in?v; },
 tr -> ready { sync ch_4_3_out!v;};
}

process channel_ch_5_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_3_in?v; },
 tr -> ready { sync ch_5_3_out!v;};
}

process channel_ch_6_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_3_in?v; },
 tr -> ready { sync ch_6_3_out!v;};
}

process channel_ch_7_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_3_in?v; },
 tr -> ready { sync ch_7_3_out!v;};
}

process channel_ch_8_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_3_in?v; },
 tr -> ready { sync ch_8_3_out!v;};
}

process channel_ch_9_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_3_in?v; },
 tr -> ready { sync ch_9_3_out!v;};
}

process channel_ch_10_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_3_in?v; },
 tr -> ready { sync ch_10_3_out!v;};
}

process channel_ch_11_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_3_in?v; },
 tr -> ready { sync ch_11_3_out!v;};
}

process channel_ch_12_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_3_in?v; },
 tr -> ready { sync ch_12_3_out!v;};
}

process channel_ch_13_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_3_in?v; },
 tr -> ready { sync ch_13_3_out!v;};
}

process channel_ch_14_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_3_in?v; },
 tr -> ready { sync ch_14_3_out!v;};
}

process channel_ch_0_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_4_in?v; },
 tr -> ready { sync ch_0_4_out!v;};
}

process channel_ch_1_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_4_in?v; },
 tr -> ready { sync ch_1_4_out!v;};
}

process channel_ch_2_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_4_in?v; },
 tr -> ready { sync ch_2_4_out!v;};
}

process channel_ch_3_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_4_in?v; },
 tr -> ready { sync ch_3_4_out!v;};
}

process channel_ch_4_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_4_in?v; },
 tr -> ready { sync ch_4_4_out!v;};
}

process channel_ch_5_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_4_in?v; },
 tr -> ready { sync ch_5_4_out!v;};
}

process channel_ch_6_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_4_in?v; },
 tr -> ready { sync ch_6_4_out!v;};
}

process channel_ch_7_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_4_in?v; },
 tr -> ready { sync ch_7_4_out!v;};
}

process channel_ch_8_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_4_in?v; },
 tr -> ready { sync ch_8_4_out!v;};
}

process channel_ch_9_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_4_in?v; },
 tr -> ready { sync ch_9_4_out!v;};
}

process channel_ch_10_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_4_in?v; },
 tr -> ready { sync ch_10_4_out!v;};
}

process channel_ch_11_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_4_in?v; },
 tr -> ready { sync ch_11_4_out!v;};
}

process channel_ch_12_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_4_in?v; },
 tr -> ready { sync ch_12_4_out!v;};
}

process channel_ch_13_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_4_in?v; },
 tr -> ready { sync ch_13_4_out!v;};
}

process channel_ch_14_4 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_4_in?v; },
 tr -> ready { sync ch_14_4_out!v;};
}

process channel_ch_0_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_5_in?v; },
 tr -> ready { sync ch_0_5_out!v;};
}

process channel_ch_1_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_5_in?v; },
 tr -> ready { sync ch_1_5_out!v;};
}

process channel_ch_2_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_5_in?v; },
 tr -> ready { sync ch_2_5_out!v;};
}

process channel_ch_3_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_5_in?v; },
 tr -> ready { sync ch_3_5_out!v;};
}

process channel_ch_4_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_5_in?v; },
 tr -> ready { sync ch_4_5_out!v;};
}

process channel_ch_5_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_5_in?v; },
 tr -> ready { sync ch_5_5_out!v;};
}

process channel_ch_6_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_5_in?v; },
 tr -> ready { sync ch_6_5_out!v;};
}

process channel_ch_7_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_5_in?v; },
 tr -> ready { sync ch_7_5_out!v;};
}

process channel_ch_8_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_5_in?v; },
 tr -> ready { sync ch_8_5_out!v;};
}

process channel_ch_9_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_5_in?v; },
 tr -> ready { sync ch_9_5_out!v;};
}

process channel_ch_10_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_5_in?v; },
 tr -> ready { sync ch_10_5_out!v;};
}

process channel_ch_11_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_5_in?v; },
 tr -> ready { sync ch_11_5_out!v;};
}

process channel_ch_12_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_5_in?v; },
 tr -> ready { sync ch_12_5_out!v;};
}

process channel_ch_13_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_5_in?v; },
 tr -> ready { sync ch_13_5_out!v;};
}

process channel_ch_14_5 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_5_in?v; },
 tr -> ready { sync ch_14_5_out!v;};
}

process channel_ch_0_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_6_in?v; },
 tr -> ready { sync ch_0_6_out!v;};
}

process channel_ch_1_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_6_in?v; },
 tr -> ready { sync ch_1_6_out!v;};
}

process channel_ch_2_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_6_in?v; },
 tr -> ready { sync ch_2_6_out!v;};
}

process channel_ch_3_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_6_in?v; },
 tr -> ready { sync ch_3_6_out!v;};
}

process channel_ch_4_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_6_in?v; },
 tr -> ready { sync ch_4_6_out!v;};
}

process channel_ch_5_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_6_in?v; },
 tr -> ready { sync ch_5_6_out!v;};
}

process channel_ch_6_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_6_in?v; },
 tr -> ready { sync ch_6_6_out!v;};
}

process channel_ch_7_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_6_in?v; },
 tr -> ready { sync ch_7_6_out!v;};
}

process channel_ch_8_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_6_in?v; },
 tr -> ready { sync ch_8_6_out!v;};
}

process channel_ch_9_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_6_in?v; },
 tr -> ready { sync ch_9_6_out!v;};
}

process channel_ch_10_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_6_in?v; },
 tr -> ready { sync ch_10_6_out!v;};
}

process channel_ch_11_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_6_in?v; },
 tr -> ready { sync ch_11_6_out!v;};
}

process channel_ch_12_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_6_in?v; },
 tr -> ready { sync ch_12_6_out!v;};
}

process channel_ch_13_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_6_in?v; },
 tr -> ready { sync ch_13_6_out!v;};
}

process channel_ch_14_6 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_6_in?v; },
 tr -> ready { sync ch_14_6_out!v;};
}

process channel_ch_0_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_7_in?v; },
 tr -> ready { sync ch_0_7_out!v;};
}

process channel_ch_1_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_7_in?v; },
 tr -> ready { sync ch_1_7_out!v;};
}

process channel_ch_2_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_7_in?v; },
 tr -> ready { sync ch_2_7_out!v;};
}

process channel_ch_3_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_7_in?v; },
 tr -> ready { sync ch_3_7_out!v;};
}

process channel_ch_4_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_7_in?v; },
 tr -> ready { sync ch_4_7_out!v;};
}

process channel_ch_5_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_7_in?v; },
 tr -> ready { sync ch_5_7_out!v;};
}

process channel_ch_6_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_7_in?v; },
 tr -> ready { sync ch_6_7_out!v;};
}

process channel_ch_7_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_7_in?v; },
 tr -> ready { sync ch_7_7_out!v;};
}

process channel_ch_8_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_7_in?v; },
 tr -> ready { sync ch_8_7_out!v;};
}

process channel_ch_9_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_7_in?v; },
 tr -> ready { sync ch_9_7_out!v;};
}

process channel_ch_10_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_7_in?v; },
 tr -> ready { sync ch_10_7_out!v;};
}

process channel_ch_11_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_7_in?v; },
 tr -> ready { sync ch_11_7_out!v;};
}

process channel_ch_12_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_7_in?v; },
 tr -> ready { sync ch_12_7_out!v;};
}

process channel_ch_13_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_7_in?v; },
 tr -> ready { sync ch_13_7_out!v;};
}

process channel_ch_14_7 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_7_in?v; },
 tr -> ready { sync ch_14_7_out!v;};
}

process channel_ch_0_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_8_in?v; },
 tr -> ready { sync ch_0_8_out!v;};
}

process channel_ch_1_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_8_in?v; },
 tr -> ready { sync ch_1_8_out!v;};
}

process channel_ch_2_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_8_in?v; },
 tr -> ready { sync ch_2_8_out!v;};
}

process channel_ch_3_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_8_in?v; },
 tr -> ready { sync ch_3_8_out!v;};
}

process channel_ch_4_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_8_in?v; },
 tr -> ready { sync ch_4_8_out!v;};
}

process channel_ch_5_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_8_in?v; },
 tr -> ready { sync ch_5_8_out!v;};
}

process channel_ch_6_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_8_in?v; },
 tr -> ready { sync ch_6_8_out!v;};
}

process channel_ch_7_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_8_in?v; },
 tr -> ready { sync ch_7_8_out!v;};
}

process channel_ch_8_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_8_in?v; },
 tr -> ready { sync ch_8_8_out!v;};
}

process channel_ch_9_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_8_in?v; },
 tr -> ready { sync ch_9_8_out!v;};
}

process channel_ch_10_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_8_in?v; },
 tr -> ready { sync ch_10_8_out!v;};
}

process channel_ch_11_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_8_in?v; },
 tr -> ready { sync ch_11_8_out!v;};
}

process channel_ch_12_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_8_in?v; },
 tr -> ready { sync ch_12_8_out!v;};
}

process channel_ch_13_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_8_in?v; },
 tr -> ready { sync ch_13_8_out!v;};
}

process channel_ch_14_8 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_8_in?v; },
 tr -> ready { sync ch_14_8_out!v;};
}

process channel_ch_0_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_9_in?v; },
 tr -> ready { sync ch_0_9_out!v;};
}

process channel_ch_1_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_9_in?v; },
 tr -> ready { sync ch_1_9_out!v;};
}

process channel_ch_2_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_9_in?v; },
 tr -> ready { sync ch_2_9_out!v;};
}

process channel_ch_3_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_9_in?v; },
 tr -> ready { sync ch_3_9_out!v;};
}

process channel_ch_4_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_9_in?v; },
 tr -> ready { sync ch_4_9_out!v;};
}

process channel_ch_5_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_9_in?v; },
 tr -> ready { sync ch_5_9_out!v;};
}

process channel_ch_6_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_9_in?v; },
 tr -> ready { sync ch_6_9_out!v;};
}

process channel_ch_7_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_9_in?v; },
 tr -> ready { sync ch_7_9_out!v;};
}

process channel_ch_8_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_9_in?v; },
 tr -> ready { sync ch_8_9_out!v;};
}

process channel_ch_9_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_9_in?v; },
 tr -> ready { sync ch_9_9_out!v;};
}

process channel_ch_10_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_9_in?v; },
 tr -> ready { sync ch_10_9_out!v;};
}

process channel_ch_11_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_9_in?v; },
 tr -> ready { sync ch_11_9_out!v;};
}

process channel_ch_12_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_9_in?v; },
 tr -> ready { sync ch_12_9_out!v;};
}

process channel_ch_13_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_9_in?v; },
 tr -> ready { sync ch_13_9_out!v;};
}

process channel_ch_14_9 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_9_in?v; },
 tr -> ready { sync ch_14_9_out!v;};
}

process channel_ch_0_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_10_in?v; },
 tr -> ready { sync ch_0_10_out!v;};
}

process channel_ch_1_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_10_in?v; },
 tr -> ready { sync ch_1_10_out!v;};
}

process channel_ch_2_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_10_in?v; },
 tr -> ready { sync ch_2_10_out!v;};
}

process channel_ch_3_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_10_in?v; },
 tr -> ready { sync ch_3_10_out!v;};
}

process channel_ch_4_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_10_in?v; },
 tr -> ready { sync ch_4_10_out!v;};
}

process channel_ch_5_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_10_in?v; },
 tr -> ready { sync ch_5_10_out!v;};
}

process channel_ch_6_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_10_in?v; },
 tr -> ready { sync ch_6_10_out!v;};
}

process channel_ch_7_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_10_in?v; },
 tr -> ready { sync ch_7_10_out!v;};
}

process channel_ch_8_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_10_in?v; },
 tr -> ready { sync ch_8_10_out!v;};
}

process channel_ch_9_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_10_in?v; },
 tr -> ready { sync ch_9_10_out!v;};
}

process channel_ch_10_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_10_in?v; },
 tr -> ready { sync ch_10_10_out!v;};
}

process channel_ch_11_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_10_in?v; },
 tr -> ready { sync ch_11_10_out!v;};
}

process channel_ch_12_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_10_in?v; },
 tr -> ready { sync ch_12_10_out!v;};
}

process channel_ch_13_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_10_in?v; },
 tr -> ready { sync ch_13_10_out!v;};
}

process channel_ch_14_10 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_10_in?v; },
 tr -> ready { sync ch_14_10_out!v;};
}

process channel_ch_0_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_11_in?v; },
 tr -> ready { sync ch_0_11_out!v;};
}

process channel_ch_1_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_11_in?v; },
 tr -> ready { sync ch_1_11_out!v;};
}

process channel_ch_2_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_11_in?v; },
 tr -> ready { sync ch_2_11_out!v;};
}

process channel_ch_3_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_11_in?v; },
 tr -> ready { sync ch_3_11_out!v;};
}

process channel_ch_4_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_11_in?v; },
 tr -> ready { sync ch_4_11_out!v;};
}

process channel_ch_5_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_11_in?v; },
 tr -> ready { sync ch_5_11_out!v;};
}

process channel_ch_6_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_11_in?v; },
 tr -> ready { sync ch_6_11_out!v;};
}

process channel_ch_7_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_11_in?v; },
 tr -> ready { sync ch_7_11_out!v;};
}

process channel_ch_8_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_11_in?v; },
 tr -> ready { sync ch_8_11_out!v;};
}

process channel_ch_9_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_11_in?v; },
 tr -> ready { sync ch_9_11_out!v;};
}

process channel_ch_10_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_11_in?v; },
 tr -> ready { sync ch_10_11_out!v;};
}

process channel_ch_11_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_11_in?v; },
 tr -> ready { sync ch_11_11_out!v;};
}

process channel_ch_12_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_11_in?v; },
 tr -> ready { sync ch_12_11_out!v;};
}

process channel_ch_13_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_11_in?v; },
 tr -> ready { sync ch_13_11_out!v;};
}

process channel_ch_14_11 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_11_in?v; },
 tr -> ready { sync ch_14_11_out!v;};
}

process channel_ch_0_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_12_in?v; },
 tr -> ready { sync ch_0_12_out!v;};
}

process channel_ch_1_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_12_in?v; },
 tr -> ready { sync ch_1_12_out!v;};
}

process channel_ch_2_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_12_in?v; },
 tr -> ready { sync ch_2_12_out!v;};
}

process channel_ch_3_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_12_in?v; },
 tr -> ready { sync ch_3_12_out!v;};
}

process channel_ch_4_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_12_in?v; },
 tr -> ready { sync ch_4_12_out!v;};
}

process channel_ch_5_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_12_in?v; },
 tr -> ready { sync ch_5_12_out!v;};
}

process channel_ch_6_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_12_in?v; },
 tr -> ready { sync ch_6_12_out!v;};
}

process channel_ch_7_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_12_in?v; },
 tr -> ready { sync ch_7_12_out!v;};
}

process channel_ch_8_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_12_in?v; },
 tr -> ready { sync ch_8_12_out!v;};
}

process channel_ch_9_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_12_in?v; },
 tr -> ready { sync ch_9_12_out!v;};
}

process channel_ch_10_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_12_in?v; },
 tr -> ready { sync ch_10_12_out!v;};
}

process channel_ch_11_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_12_in?v; },
 tr -> ready { sync ch_11_12_out!v;};
}

process channel_ch_12_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_12_in?v; },
 tr -> ready { sync ch_12_12_out!v;};
}

process channel_ch_13_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_12_in?v; },
 tr -> ready { sync ch_13_12_out!v;};
}

process channel_ch_14_12 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_12_in?v; },
 tr -> ready { sync ch_14_12_out!v;};
}

process channel_ch_0_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_13_in?v; },
 tr -> ready { sync ch_0_13_out!v;};
}

process channel_ch_1_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_13_in?v; },
 tr -> ready { sync ch_1_13_out!v;};
}

process channel_ch_2_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_13_in?v; },
 tr -> ready { sync ch_2_13_out!v;};
}

process channel_ch_3_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_13_in?v; },
 tr -> ready { sync ch_3_13_out!v;};
}

process channel_ch_4_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_13_in?v; },
 tr -> ready { sync ch_4_13_out!v;};
}

process channel_ch_5_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_13_in?v; },
 tr -> ready { sync ch_5_13_out!v;};
}

process channel_ch_6_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_13_in?v; },
 tr -> ready { sync ch_6_13_out!v;};
}

process channel_ch_7_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_13_in?v; },
 tr -> ready { sync ch_7_13_out!v;};
}

process channel_ch_8_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_13_in?v; },
 tr -> ready { sync ch_8_13_out!v;};
}

process channel_ch_9_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_13_in?v; },
 tr -> ready { sync ch_9_13_out!v;};
}

process channel_ch_10_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_13_in?v; },
 tr -> ready { sync ch_10_13_out!v;};
}

process channel_ch_11_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_13_in?v; },
 tr -> ready { sync ch_11_13_out!v;};
}

process channel_ch_12_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_13_in?v; },
 tr -> ready { sync ch_12_13_out!v;};
}

process channel_ch_13_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_13_in?v; },
 tr -> ready { sync ch_13_13_out!v;};
}

process channel_ch_14_13 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_13_in?v; },
 tr -> ready { sync ch_14_13_out!v;};
}

process channel_ch_0_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_14_in?v; },
 tr -> ready { sync ch_0_14_out!v;};
}

process channel_ch_1_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_14_in?v; },
 tr -> ready { sync ch_1_14_out!v;};
}

process channel_ch_2_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_14_in?v; },
 tr -> ready { sync ch_2_14_out!v;};
}

process channel_ch_3_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_14_in?v; },
 tr -> ready { sync ch_3_14_out!v;};
}

process channel_ch_4_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_4_14_in?v; },
 tr -> ready { sync ch_4_14_out!v;};
}

process channel_ch_5_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_5_14_in?v; },
 tr -> ready { sync ch_5_14_out!v;};
}

process channel_ch_6_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_6_14_in?v; },
 tr -> ready { sync ch_6_14_out!v;};
}

process channel_ch_7_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_7_14_in?v; },
 tr -> ready { sync ch_7_14_out!v;};
}

process channel_ch_8_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_8_14_in?v; },
 tr -> ready { sync ch_8_14_out!v;};
}

process channel_ch_9_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_9_14_in?v; },
 tr -> ready { sync ch_9_14_out!v;};
}

process channel_ch_10_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_10_14_in?v; },
 tr -> ready { sync ch_10_14_out!v;};
}

process channel_ch_11_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_11_14_in?v; },
 tr -> ready { sync ch_11_14_out!v;};
}

process channel_ch_12_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_12_14_in?v; },
 tr -> ready { sync ch_12_14_out!v;};
}

process channel_ch_13_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_13_14_in?v; },
 tr -> ready { sync ch_13_14_out!v;};
}

process channel_ch_14_14 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_14_14_in?v; },
 tr -> ready { sync ch_14_14_out!v;};
}
system async;
