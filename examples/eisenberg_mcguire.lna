/******************************************************************************
*
*  Example file of the Helena distribution
*
*  File  : eisenberg.lna
*  Author: Sami Evangelista
*  Date  : 09 mar. 2004
*
*  The net described in this file models the solution to the mutual
*  exclusion problem for N process given by Eisenberg and McGuire. A
*  detailed explanation of the protocol can be found at the following
*  URL :
*  http://www.cs.wvu.edu/~jdm/classes/cs356/notes/mutex/Eisenberg.html
*
*
*  The pseudo code of the algorithm is the following :
*
*  ---  variables  ---
*  constant int N = 4;
*  shared enum states {IDLE, WAITING, ACTIVE} flags[n -1];
*  shared int turn;
*  int i; //  not shared
*
*  --  initialization  --
*  ...
*  turn = 0;
*  ...
*  for (i=0; i<n; i++)
*  {
*    flags[i] = IDLE;
*  }
*
*  ---  code for a process p (p in [0..N-1])  ---
*  01 loop {
*  02   repeat {
*  03     // announce that we need the resource
*  04     flags[p] = WAITING;
*  05     //  scan processes from the one with the turn up to ourselves.
*  06     //  repeat if necessary until the scan finds all processes idle
*  07     i = turn;
*  08     while(i != p) {
*  09       if(flag[i] != IDLE)
*  10         i = turn;
*  11       else
*  12         i = i + 1 mod N;
*  13     }
*  14     //  now tentatively claim the resource
*  15     flags[p] = ACTIVE;
*  16     //  find the first active process besides ourselves, if any
*  17     i = 0;
*  18     while (i < n and (i == p or flags[i] != ACTIVE)) {
*  19       i = i + 1;
*  20     }
*  21     //  if there were no other active processes, AND if we have the
*  22     //  turn or else whoever has it is idle, then proceed.
*  23     //  Otherwise, repeat the whole sequence.
*  24   }
*  25   until (i >= n and (turn == p or flags[turn] == IDLE));
*  26   //  claim the turn and proceed
*  27   turn = p;
*  28   //  critical section
*  29   ...
*  30   //  find a process which is not IDLE
*  31   //  (if there are no others, we will find ourselves)
*  32   i = turn + 1 mod n;
*  33   while (flags[i] = IDLE) {
*  34     i = i + 1 mod n;
*  35   }
*  36   //  give the turn to someone that needs it, or keep it
*  37   turn = i;
*  38   //  we're finished now
*  39   flag[p] = IDLE;
*  40 }
*
******************************************************************************/


eisenberg_mcguire (N := 3) {  /*  N = number of processes  */

   type pid : mod N;
   type index : range 0 .. N;
   type proc_state : enum (IDLE, WAITING, ACTIVE);

   /*
    *  place definition
    *  each place which models the state of a process (except place
    *  idle) has name pXX where XX is the line of the statement
    *  currently executed by the process.
    *  Shared variables are translated into places. Local variable
    *  i is translated into an additional element in the token of a
    *  process.
    */
   place idle
   {
      dom  : pid * index;
      init : for(p in pid) <(p,0)>;
   }
   place critical_section
   {
      dom  : pid * index;
   }
   place turn
   {
      dom  : pid;
      init : <(pid'first)>;
   }
   place flag
   {
      dom  : pid * proc_state;
      init : for(p in pid) <(p,IDLE)>;
   }
   place p01 { dom : pid * index; }
   place p04 { dom : pid * index; }
   place p07 { dom : pid * index; }
   place p08 { dom : pid * index; }
   place p09 { dom : pid * index; }
   place p10 { dom : pid * index; }
   place p12 { dom : pid * index; }
   place p15 { dom : pid * index; }
   place p17 { dom : pid * index; }
   place p18 { dom : pid * index; }
   place p19 { dom : pid * index; }
   place p25 { dom : pid * index; }
   place p27 { dom : pid * index; }
   place p32 { dom : pid * index; }
   place p33 { dom : pid * index; }
   place p34 { dom : pid * index; }
   place p37 { dom : pid * index; }
   place p39 { dom : pid * index; }

   /*
    *  transition definition
    *  each transition (except the start transition) is called tXX
    *  where XX is the line of the corresponding statement
    */
   transition start
   {
      in  { idle : <(p, i)>; }
      out { p01 : <(p, i)>;  }
   }
   transition t01
   {
      in  { p01 : <(p, i)>; }
      out { p04 : <(p, i)>; }
   }
   transition t04
   {
      in  { p04 : <(p, i)>; flag : <(p, flag)>; }
      out { p07 : <(p, i)>; flag : <(p, WAITING)>; }
   }
   transition t07
   {
      in  { p07 : <(p, i)>; turn : <(turn)>; }
      out { p08 : <(p, index(turn))>; turn : <(turn)>; }
   }
   transition t08_true
   {
      in  { p08 : <(p, i)>; }
      out { p09 : <(p, i)>; }
      guard : i != index(p);
   }
   transition t08_false
   {
      in  { p08 : <(p, i)>; }
      out { p15 : <(p, i)>; }
      guard : i = index(p);
   }
   transition t09_true
   {
      in  { p09 : <(p, i)>; flag : <(pid(i), flag)>; }
      out { p10 : <(p, i)>; flag : <(pid(i), flag)>; }
      guard : flag != IDLE;
   }
   transition t09_false
   {
      in  { p09 : <(p, i)>; flag : <(pid(i), flag)>; }
      out { p12 : <(p, i)>; flag : <(pid(i), flag)>; }
      guard : flag = IDLE;
   }
   transition t10
   {
      in  { p10 : <(p, i)>; turn : <(turn)>; }
      out { p08 : <(p, index(turn))>; turn : <(turn)>; }
   }
   transition t12
   {
      in  { p12 : <(p, i)>; }
      out { p08 : <(p, (i + 1) % index(N) )>; }
   }
   transition t15
   {
      in  { p15 : <(p, i)>; flag : <(p, flag)>; }
      out { p17 : <(p, i)>; flag : <(p, ACTIVE)>; }
   }
   transition t17
   {
      in  { p17 : <(p, i)>; }
      out { p18 : <(p, 0)>; }
   }
   transition t18_true
   {
      in  { p18 : <(p, i)>; flag : <(j, flag)>; }
      out { p19 : <(p, i)>; flag : <(j, flag)>; }
      guard : i < index(N) and pid(i) = j and (pid(i) = p or flag != ACTIVE);
   }
   transition t18_false1
   {
      in  { p18 : <(p, i)>; }
      out { p25 : <(p, i)>; }
      guard : i = index(N);
   }
   transition t18_false2
   {
      in  { p18 : <(p, i)>; flag : <(j, flag)>; }
      out { p25 : <(p, i)>; flag : <(j, flag)>; }
      guard : i < index(N) and pid(i) = j and pid(i) != p and flag = ACTIVE;
   }
   transition t19
   {
      in  { p19 : <(p, i)>; }
      out { p18 : <(p, i+1)>; }
   }
   transition t25_true
   {
      in  { p25 : <(p, i)>; turn : <(turn)>; flag : <(turn, flag)>; }
      out { p27 : <(p, i)>; turn : <(turn)>; flag : <(turn, flag)>; }
      guard : i >= index(N) and (turn = p or flag = IDLE);
   }
   transition t25_false
   {
      in  { p25 : <(p, i)>; turn : <(turn)>; flag : <(turn, flag)>; }
      out { p04 : <(p, i)>; turn : <(turn)>; flag : <(turn, flag)>; }
      guard : not (i >= index(N) and (turn = p or flag = IDLE));
   }
   transition t27
   {
      in  { p27 : <(p, i)>; turn : <(turn)>; }
      out { critical_section : <(p, i)>; turn : <(p)>; }
   }
   transition leave_critical_section
   {
      in  { critical_section : <(p, i)>; }
      out { p32 : <(p, i)>; }
   }
   transition t32
   {
      in  { p32 : <(p, i)>; turn : <(turn)>; }
      out { p33 : <(p, (index(turn) + 1) % index(N))>; turn : <(turn)>; }
   }
   transition t33_true
   {
      in  { p33 : <(p, i)>; flag : <(pid(i), flag)>; }
      out { p34 : <(p, i)>; flag : <(pid(i), flag)>; }
      guard : flag = IDLE;
   }
   transition t33_false
   {
      in  { p33 : <(p, i)>; flag : <(pid(i), flag)>; }
      out { p37 : <(p, i)>; flag : <(pid(i), flag)>; }
      guard : flag != IDLE;
   }
   transition t37
   {
      in  { p37 : <(p, i)>; turn : <(turn)>; }
      out { p39 : <(p, i)>; turn : <(pid(i))>; }
   }
   transition t39
   {
      in  { p39 : <(p, i)>; flag : <(p, flag)>; }
      out { p01 : <(p, i)>; flag : <(p, IDLE)>; }
   }
}
