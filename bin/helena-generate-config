#!/usr/bin/python
#
#  File: helena-generate-config
#
#  Parse arguments from the command line and generate the appropriate
#  C configuration file.
#

import datetime
from datetime import date
from datetime import datetime
from datetime import time
import os
import re
import socket
import sys
import xml.dom.minidom

VERSION = "2.3"
DATE    = "April 1, 2013"

#  actions
EXPLORE     = "EXPLORE"
SIMULATE    = "SIMULATE"
BUILD_GRAPH = "BUILD-GRAPH"
CHECK       = "CHECK"

#  search algorithms
BFS         = "BFS"
BWALK       = "BWALK"
DBFS        = "DBFS"
DFS         = "DFS"
RWALK       = "RWALK"
DELTA_DDD   = "DELTA-DDD"
TARJAN      = "TARJAN"

#  trace types
FULL        = "FULL"
EVENTS      = "EVENTS"
STATE       = "STATE"

#  property types
LTL         = "LTL"
STATE       = "STATE"
DEADLOCK    = "DEADLOCK"

#  languages
LNA  = "lna"
DVE  = "dve"
PNML = "pnml"

#  options
GENERAL_OPTS = ("General options",
                [ "h", "V", "v", "N", "g", "b", "p", "pf", "md", "wp" ])
SEARCH_OPTS = ("Search and storage options",
               [ "A", "t", "W", "R", "cs" ])
DISTRIBUTED_SEARCH_OPTS = ("Distributed search options",
                           [ "mf", "bs", "np", "DC", "ecs" ])
REDUCTION_OPTS = ("Reduction techniques",
                  [ "H", "P", "i", "C", "cb" ])
LIMIT_OPTS = ("Limit options",
              [ "tl", "sl" ])
MODEL_OPTS = ("Model options",
              [ "d", "a", "r", "L", "m" ])
OUTPUT_OPTS = ("Output options",
               [ "o", "tr" ])
OPTION_TYPES = [
    GENERAL_OPTS,
    SEARCH_OPTS,
    DISTRIBUTED_SEARCH_OPTS,
    REDUCTION_OPTS,
    LIMIT_OPTS,
    MODEL_OPTS,
    OUTPUT_OPTS ]

OPTS = [
    ###########################################################################
    ("A", "algo", str, "DFS", None,
     [ BFS, BWALK, DBFS, DFS, RWALK, DELTA_DDD, TARJAN ], "algo",
     """-A=ALGO          --algo=ALGO

Sets search algorithm used to explore the state space.
Available algorithms are:

* DFS - The state space is explored using a depth-first search.
* BFS - The state space is explored using a breadth-first search.
* DBFS - The state space is explored using a distributed breadth-first search.
* DELTA-DDD - The state space is explored using a parallel breadth-first search
   based on state compression.
* RWALK - A random walk is used.  The principle is to randomly select at each
   state an enabled transition, execute it and reiterate this process.  The
   walk is reinitiated each time a deadlock state is met.  If no limit is
   specified (e.g., option --state-limit) the search will last forever."""),
    ###########################################################################
    ("a", "capacity", int, 1, None, None, "capacity",
     """-a=N             --capacity=N

The default capacity of places is set to N."""),
    ###########################################################################
    ("b", "observer", int, 1, 1, [0, 1], "withObserver",
     """-b[={0|1}]       --observer[={0|1}]

Activate/deactivate the observer thread that prints some progression
informations during the search."""),
    ###########################################################################
    ("bs", "shmem-buffer-size", int, 65000, None, None, "shmemBufferSize",
     """-bs=N            --shmem-buffer-size=N

Set to N bytes the size of the shared memory buffer size used by algorithm
DBFS."""),
    ###########################################################################
    ("cb", "compression-bits", int, 16, None, range(1, 25), "compressionBits",
     """-cb=N            --compression-bits=N

Set the base number of bits used by state compression (option -C) to N."""),
    ###########################################################################
    ("ccs", "compression-comp-sizes", str, "8-16", None, None,
     "compressionCompSizes",
     """-ccs=low-high    --compression-comp-sizes=low-high"""),
    ###########################################################################
    ("cs", "candidate-set-size", int, 100000, None, None, "candidateSetSize",
     """-cs=N            --candidate-set-size=N

Set the candidate set size of algorithm DELTA-DDD.  Increasing it may
consume more memory but can fasten the search."""),
    ###########################################################################
    ("C", "state-compression", int, 0, 1, [0, 1], "stateCompression",
     """-C[={0|1}]       --state-compression[={0|1}]

Activate/deactivate state compression."""),
    ###########################################################################
    ("DC", "distributed-state-compression", int, 0, 1, [ 0, 1 ],
     "distributedStateCompression",
     """-DC[={0|1}]      --distributed-state-compression[={0|1}]

Activate/deactivate state compression based on distributed hash tables."""),
    ###########################################################################
    ("d", "define", list, [], None, None, "defines",
     """-d=SYMBOL-NAME   --define=SYMBOL-NAME

Define preprocessor symbol SYMBOL-NAME in the net."""),
    ###########################################################################
    ("ecs", "exploration-cache-size", int, 0, None, None,
     "explorationCacheSize",
     """-ecs=SIZE        --exploration-cache-size=SIZE

Set the size (in number of states) of the exploration cache used by algorithm
DBFS.  0 = no cache is used."""),
    ###########################################################################
    ("g", "progress", None, None, None, None, None,
     """-g=LEVEL         --progress=LEVEL

LEVEL can take one of these three values:
* no-compile - Helena stops after the generation of source files.
* no-check - Helena launches compilation but does not launches the search.
* no-report - Helena launches the search but does not print any report."""),
    ###########################################################################
    ("H", "hash-compaction", int, 0, 1, [0, 1], "hashCompaction",
     """-H[={0|1}]       --hash-compaction[={0|1}]

Activate/deactivate hash compaction.  Its principle is to only store a
hash signature of each visited state.  In case of hash conflict,
Helena will not necessarily explore the whole state space and may
report that no error has been found whereas one could exist."""),
    ###########################################################################
    ("h", "help", str, None, "", None, "printHelp",
     """-h[=opt]         --help[=opt]

Prints help and exit.  If an option is provided, a specific help
message for this option is printed.  If opt=FULL a detailed help for
all options is printed."""),
    ###########################################################################
    ("i", "proviso", int, 0, 1, [0, 1], "proviso",
     """-i[={0|1}]       --proviso[={0|1}]}

Activate/deactivate the proviso of partial-order reduction.  It is
turned on by default if a property (different from deadlock absence)
is analysed."""),
    ###########################################################################
    ("L", "link", None, None, None, None, None,
     """-L=FILE          --link=FILE

Add file FILE to the files linked by Helena when compiling the net.  Please
consult user guide for further help on this option."""),
    ###########################################################################
    ("md", "model-directory", None, None, None, None, None,
     """-md=DIRECTORY    --model-directory=DIRECTORY

All generated files such as source files are put in directory
DIRECTORY (instead of ~/.helena/models/lna/my-net)."""),
    ###########################################################################
    ("mf", "machine-file", None, None, None, None, None,
     """-mf=FILE         --machine-file=FILE

Provides the machine-file to be passed to MPI for algorithm DBFS."""),
    ###########################################################################
    ("m", "parameter", list, [], None, None, "parameters",
     """-m=PARAM=VAL     --parameter=PARAM=VAL

This gives value VAL (an integer) to net parameter PARAM."""),
    ###########################################################################
    ("N", "action", str, "EXPLORE", None,
     [ EXPLORE, SIMULATE, BUILD_GRAPH, CHECK ], "action",
     """-N=ACTION        --action=ACTION

Indicate the action performed on the model.
Available actions are:
* EXPLORE - Explore the state space of the model and then prints some
   statistics.
* SIMULATE - Start interactive simulation mode.  You can then navigate through
   the reachability graph of the model. A simple command language is provided.
   Once the simulation is started, type help to see the list of commands.
* BUILD-GRAPH - Build the reachability graph of the model using algorithm
   DELTA-DDD (see option algo) and store it on disk.  This graph can then be
   analyzed using the helena-graph tool.
* CHECK - Check property specified by option --property."""),
    ###########################################################################
    ("np", "num-procs", None, None, None, None, None,
     """-np=N            --num-procs=N

Set the number of processes to execute on each node for algorithm DBFS."""),
    ###########################################################################
    ("o", "report-file", None, None, None, None, None,
     """-o=FILE          --report-file=FILE

An XML report file is created by Helena once the search terminated.
It contains some informations such as the result of the search, or
some statistics."""),
    ###########################################################################
    ("P", "partial-order", int, 0, 1, [0, 1], "partialOrder",
     """-P[={0|1}]       --partial-order[={0|1}]}

Activate/deactivate partial-order reduction.  This reduction limits
the exploration of multiple paths that are redundant with respect to
the desired property.  This causes some states to be never explored
during the search.  The reductions done depend on the property
verified.  If there is no property checked, the reduction done only
preserves the existence of deadlock states."""),
    ###########################################################################
    ("p", "property", str, None, None, None, "prop",
     """-p=PROPERTY      --property=PROPERTY

Set the property to check if option --action=CHECK has been set."""),
    ###########################################################################
    ("pf", "property-file", str, None, None, None, "propFile",
     """-pf=FILE         --property-file=FILE

File FILE contains the definition of the property to check (specified with
option --action=CHECK and --property=PROP).  By default, if the input file of
the model is model.lna, Helena will look into model.prop.lna for the property
definition."""),
    ###########################################################################
    ("R", "random-succs", int, 0, 1, [0, 1], "randomSuccs",
     """-R[={0|1}]       --random-succs[={0|1}]

Activate/deactivate randomised successor selection.  This is only valid if
algorithm DFS is used.  This option is useful if the counter-example produced
is too long.  Using randomisation can often produce a smaller
counter-example."""),
    ###########################################################################
    ("r", "run-time-checks", int, 1, 1, [0, 1], "runTimeChecks",
     """-r[={0|1}]       --run-time-checks[={0|1}]

Activate/deactivate run time checks such as: division by 0, expressions out of
range, capacity of places exceeded, ...  If this option is not activated, and
such an error occurs during the analysis, Helena may either crash, either
produce wrong results."""),
    ###########################################################################
    ("sl", "state-limit", int, 0, None, None, "stateLimit",
     """-sl=N            --state-limit=N

As soon as N states have been processed the search is stopped as soon
as possible.  0 = no limit"""),
    ###########################################################################
    ("t", "hash-size", int, 22, None, range(1, 33), "hashSize",
     """-t=N             --hash-size=N

Set to 2^N the size of the hash table which stores the set of
reachable states."""),
    ###########################################################################
    ("tl", "time-limit", int, 0, None, None, "timeLimit",
     """-tl=N            --time-limit=N

The search time is limited to N seconds.  When this limit is reached
the search stops as soon as possible.  0 = no limit"""),
    ###########################################################################
    ("tr", "trace-type", str, FULL, None,
     [ FULL, EVENTS, STATE], "traceType",
     """-tr=TYPE         --trace-type=TYPE

Specify the type of trace (i.e., counter-example) displayed.  TYPE
must take one of these three values:
* FULL - The full trace is displayed.
* EVENTS - Only the sequence of events, the initial and the final faulty states
   are displayed.  Intermediary states are not displayed.
* STATE - Only the faulty state reached is displayed.  No information on how
   this state can be reached is therefore available."""),
    ###########################################################################
    ("v", "verbose", int, 0, 1, [0, 1], "verbose",
     """-v[={0|1}]       --verbose[={0|1}]

Be verbose."""),
    ###########################################################################
    ("V", "version", int, None, 1, [0, 1], "version",
     """-V               --version

Prints the version number and exit."""),
    ###########################################################################
    ("wp", "with-papi", int, 0, 1, [0, 1], "withPapi",
     """-wp[={0|1}]      --with-papi[={0|1}]

Activate/deactivate the use of the PAPI (Performance Application Programming
Interface, see http://icl.utk.edu/papi/) to print additional statistics at the
end of the search."""),
    ###########################################################################
    ("W", "workers", int, 1, None, None, "workers",
     """-W=N             --workers=N

Set to N the number of working threads that will perform the search.""")
]

for o in OPTS:
    assert len(o) == 8

def optShort(opt): return opt[0]
def optLong(opt): return opt[1]
def optType(opt): return opt[2]
def optDefaultValue(opt): return opt[3]
def optDefaultValueCommandLine(opt): return opt[4]
def optAcceptable(opt): return opt[5]
def optConfigAttr(opt): return opt[6]
def optHelp(opt): return opt[7]

def helpMessage(o):
    result = None
    for opt in OPTS:
        if o == optShort(opt) or o == optLong(opt):
            result = optHelp(opt)
            default = optDefaultValue(opt)
            if default is not None:
                result += "\n\n*default value = " + str(default) + "*"
            return result
    raise Exception

def printHelpShort():
    print "usage: helena [options] my-net.lna"
    for title, opts in OPTION_TYPES:
        print "\n", title
        for o in opts:
            for O in OPTS:
                s = optShort(O)
                if s == o:
                    print "   " + optHelp(O).split("\n")[0]

def printHelpMD():
    print """# Helena help

This document describes Helena options.

General usage is:
```
helena [options] my-net.lna
```"""
    for title, opts in OPTION_TYPES:
        print
        print "## " + title
        for o in opts:
            print
            print "### " + helpMessage(o)

def printVersion():
    print "helena " + VERSION + " --- " + DATE


def exitWithError(err):
    print >> sys.stderr, "error: " + err
    exit(1)

def parseArgument(arg):
    S = re.search
    if S("^-(-)?[a-zA-Z\-]+(=.+)?$", arg):
        l = arg.split("=", 1)
        if len(l) == 2:
            return (l[0], l[1])
        else:
            return (l[0], None)
    else:
        return (None, None)

class Config:

    def __init__(self):
        self.language = None
        self.directory = None
        self.inFile = None
        self.inFileExt = None
        self.propType = None
        self.dynamicPartialOrder = False
        self.propositions = []
        self.bfsQueueBlockSize = 10 ** 4
        self.dfsStackBlockSize = 10 ** 4
        self.rwalkMaxDepth = 10 ** 3
        self.maxTraceLength = 10 ** 3
        self.dbfsCheckTermPeriodMS = 100
        self.debug = False
        for o in OPTS:
            default = optDefaultValue(o)
            attr = optConfigAttr(o)
            t = optType(o)
            if attr is not None:
                if default is not None:
                    val = t(default)
                else:
                    val = None
                setattr(self, attr, val)

    def fixAttributes(self):
        self.action = self.action.upper()
        self.algo = self.algo.upper()
        self.traceType = self.traceType.upper()

    #  correct inconsistencies in received arguments
    def correct(self):
        if self.algo == DBFS and self.action == CHECK and self.propType == LTL:
            self.action = EXPLORE
        if self.action == BUILD_GRAPH:
            self.algo = DELTA_DDD
            self.prop = ""
            self.workers = 1
        elif self.action == CHECK and self.propType == LTL:
            self.algo = DFS
            if self.traceType == STATE:
                self.traceType = EVENTS
        elif self.action == SIMULATE:
            self.runTimeChecks = True
        if self.algo == DBFS:
            self.traceType = STATE
            self.workers = 1
        self.hashCompaction = self.hashCompaction and self.algo not in [
            BWALK, RWALK, DELTA_DDD, DBFS ]
        self.partialOrder = self.partialOrder and self.algo not in [
            BWALK, RWALK, DELTA_DDD, DBFS ]
        self.stateCompression = self.stateCompression and self.algo not in [
            BWALK, RWALK, DELTA_DDD ] and not self.hashCompaction
        self.randomSuccs = self.randomSuccs and self.algo in [
            BWALK, DFS ]
        self.distributedStateCompression = self.distributedStateCompression \
            and self.algo in [ DBFS ] and not self.hashCompaction \
            and self.language == DVE
        self.stateCompression = self.stateCompression and self.algo not in [
            BWALK, RWALK, DELTA_DDD ] and not self.hashCompaction \
            and not self.distributedStateCompression

    def openFile(self, name, mode):
        if self.directory is None:
            return open(name, mode)
        else:
            return open(self.directory + os.sep + name, mode)

    def generateConfigFile(self):
        f = self.openFile("config.h", "w")
        W = f.write
        W("#ifndef LIB_CONFIG\n")
        W("#define LIB_CONFIG\n")
        W("\n")
        now = datetime.now()
        model = ""
        if self.language == LNA:
            languageLong = "Helena"
        elif self.language == PNML:
            languageLong = "Petri net"
        elif self.language == DVE:
            languageLong = "DVE"
            (model, _) = os.path.splitext(os.path.basename(self.inFile))
            if model == "":
                model = "model"
        prop = self.prop
        if prop is None:
            prop = ""
        if self.partialOrder and not self.proviso:
            self.proviso = self.propType is not None and \
                           self.propType != DEADLOCK
        distributed = self.algo in [ DBFS ]
        params = [
            ("ACTION_BUILD_GRAPH", self.action == BUILD_GRAPH),
            ("ACTION_CHECK_LTL", self.action == CHECK and \
             self.propType == LTL),
            ("ACTION_CHECK_SAFETY", self.action == CHECK and
             self.propType in [ STATE, DEADLOCK ]),
            ("ACTION_CHECK", self.action == CHECK),
            ("ACTION_EXPLORE", self.action == EXPLORE),
            ("ACTION_SIMULATE", self.action == SIMULATE),
            ("ALGO_BFS", self.algo == BFS),
            ("ALGO_BWALK", self.algo == BWALK),
            ("ALGO_DBFS", self.algo == DBFS),
            ("ALGO_DELTA_DDD", self.algo == DELTA_DDD),
            ("ALGO_DFS", self.algo == DFS),
            ("ALGO_RWALK", self.algo == RWALK),
            ("ALGO_TARJAN", self.algo == TARJAN),
            ("BFS_QUEUE_BLOCK_SIZE", self.bfsQueueBlockSize),
            ("DATE", "\"" + now.strftime("%B, %d, %Y at %H:%M:%S") + "\""),
            ("DBFS_CHECK_TERM_PERIOD_MS", self.dbfsCheckTermPeriodMS),
            ("DEBUG", self.debug),
            ("DELTA_DDD_CAND_SET_SIZE", self.candidateSetSize),
            ("DELTA_DDD_STORAGE", self.algo == DELTA_DDD),
            ("DFS_STACK_BLOCK_SIZE", self.dfsStackBlockSize),
            ("DISTRIBUTED", distributed),
            ("DISTRIBUTED_STATE_COMPRESSION",
             self.distributedStateCompression),
            ("DYNAMIC_POR", self.dynamicPartialOrder),
            ("EXPLORATION_CACHE_SIZE", self.explorationCacheSize),
            ("FILE_PATH", "\"" + os.path.realpath(self.inFile) + "\""),
            ("GRAPH_FILE", "\"graph.dat\""),
            ("HASH_COMPACTION", self.hashCompaction),
            ("HASH_SIZE_BITS", self.hashSize),
            ("HASH_SIZE_M", pow(2, self.hashSize) - 1),
            ("HASH_SIZE", pow(2, self.hashSize)),
            ("HASH_STORAGE", self.algo not in [ DELTA_DDD, RWALK ]),
            ("LANGUAGE", "\"" + languageLong + "\""),
            ("LANGUAGE_DVE", self.language == DVE),
            ("LANGUAGE_LNA", self.language == LNA),
            ("LANGUAGE_PNML", self.language == PNML),
            ("MAX_STATE", self.stateLimit),
            ("MAX_TIME", self.timeLimit),
            ("MAX_TRACE_LENGTH", self.maxTraceLength),
            ("MODEL_NAME", "\"" + model + "\""),
            ("NO_WORKERS", self.workers),
            ("PARALLEL", self.workers > 1),
            ("POR", self.partialOrder),
            ("PROPERTY", "\"" + prop + "\""),
            ("PROVISO", self.proviso),
            ("RANDOM_SUCCS", self.randomSuccs),
            ("REPORT_FILE", "\"report.xml\""),
            ("RG_REPORT_FILE", "\"rg-report.xml\""),
            ("RWALK_MAX_DEPTH", self.rwalkMaxDepth),
            ("SHMEM_BUFFER_SIZE", self.shmemBufferSize),
            ("STATE_COMPRESSION", self.stateCompression),
            ("STATE_COMPRESSION_BITS", self.compressionBits),
            ("STATE_LIMITED", self.stateLimit != 0),
            ("TIME_LIMITED", self.timeLimit != 0),
            ("TRACE_EVENTS", self.traceType == EVENTS),
            ("TRACE_FULL", self.traceType == FULL),
            ("TRACE_STATE", self.traceType == STATE),
            ("WITH_OBSERVER", self.withObserver),
            ("WITH_PAPI", self.withPapi)
        ]
        for (p, v) in params:
            if type(v) == bool:
                W("#define CFG_" + p + " " + ("1" if v else "0") + "\n")
            elif type(v) in [ float, int ]:
                W("#define CFG_" + p + " " + str(v) + "\n")
            elif type(v) == str:
                W("#define CFG_" + p + " " + v + "\n")
            else:
                raise Exception
        W("\n#endif  /*  LIB_CONFIG  */\n")
        f.close()

    def parseFromCommandLine(self):
        for arg in sys.argv[1 : len(sys.argv) - 2]:
            optOK = False
            valOK = True
            (opt, val) = parseArgument(arg)
            for o in OPTS:
                if opt == "-" + optShort(o) or opt == "--" + optLong(o):
                    t = optType(o)
                    if t is None:
                        optOK = True
                        break
                    else:
                        attr = optConfigAttr(o)
                        assert attr is not None
                        default = optDefaultValueCommandLine(o)
                        if val is None:
                            val = default
                        if val is not None:
                            try:
                                accept = optAcceptable(o)
                                if accept is not None and \
                                   str(val).upper() not in map(str, accept):
                                    valOK = False
                                else:
                                    if t == list:
                                        l = getattr(self, attr)
                                        l.append(val)
                                    else:
                                        setattr(self, attr, t(val))
                                    optOK = True
                            except:
                                pass
                    break
            if self.version:
                printVersion()
                exit(0)
            if self.printHelp is not None:
                if self.printHelp == "":
                    printHelpShort()
                    exit(0)
                elif self.printHelp == "FULL":
                    printHelpMD()
                    exit(0)
                else:
                    try:
                        print helpMessage(self.printHelp)
                    except:
                        optOK = False
                    if optOK:
                        exit(0)

            err = None
            if not valOK:
                err = "invalid value for option " + opt + ": " + val
            elif not optOK:
                err = "invalid option: " + arg
            if err is not None:
                exitWithError(err)
        if len(sys.argv) >= 2:
            self.inFile = sys.argv[len(sys.argv) - 2]
            (f, self.inFileExt) = os.path.splitext(self.inFile)
            self.language = self.inFileExt[1:].lower()
            if self.propFile is None:
                self.propFile = f + ".prop" + self.inFileExt
        if len(sys.argv) >= 3:
            self.directory = sys.argv[len(sys.argv) - 1]

    def generatePropertyCode(self):
        f = self.openFile("prop.h", "w")
        f.write("#define state_check_property(now, en) FALSE\n")
        f.close()
        self.openFile("prop.c", "w").close()
        if self.action == CHECK and self.language == DVE:
            self.propType = LTL
        elif self.action == CHECK and self.language == LNA:
            if self.prop is None:
                exitWithError("action check needs a property " +
                              "(option --property=PROP)")
            cmd = "helena-generate-property "
            cmd = cmd + " " + self.prop + " " + self.propFile
            if self.directory is None:
                cmd = cmd + " ."
            else:
                cmd = cmd + " " + self.directory
            if os.system(cmd):
                exit(1)
            else:
                f = self.openFile("PROPERTY", "r")
                lines = f.readlines()
                f.close()
                i = 0
                for prop in lines:
                    p = prop.replace("\n", "")
                    if i == 0:
                        self.propType = p
                    else:
                        self.propositions.append(prop)
                    i = i + 1
                path = "PROPERTY"
                if self.directory is not None:
                    path = self.directory + os.sep + path
                os.remove(path)

    def outputModelOptions(self):
        opts = []
        opts.append("--capacity=" + str(self.capacity))
        opts.append("--compression-comp-sizes=" +
                    str(self.compressionCompSizes))
        if self.runTimeChecks:
            opts.append("--run-time-checks=1")
        else:
            opts.append("--run-time-checks=0")
        for prop in self.propositions:
            opts.append("--proposition=" + prop)
        for define in self.defines:
            opts.append("--define=" + define)
        for param in self.parameters:
            opts.append("--parameter=" + param)
        f = open("model-options", "w")
        for o in opts:
            f.write(" " + o)
        f.close()

if __name__ == "__main__":
    C = Config()
    C.parseFromCommandLine()
    C.fixAttributes()
    C.generatePropertyCode()
    C.correct()
    C.generateConfigFile()
    C.outputModelOptions()
    exit(0)
