#! /usr/bin/python
#
#  File: helena-test
#

import os
import subprocess
import random
import shutil
import sys

def exitWithUsage(exitCode):
    print "helena-test input-dir output-dir"
    exit(exitCode)

class Model:
    def launchHelena(self, l):
        (model, _) = os.path.splitext(self.modelFile)
        d = self.outDir + os.sep
        md = d + "test-" + str(self.testNum)
        args = "helena " + " ".join(l) + " --model-directory=" + md + " "\
            "--report-file=report.xml " + \
            "-sl=1000000 -tl=60 " + self.modelFile
        print args
        errFile = open(d + "test-" + str(self.testNum) + ".err", "w")
        subprocess.call(args, stderr = errFile,
                        stdout = self.outFile, shell = True)
        errFile.close()
        if os.path.exists("report.xml"):
            n = d + "test-" + str(self.testNum) + ".xml"
            os.rename("report.xml", n)
            if "-N=build-graph" in l:
                p = d + "test-" + str(self.testNum) + ".pdf"
                subprocess.call("helena-graph" +
                                " " + md + os.sep + "rg-report.xml " + p,
                                shell = True)
        else:
            f = open(d + "test-" + str(self.testNum) + ".xml", "w")
            f.write("error")
            f.close()
        f = open(d + "test-" + str(self.testNum) + ".opt", "w")
        f.write(" ".join(l))
        f.close()
        shutil.rmtree(md)
        self.testNum = self.testNum + 1

    #  state caching is only available in DFS
    def appendStateCaching(self, l):
        f = self.next [ self.appendStateCaching ]
        f(l + ["-S=0"])
        if "-A=dfs" in l:
            f(l + ["-S=1" ])

    #  hash compaction is available in DFS, BFS and FRONTIER
    def appendHashCompaction(self, l):
        f = self.next [ self.appendHashCompaction ]
        f(l + ["-H=0"])
        if "-A=dfs" in l or "-A=bfs" in l or "-A=frontier" in l:
            f(l + ["-H=1"])

    #  partial order reduction is available in DFS, BFS and FRONTIER
    def appendPartialOrder(self, l):
        f = self.next [ self.appendPartialOrder ]
        f(l + ["-P=0"])
        if "-A=dfs" in l or "-A=bfs" in l or "-A=frontier" in l:
            f(l + ["-P=1"])

    #  reachability graph generation is only available with algorithm DELTA-DDD
    #  and LTL verification is only available with algorithm DFS
    def appendAlgo(self, l):
        f = self.next [ self.appendAlgo ]
        if "-N=build-graph" in l:
            f(l + ["-A=delta-ddd"])
        else:
            f(l + ["-A=dfs"])
            if not self.ltl:
                f(l + ["-A=bfs"])
                f(l + ["-A=frontier"])
                f(l + ["-A=rwalk"])
                f(l + ["-A=delta-ddd"])

    def appendAction(self, l):
        f = self.next [ self.appendAction ]
        (model, _) = os.path.splitext(self.modelFile)
        f(l + ["-N=build-graph"])
        f(l + ["-N=explore"])
        propFile = model + ".prop.lna"
        if os.path.exists(propFile):
            pf = open(propFile)
            for str in pf:
                fields = str.split()
                if len(fields) >= 3 and fields[1] == "property":
                    prop = fields[2].split(":")[0]
                    self.ltl = fields[0] == "ltl"
                    f(l + [ "-N=check-" + prop ])
                    self.ltl = False
            pf.close()

    def launchTest(self):
        print "=====  " + self.modelFile + " ====="
        self.outFile = open(os.devnull, "w")
        self.appendAction([])

    def __init__(self, modelFile, outDir):
        self.outFile = None
        self.check = False
        self.ltl = False
        self.modelFile = modelFile
        self.outDir = outDir + os.sep + os.path.basename(self.modelFile)
        self.next = { self.appendAction          : self.appendAlgo,
                      self.appendAlgo            : self.appendPartialOrder,
                      self.appendPartialOrder    : self.appendHashCompaction,
                      self.appendHashCompaction  : self.appendStateCaching,
                      self.appendStateCaching    : self.launchHelena }
        self.testNum = 0
        os.mkdir(self.outDir)
        
if __name__ == "__main__":
    if len(sys.argv) != 3:
        exitWithUsage(1)
    inDir  = sys.argv[1]
    outDir = sys.argv[2]
    os.mkdir(outDir)
    for(_, _, files) in os.walk(inDir):
        for f in files:
            (f, ext) = os.path.splitext(f)
            if ext == ".lna":
                (_, ext2) = os.path.splitext(f)
                if ext2 != ".prop":
                    m = Model(os.path.abspath(inDir + os.sep + f + ext), outDir)
                    m.launchTest()
        break
exit(0)
