#!/usr/bin/python
#
#  File: helena-report
#
#  Parse an XML report file and print it to the standard output.
#

from xml.dom.minidom import parse, parseString, Node
import os
import shutil
import subprocess
import sys
from textwrap import TextWrapper

WIDTH = 80
WRAPPER = TextWrapper(width = WIDTH)
HELENA_DIR = os.path.join(os.getenv("HOME"), ".helena")
MODELS_DIR = os.path.join(HELENA_DIR, "models")

def exitWithError(errMsg):
    sys.stderr.write(str(errMsg) + "\n")
    exit(1)

def printDashes(n):
    str = ""
    for i in range(0, n): str += " "
    for i in range(0, WIDTH - n): str += "-"
    print str

def nodeValue(n):
    if len(n.childNodes) == 0:
        return "NA"
    else:
        return n.childNodes[0].nodeValue

def getBasicNodeComment(n, fmt = None, unit = None):
    result = None
    l = n.getElementsByTagName("list")
    if len(l) > 0:
        l = l[0]
        for (t, nt) in [ ("total", "sum"),
                         ("min", "min"),
                         ("max", "max"),
                         ("dev", "dev"),
                         ("avg", "avg") ]:
            items = l.getElementsByTagName(nt)
            if len(items) > 0:
                if result is None:
                    result = ""
                else:
                    result += ", "
                result = t + " = "
                v = nodeValue(items[0])
                result += fmt(v) if fmt is not None else v
                if unit is not None:
                    result += " " + unit
    return result

def getBasicNodeValue(n, fmt = None, unit = None):
    result = ""
    l = n.getElementsByTagName("list")
    if len(l) == 0:
        v = nodeValue(n)
        result += fmt(v) if fmt is not None else v
        if unit is not None:
            result += " " + unit
    else:
        l = l[0]      
        result = ""
        for c in n.getElementsByTagName("item"):
            if result != "":
                result += ", "
            result += getBasicNodeValue(c, fmt, unit)
        result = "[" + result + "]"
    return result

def printInfoReport(r):
    WRAPPER.initial_indent = 6 * " "
    WRAPPER.subsequent_indent = WRAPPER.initial_indent + "   "
    generalInfos = { "model"   : "Model analyzed",
                     "date"    : "Analysis date",
                     "language": "Model language",
                     "filePath": "File path",
                     "command" : "Command used" }
    for e in r.childNodes:
        name = e.nodeName
        if name in generalInfos:
            print (4 * " ") + generalInfos[name]
            print WRAPPER.fill(getBasicNodeValue(e))
        elif name == "modelParameters":
            P = [ c for c in e.childNodes if c.nodeName == "modelParameter" ]
            print (4 * " ") + "Model parameters"
            for p in P:
                n = p.getElementsByTagName("modelParameterName")[0]
                v = p.getElementsByTagName("modelParameterValue")[0]
                print (6 * " ") + getBasicNodeValue(n) + " = " + \
                    getBasicNodeValue(v)

def printSearchReport(r):
    WRAPPER.initial_indent = 6 * " "
    WRAPPER.subsequent_indent = WRAPPER.initial_indent
    def formatTermState(s):
        values = {
            "searchTerminated" : "SEARCH_TERMINATED",
            "stateLimitReached": "STATE_LIMIT_REACHED",
            "timeElapsed"      : "TIME_LIMIT_REACHED",
            "noCounterExample" : "NO_COUNTER_EXAMPLE",
            "propertyHolds"    : "PROPERTY_HOLDS",
            "propertyViolated" : "PROPERTY_VIOLATED",
            "interruption"     : "INTERRUPTION",
            "error"            : "ERROR" }
        try:
            return values[s]
        except:
            return "NA"
    def formatAction(a):
        values = {
            "buildGraph": "state space graph construction",
            "check"     : "property checking",
            "explore"   : "state space exploration" }
        try:
            return values[a]
        except:
            return "NA"
    options = {
        "stateCompression"           : ("State compression", None),
        "distributedStateCompression": ("Distributed state compression", None),
        "partialOrder"               : ("Partial order reduction", None),
        "partialOrderProviso"        : ("Partial order reduction proviso",
                                        None),
        "hashCompaction"             : ("Hash compaction", None),
        "randomSuccs"                : ("Random successor selection", None),
        "searchAlgorithm"            : ("Search algorithm", None),
        "candidateSetSize"           : ("Candidate set size", "states"),
        "hashTableSize"              : ("Hash table size", "states"),
        "shmemBufferSize"            : ("SHMEM buffer size", "bytes"),
        "stateCompressionBits"       : ("State compression bits", None),
        "workers"                    : ("Worker threads", None) }
    l = [ ("action", "Action performed", formatAction),
          ("host", "Host machine", None),
          ("property", "Property checked", None),
          ("searchResult", "Termination state", formatTermState),
          ("errorMessage", "Error message", None) ]
    for tag, desc, fmt in l:
        n = r.getElementsByTagName(tag)
        if len(n) > 0:
            print (4 * " ") + desc
            print WRAPPER.fill(getBasicNodeValue(n[0], fmt = fmt))
    for e in r.childNodes:
        name = e.nodeName
        if name == "searchInfo":
            i = getBasicNodeValue(e)
            line = "    " + searchInfos[name] + ": " + i
            print WRAPPER.fill(line)              
        elif name == "searchOptions":
            print "    Options"
            for o in [ o for o in e.childNodes if o.nodeName in options ]:
                name = o.nodeName
                desc, units = options[name]
                line = desc + " = " + nodeValue(o)
                if units is not None:
                    line += " " + units
                print WRAPPER.fill(line)

def printStatisticsReport(r):
    WRAPPER.initial_indent = 6 * " "
    WRAPPER.subsequent_indent = WRAPPER.initial_indent + (2 * " ")
    statistics = {
        (0, "compilationTime")      : ("for source compilation", "s."),
        (1, "searchTime")           : ("for exploration", "s."),
        (2, "places")               : ("places", None),
        (3, "transitions")          : ("transitions", None),
        (4, "netArcs")              : ("arcs", None),
        (5, "stateSize")            : ("for state size", "bytes"),
        (6, "compressedStateSize")  : ("for compressed state size", "bytes"),
        (7, "statesStored")         : ("states stored", None),
        (8, "statesProcessed")      : ("states processed", None),
        (9, "statesReduced")        : ("reduced states", None),
        (10, "statesAccepting")     : ("accepting states", None),
        (11, "statesTerminal")      : ("deadlock states", None),
        (12, "arcs")                : ("transitions", None),
        (13, "eventsExecuted")      : ("events executed", None),
        (14, "shmemComms")          : ("SHMEM communications", None),
        (15, "avgCPUUsage")         : ("of average CPU Usage", "%"),
        (16, "lvl1TotalCacheMiss")  : ("lvl 1 cache misses", None),
        (17, "lvl1TotalCacheHit")   : ("lvl 1 cache hits", None),
        (18, "lvl2TotalCacheMiss")  : ("lvl 2 cache misses", None),
        (19, "lvl2TotalCacheHit")   : ("lvl 2 cache hits", None),
        (20, "lvl3TotalCacheMiss")  : ("lvl 3 cache misses", None),
        (21, "lvl3TotalCacheHit")   : ("lvl 3 cache hits", None),
        (22, "bwalkIterations")     : ("BWALK iterations", None),
        (23, "compressionTemplates"): ("compression templates", None) }
    statisticsCategories = {
        "timeStatistics" : "Time statistics",
        "modelStatistics": "Model statistics",
        "graphStatistics": "Exploration statistics",
        "papiStatistics" : "PAPI statistics",
        "otherStatistics": "Other statistics" }
    c = [ c for c in r.childNodes if c.nodeName in statisticsCategories ]
    for e in c:
        name = e.nodeName
        print ""
        print "    " + statisticsCategories[name]
        printDashes(4)
        for num, s in sorted(statistics):
            snode = e.getElementsByTagName(s)
            if len(snode) > 0:
                snode = snode[0]
                desc, unit = statistics[(num, s)]
                val = getBasicNodeValue(snode, unit = unit)
                comment = getBasicNodeComment(snode, unit = unit)
                line = val + " " + desc
                if comment is not None:
                    line += " (" + comment + ")"
                print WRAPPER.fill(line)

def printTraceReport(r):
    def printExprList(e, d):
        result = ""
        for ex in e.childNodes:
            name = ex.nodeName
            if name in d:
                if result != "": result += ", "
                result += d[name](ex, d)
        return result
    def printEnum(e, d):
        return nodeValue(e)
    def printNum(e, d):
        return nodeValue(e)
    def printVector(e, d):
        l = e.getElementsByTagName("exprList")[0]
        return "[" + printExprList(l, d) + "]"
    def printStruct(e, d):
        l = e.getElementsByTagName("exprList")[0]
        return "{" + printExprList(l, d) + "}"
    def printContainer(e, d):
        l = e.getElementsByTagName("exprList")[0]
        if len(l.childNodes) == 0: return "empty"
        else: return "|" + printExprList(l, d) + "|"
    def printToken(e, d):
        m = nodeValue(e.getElementsByTagName("mult")[0])
        l = e.getElementsByTagName("exprList")[0]
        if len(l.childNodes) == 0: l = "epsilon"
        else: l = "<( " + printExprList(l, d) + " )>"
        if m != "1": return m + " * " + l
        else: return l
    def printState(e, d):
        descElement = e.getElementsByTagName("stateDescription")
        if len(descElement) > 0:
            desc = nodeValue(descElement[0]).strip()
        else:
            desc = "    {" + "\n"
            for s in e.getElementsByTagName("placeState"):
                p = nodeValue(s.getElementsByTagName("place")[0])
                l = ""
                for t in s.getElementsByTagName("token"):
                    if l != "": l += " + "
                    l += printToken(t, d)
                desc += "      " + p + " = " + l + "\n"
            desc += "    }"
        print desc
    def printBinding(e, d):
        result = ""
        bs = e.getElementsByTagName("varBinding")
        for b in bs:
            var = b.getElementsByTagName("var")[0]
            if result != "": result += ", " 
            result += nodeValue(var) + " = "
            e = b.childNodes[1]
            result += d[e.nodeName](e, d)
        return result
    def printEvent(e, d):
        descElement = e.getElementsByTagName("eventDescription")
        if len(descElement) > 0:
            desc = nodeValue(descElement[0]).strip()
        else:
            trans = e.getElementsByTagName("transition")
            trans = nodeValue(trans[0])
            l = e.getElementsByTagName("binding")
            desc = "(" + trans
            if len(l) > 0:
                desc = desc + ", [" + printBinding(l[0], d) + "]"
            des = desc + ")"
        print desc + " ->"
    traceItem = {
        "enum"      : printEnum,
        "num"       : printNum,
        "vector"    : printVector,
        "struct"    : printStruct,
        "container" : printContainer,
        "state"     : printState,
        "event"     : printEvent }
    traceTypes = {
        "traceFull"  : "The following run invalidates the property.",
        "traceEvents": "The following run invalidates the property.",
        "traceState" : "The following state invalidates the property." }
    for item in r.childNodes:
        name = item.nodeName
        if name in traceTypes:
            if len(item.getElementsByTagName("traceTooLong")) > 0:
                print "\
    A run invalidating the property has been found but is too long to be\n\
    displayed.  If depth-first search was used, try running the search\n\
    again with option --random-succs to try finding another such run."
            else:
                print "    " + traceTypes[name] + "\n"
                for sub in item.childNodes:
                    name = sub.nodeName
                    if name in traceItem:
                        traceItem[name](sub, traceItem)

def printDoc(doc):
    subReports = {
        "infoReport"      : ("General informations", printInfoReport),
        "searchReport"    : ("Search report", printSearchReport),
        "statisticsReport": ("Statistics report", printStatisticsReport),
        "traceReport"     : ("Trace report", printTraceReport) }
    report = doc.getElementsByTagName("helenaReport")
    printDashes(0)
    print "Helena report"
    printDashes(0)
    for e in report[0].childNodes:
        name = e.nodeName
        if name in subReports:
            desc, printer = subReports[name]
            print "\n  " + desc
            printDashes(2)
            printer(e)
    printDashes(0)

def findReportFile(m):
    if not os.path.isdir(MODELS_DIR):
        raise IOError("error: model directory does not exist")        
    for lang in os.listdir(MODELS_DIR):
        langDir = os.path.join(MODELS_DIR, lang)
        for mod in os.listdir(langDir):
            if mod == m:
                f = os.path.join(langDir, mod, "report.xml") 
                if os.path.exists(f):
                    return f
                else:
                    raise IOError("error: report file \"" + f + "\" not found")
    raise IOError("error: model \"" + m + "\" not found")

def main():
    if not(len(sys.argv) in range(2, 4)):
        print "usage: helena-report model-name [out-file]"
        print "       helena-report report.xml [out-file]"
        exit(1)
    else:
        model = sys.argv[1]
        if len(sys.argv) > 2:
            out = sys.argv[2]
            (_, outType) = os.path.splitext(out)
        else:
            outType = "stdout"
        if os.path.exists(model):
            xml = model
        else:
            try:
                xml = findReportFile(model)
            except IOError, err:
                exitWithError(err)
        if outType == "stdout":
            try:
                doc = parse(xml)
            except:
                msg = "error: could not parse file " + xml
                exitWithError(msg)
            printDoc(doc)
        elif outType == ".xml":
            shutil.copyfile(xml, out)
        else:
            msg = "error: \"" + outType + \
                  "\" is not a valid extension for output file"
            exitWithError(msg)
        exit(0)

if __name__ == "__main__":
    main()        
